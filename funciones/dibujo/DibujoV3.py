# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DibujoV3
                                 A QGIS plugin
 DibujoV3
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-02
        git sha              : $Format:%H$
        copyright            : (C) 2018 by DibujoV3
        email                : DibujoV3
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from qgis._core import QgsPointXY

from .resources import *
# Import the code for the dialog
from .DibujoV3_dialog import DibujoV3Dialog
import os.path

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSize
from PyQt5.QtGui import QIcon, QColor, QCursor, QPixmap
from PyQt5.QtWidgets import QAction, QWidget,QVBoxLayout, QPushButton, QMessageBox, QTableWidget, QTableWidgetItem
from PyQt5 import QtWidgets

from qgis.core import *
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from qgis.gui import QgsLayerTreeView, QgsMapToolEmitPoint, QgsMapTool, QgsRubberBand, QgsVertexMarker, QgsMapToolAdvancedDigitizing

import os.path
import os, json, requests, sys
from osgeo import ogr, osr
from inspect import getframeinfo, stack

from .VentanaDibujoV3 import VentanaDibujoV3


class DibujoV3:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        

        # Create the dialog (after translation) and keep reference
        self.dockwidget = DibujoV3Dialog(parent = iface.mainWindow())
        #self.dockwidget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        
        self.iface = iface

        self.CFG = None
        self.UTI = None
        self.DFS = None
        self.ACA = None
        self.ELM = None
        self.DFS = None
        self.TPG = None

        self.pluginIsActive = False

        
        #var = QSettings()
        '''
        #if var.value('logeado') == 'True':
        #    self.eventos = Evento(iface.mapCanvas(), self)
            '' '
            self.dockwidget.botonDibujar.clicked.connect(self.eventos.alternarModoDibujo)
            iface.currentLayerChanged.connect(self.eventos.actualizarCapaActiva)
            self.eventos.deactivated.connect(self.eventos.recargarQgsMapTool)
            ' ''
        '''

        # Declare instance attributes
        '''
        self.actions = []
        self.menu = self.tr(u'&DibujoV3')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'DibujoV3')
        self.toolbar.setObjectName(u'DibujoV3')
        '''

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DibujoV3', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/DibujoV3/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'DibujoV3'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def onClosePlugin(self):
        
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DibujoV3'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog

        var = QSettings()
        if var.value('logeado') == 'True':
            self.mapTool = AdvancedMapTool(iface.mapCanvas(), iface.cadDockWidget(), self)
            self.dockwidget.botonDibujar.clicked.connect(self.mapTool.alternarModoDibujo)
            iface.currentLayerChanged.connect(self.mapTool.actualizarCapaActiva)


        for x in iface.mapNavToolToolBar().actions():
             if x.objectName() == 'mActionPan':
                 x.trigger()

        if not self.pluginIsActive:
            self.pluginIsActive = True
            #print "** STARTING HerramientasPoligono"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)


            # show the dockwidget
            # TODO: fix to allow choice of dock location
            iface.mapCanvas().setMapTool(self.mapTool)
            self.dockwidget.show()
            '''
            if self.eventos.dibujando:
                self.eventos.canvas.setCursor(self.eventos.cursorRedondo)
            else:
                self.eventos.canvas.setCursor(self.eventos.cursorCruz)
            '''

        result = self.dockwidget.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    ######################################################################################################


class AdvancedMapTool(QgsMapToolAdvancedDigitizing):
    def __init__(self, canvas, cadDockWidget, pluginM):
        QgsMapToolAdvancedDigitizing.__init__(self, canvas, cadDockWidget)
        #Asignacion inicial
        self.canvas = canvas
        self.pluginM = pluginM
        self.ventana = VentanaDibujoV3(iface, self)
        self.setAutoSnapEnabled(True)
        #self.cadDockWidget().lockAngleChanged.connect(self.foo)
        #iface.cadDockWidget().enable()

        self.nombreCapaActiva = None
        for x in iface.advancedDigitizeToolBar().actions():
            if x.objectName() == 'mEnableAction':
                self.botonAD = x

        #Creacion de Rubber Band para Poligonos
        self.rubberPoli = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        self.rubberPoli.setFillColor(QColor(0,0,0,0))
        self.rubberPoli.setStrokeColor(QColor(255,0,0,255))
        self.rubberPoli.setWidth(2)

        #Creacion de Rubber Band para puntos
        self.rubberPunto = QgsRubberBand(self.canvas, QgsWkbTypes.PointGeometry)
        self.rubberPunto.setColor(Qt.red)
        self.rubberPunto.setWidth(6)
        
        #Creacion de rubberband para lineas
        self.rubberLinea = QgsRubberBand(self.canvas, QgsWkbTypes.PointGeometry)
        self.rubberLinea.setFillColor(QColor(0,0,0,0))
        self.rubberLinea.setStrokeColor(QColor(255,0,0,255))
        self.rubberLinea.setWidth(2)

        #Creacion de Listas para Poligonos
        self.puntoPoliTemp = None
        self.listaPuntosPoliTemp = []
        self.creandoPoli = False
        
        #Creacion de Listas para Lineas
        self.puntoLineaTemp = None
        self.listaPuntosLineaTemp = []
        self.creandoLinea = False
        self.foo = False
        self.cuentaClickLinea = 0
        self.cuentaClickPoli = 0

        #Marcador de Vertices
        self.marcador = QgsVertexMarker(self.canvas)
        self.marcador.setColor(QColor(0,255,0))
        self.marcador.setIconSize(5)
        self.marcador.setIconType(QgsVertexMarker.ICON_BOX)
        self.marcador.setPenWidth(3)
        
        #Inicializacion de booleanas
        self.dibujando = False
        self.primerClick = False
        
        #Creacion del Snapper
        self.snapper = self.canvas.snappingUtils()
        print(f" TYPE OF SNAPPER: {type(self.snapper)}")
        config = QgsSnappingConfig()
        config.setTolerance(240)
        self.snapper.setConfig(config)

        self.stringPoli = 'POLYGON (('
        self.cierrePoli = None

        self.stringLinea = 'LINESTRING ('
        #Cursor Redondo
        self.cursorRedondo = QCursor(QPixmap(["16 16 3 1",
                                        "      c None",
                                        ".     c #FF0000",
                                        "+     c #FFFFFF",
                                        "                ",
                                        "       +.+      ",
                                        "      ++.++     ",
                                        "     +.....+    ",
                                        "    +.     .+   ",
                                        "   +.   .   .+  ",
                                        "  +.    .    .+ ",
                                        " ++.    .    .++",
                                        " ... ...+... ...",
                                        " ++.    .    .++",
                                        "  +.    .    .+ ",
                                        "   +.   .   .+  ",
                                        "   ++.     .+   ",
                                        "    ++.....+    ",
                                        "      ++.++     ",
                                        "       +.+      "]))

        #Cursor Cruz
        self.cursorCruz = QCursor(QPixmap(["16 16 3 1",
                                        "      c None",
                                        ".     c #FF0000",
                                        "+     c #FFFFFF",
                                        "                ",
                                        "       +++       ",
                                        "       +.+      ",
                                        "       +.+      ",
                                        "       +.+     ",
                                        "       +.+     ",
                                        "       +.+      ",
                                        "++++++++.+++++++",
                                        "+..............+",
                                        "++++++++.+++++++",
                                        "       +.+      ",
                                        "       +.+      ",
                                        "       +.+      ",
                                        "       +.+      ",
                                        "       +.+      ",
                                        "       +++      "]))

        #Cursor Cruz
        self.cursorCuadro = QCursor(QPixmap(["16 16 3 1",
                                        "      c None",
                                        ".     c #FF0000",
                                        "+     c #FFFFFF",
                                        "                ",
                                        "+++++++++++++++",
                                        "+..............+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+++++++++++++++",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.+++++++++++.+",
                                        "+.............+",
                                        "+++++++++++++++",
                                        "       +++      "]))



############################################################################

    def cambiarColorRubber(self):

        #Checamos la capa activa
        if self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('manzana'):
            color = QColor(245,169,242)
            self.creandoPoli = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.geom'):
            color = QColor(0,255,0)
            print("CREANDO POLI VIEJA")
            self.creandoPoli = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.num'):
            color = QColor(0,255,0)
            self.creandoPoli = False
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('construcciones'):
            color = QColor(0,0,0)
            self.creandoPoli = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.geom'):
            color = QColor(198,140,33)
            self.creandoPoli = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.num'):
            color = QColor(198,140,33)
            self.creandoPoli = False
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('verticales'):
            color = QColor(255,153,0)
            self.creandoPoli = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('cves_verticales'):
            color = QColor(255,153,0) 
            self.creandoPoli = False
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Calles'):
            color = QColor(255,0,255)
            self.creandoLinea = True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Sectores'):
            color = QColor(131,199,255)
            self.creandoLinea = True
        else:
            color = QColor(255,0,0)
            self.creandoPoli = True

        if self.creandoPoli:
            self.rubberPoli.setStrokeColor(color)

#####################################################################################################

    def esCapaValida(self):
        
        if self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('manzana'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.geom'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.num'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('construcciones'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.geom'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.num'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('verticales'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('cves_verticales'):
            return True
        
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Area de Valor'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Zona Uno'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Zona Dos'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Codigo Postal'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Colonias'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Calles'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Sectores'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Localidades'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Secciones'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Municipios'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Region Catastral'):
            return True
        elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('Estado'):
            return True


        else:
            return False

###########################################################################################################

    #Cambiar capa seleccionada
    def actualizarCapaActiva(self):
        self.capaActiva = iface.activeLayer()
        if self.capaActiva is None:
            print("NO CAPA")
            return
        self.nombreCapaActiva = self.pluginM.ACA.traducirIdCapa(iface.activeLayer().id())
        self.pluginM.primerClick = False
        if self.capaActiva is not None: #Cuando la capa es seleccionada habilitamos
            self.pluginM.dockwidget.labelCapa.setText(self.nombreCapaActiva)
            self.pluginM.dockwidget.labelCapa.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)

            if self.esCapaValida():

                self.tipoCapa = self.capaActiva.wkbType()
                self.pluginM.dockwidget.botonDibujar.setEnabled(True)
                self.cambiarColorRubber()
                self.ventana.ultimo = 0
                print(f"---- Saliendo Maptool: {type(iface.mapCanvas().mapTool())}")
            else:
                print("actualizarCapaActiva : False")
                self.dibujando = False
                self.canvas.setCursor(self.cursorCruz)
                self.pluginM.dockwidget.labelStatus.setText("DESACTIVADO")
                estilo = 'color: rgb(255, 0, 0);'
                self.pluginM.dockwidget.labelStatus.setStyleSheet(estilo)
                self.pluginM.dockwidget.botonDibujar.setEnabled(False)
        else: #Cuando no, deshabilitamos el boton
            print("actualizarCapaActiva : Dunno")
            self.pluginM.dockwidget.botonDibujar.setEnabled(False)



######################################################################################################

    def deactivate(self):

        self.puntoPoliTemp = None
        self.listaPuntosPoliTemp = []
        self.creandoPoli = False

        self.puntoLineaTemp = None
        self.listaPuntosLineaTemp = []
        self.creandoLinea = False

        self.cuentaClickLinea = 0
        self.cuentaClickPoli = 0

        if self.dibujando:
            self.actualizarCapaActiva()

        self.activate()
        self.pluginM.pluginIsActive = False

##########################################################################################################################

    def alternarModoDibujo(self):
        
        self.actualizarCapaActiva()
        print('modoDibujo ', self.dibujando)
        if self.capaActiva != None:
            idCapa = self.capaActiva.id()
            if self.dibujando: #Apagar modo dibujo cuano esta prendido
                print("DESACTIVANDO")

                if self.botonAD.isChecked():
                    self.botonAD.trigger()

                self.dibujando = False
                self.canvas.setCursor(self.cursorCruz)
                self.pluginM.dockwidget.labelStatus.setText("DESACTIVADO")
                estilo = """color: rgb(255, 0, 0);
"""
                self.pluginM.dockwidget.labelStatus.setStyleSheet(estilo)
                self.pluginM.dockwidget.labelStatus.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
                self.listaPuntosLineaTemp = []
                self.rubberPoli.reset(QgsWkbTypes.LineGeometry)
                self.marcador.setCenter(QgsPointXY())
                self.cuentaClickLinea = 0
                self.primerClick = False
                self.listaPuntosPoliTemp = []
                self.cuentaClickPoli = 0
                self.rubberPoli.reset(QgsWkbTypes.PolygonGeometry)
                self.marcador.setCenter(QgsPointXY())
                self.isEmittingPoint = False


            else: #Al reves
                if self.ventana.posibleMostar and ( (not self.pluginM.ACA.esCapaReferencia(idCapa)) or idCapa == self.pluginM.ACA.capaEnEdicion ):
                    if not self.botonAD.isChecked():
                        self.botonAD.trigger()

                    print("ACTIVANDO")
                    self.dibujando = True
                    self.canvas.setCursor(self.cursorRedondo)
                    self.pluginM.dockwidget.labelStatus.setText("ACTIVADO")
                    self.pluginM.dockwidget.labelStatus.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
                    estilo = """color: rgb(1, 230, 1);"""
                    self.pluginM.dockwidget.labelStatus.setStyleSheet(estilo)



##################################################################################################################

    def cadCanvasPressEvent(self, event):

        x = event.pos().x()
        y = event.pos().y()

        startingPoint = QtCore.QPoint(x, y)

        toAdvanced = (
                self.cadDockWidget().constraintAngle().isLocked() or self.cadDockWidget().constraintDistance().isLocked()
                or self.cadDockWidget().constraintX().isLocked() or self.cadDockWidget().constraintY().isLocked())

        # puntoSnap = self.snapCompleto(startingPoint, toAdvanced)
        puntoSnap = None
        # if not toAdvanced:
        #     self.foo = True
        #     if puntoSnap is not None:
        #         self.cadDockWidget().setX(str(puntoSnap.x()), 1)
        #         self.cadDockWidget().setY(str(puntoSnap.y()), 1)
        #     else:
        #         self.cadDockWidget().setX(str(x), 1)
        #         self.cadDockWidget().setY(str(y), 1)


        if self.dibujando :
            self.capaActiva = iface.activeLayer()

            if self.capaActiva != None:
                self.tipoCapa = self.capaActiva.wkbType()

                trans = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)

                #Click Izquiedo
                if event.buttons() == Qt.LeftButton:

                    #Con puntos
                    if self.tipoCapa == 1 or self.tipoCapa == 4:
                        self.primerClick = False
                        self.capaActiva.startEditing()
                        feature = QgsFeature()
                        stringPunto = 'POINT (' + str(trans.x()) + ' ' + str(trans.y()) + ')'
                        feature.setGeometry(QgsGeometry.fromWkt(stringPunto))
                        (result, newFeatures) = self.capaActiva.dataProvider().addFeatures([feature])
                        
                        self.capaActiva.triggerRepaint()
                        self.capaActiva.commitChanges()

                        self.ventana.mostrarTabla()

                    elif self.tipoCapa == 3 or self.tipoCapa == 6:

                        self.puntoPoliTemp = self.toMapCoordinates(event.pos())
                        geoTemp = QgsPoint(trans.x(),trans.y())

                        self.cuentaClickPoli += 1
                        if not self.primerClick:
                            self.stringPoli = 'POLYGON (('

                        if puntoSnap != None:


                            if not self.primerClick:
                                self.cierrePoli = puntoSnap

                            self.stringPoli += str(puntoSnap.x()) + ' ' + str(puntoSnap.y()) + ', '
                            self.marcador.setCenter(puntoSnap)
                            self.listaPuntosPoliTemp.append(puntoSnap)
                            self.isEmittingPoint = True
                        else:
                            
                            if not self.primerClick:
                                self.cierrePoli = geoTemp

                            self.stringPoli += str(geoTemp.x()) + ' ' + str(geoTemp.y()) + ', '
                            self.marcador.setCenter(self.puntoPoliTemp)
                            self.listaPuntosPoliTemp.append(self.puntoPoliTemp)
                            self.isEmittingPoint = True

                        if not self.primerClick:
                            self.primerClick = True


                    #Con Lineas
                    elif self.tipoCapa == 2 or self.tipoCapa == 5:

                        self.puntoLineaTemp = self.toMapCoordinates(event.pos())
                        geoTemp = QgsPoint(trans.x(),trans.y())
                        self.cuentaClickLinea += 1
                        if not self.primerClick:
                            self.stringLinea = 'LINESTRING ('

                        if puntoSnap != None:
                            
                            self.stringLinea += str(puntoSnap.x()) + ' ' + str(puntoSnap.y()) + ', '
                            self.marcador.setCenter(puntoSnap)
                            self.listaPuntosLineaTemp.append(puntoSnap)
                            self.isEmittingPoint = True
                        else:

                            self.stringLinea += str(geoTemp.x()) + ' ' + str(geoTemp.y()) + ', '
                            self.marcador.setCenter(self.puntoLineaTemp)
                            self.listaPuntosLineaTemp.append(self.puntoLineaTemp)
                            self.isEmittingPoint = True

                        if not self.primerClick:
                            self.primerClick = True

            else:
                self.pluginM.UTI.mostrarAlerta("El modo dibujo no podra usarse sin una capa seleccionada", QMessageBox().Information, 'Modo dibujo')

            if event.buttons() == Qt.RightButton:
                print("CLICK SECUNDARIO")
                self.primerClick = False

                if self.botonAD.isChecked():
                    print("A DESCHECHAR")
                    self.botonAD.toggle()

                if self.tipoCapa == 2 or self.tipoCapa == 5:
                    print("------- AQUI1 --------")
                    
                    if self.cuentaClickLinea >= 2:
                        self.stringLinea += ')'

                        self.capaActiva.startEditing() 
                        linea = QgsFeature()
                        linea.setGeometry(QgsGeometry.fromWkt(self.stringLinea)) 
                        self.capaActiva.dataProvider().addFeatures([linea])
                        self.capaActiva.triggerRepaint()
                        self.capaActiva.commitChanges()
                        self.ventana.mostrarTabla()
                    
                    self.listaPuntosLineaTemp = []
                    self.rubberPoli.reset(QgsWkbTypes.LineGeometry)
                    #self.marcador.setCenter(QgsPointXY())
                    self.isEmittingPoint = False
                    self.cuentaClickLinea = 0
                    self.primerClick = False

                elif self.tipoCapa == 3 or self.tipoCapa == 6:
                    print("------- AQUI2 --------")
                    if self.cuentaClickPoli >= 3: 

                        self.stringPoli += str(self.cierrePoli.x()) + " " + str(self.cierrePoli.y()) + '))'
                        self.stringPoli = self.stringPoli.replace(', ))', '))')
                        self.capaActiva.startEditing() 
                        poli = QgsFeature()
                        poli.setGeometry(QgsGeometry.fromWkt(self.stringPoli)) 
                        self.capaActiva.dataProvider().addFeatures([poli])
                        self.capaActiva.triggerRepaint()
                        self.capaActiva.commitChanges()
                        self.ventana.mostrarTabla()

                    self.listaPuntosPoliTemp = []
                    self.cuentaClickPoli = 0
                    self.rubberPoli.reset(QgsWkbTypes.PolygonGeometry)
                    #self.marcador.setCenter(None)
                    self.isEmittingPoint = False
                    self.primerClick = False

                if not self.esCapaConsulta():
                    self.capaActiva.setReadOnly(True)

############################################################################################################

    def cadCanvasMoveEvent(self, event):

        x = event.pos().x()
        y = event.pos().y()

        startingPoint = QtCore.QPoint(x,y)
        
        posTemp = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)

        toAdvanced = (
                    self.cadDockWidget().constraintAngle().isLocked() or self.cadDockWidget().constraintDistance().isLocked()
                    or self.cadDockWidget().constraintX().isLocked() or self.cadDockWidget().constraintY().isLocked())

        # puntoSnap = self.snapCompleto(startingPoint, toAdvanced)
        puntoSnap = None
        # if not toAdvanced:
        #     if puntoSnap is not None:
        #         self.cadDockWidget().setX(str(puntoSnap.x()), 1)
        #         self.cadDockWidget().setY(str(puntoSnap.y()), 1)
        #         self.cadDockWidget().updateCadPaintItem()
        #     else:
        #         self.cadDockWidget().setX(str(x), 1)
        #         self.cadDockWidget().setY(str(y), 1)
        #         self.cadDockWidget().updateCadPaintItem()

        # if (len(self.listaPuntosPoliTemp) > 1) and self.foo:
        #     self.cadDockWidget().setPoints([self.listaPuntosPoliTemp[-1]])
        #     print(f"x: {self.listaPuntosPoliTemp[-2].x()}, y:{self.listaPuntosPoliTemp[-2].y()}")
        #     self.cadDockWidget().updateCadPaintItem()
        #     self.foo = False
        #print(f"TIpo de capa: {self.tipoCapa}")
        #print(f"creandoPoli: {self.creandoPoli}")
        #Creando un poligono
        if self.creandoPoli and (self.tipoCapa == 3 or self.tipoCapa == 6):
            
            self.rubberPoli.reset(QgsWkbTypes.PolygonGeometry)
            self.rubberPunto.reset(QgsWkbTypes.PointGeometry)

            
            if puntoSnap != None:

                puntoSnapXY = QgsPointXY(puntoSnap.x(),puntoSnap.y())
                self.rubberPunto.addPoint(puntoSnapXY, True)
                self.rubberPunto.show()
            if self.primerClick:
                if (len(self.listaPuntosPoliTemp) > 1):

                    if puntoSnap != None:
                        self.listaPuntosPoliTemp[-1] = puntoSnapXY
                    else:
                        self.listaPuntosPoliTemp[-1] = posTemp

                    for punto in self.listaPuntosPoliTemp[:-1]:
                        self.rubberPoli.addPoint(punto, False)
                    self.rubberPoli.addPoint(self.listaPuntosPoliTemp[-1], True)
                    #cadWidget.setDistance(str(self.listaPuntosPoliTemp[-2].distance(self.listaPuntosPoliTemp[-1])), 2)
                    print("PRIMER POINT SHOWING RUBBER LINEA 817")
                    self.rubberPoli.show()
                else:
                    if puntoSnap != None:
                        self.listaPuntosPoliTemp.append(puntoSnapXY)
                    else:
                        self.listaPuntosPoliTemp.append(posTemp)
                    self.rubberPoli.addPoint(self.listaPuntosPoliTemp[0], True)
                    print("PRIMER POINT SHOWING RUBBER ELSE LINEA 825")
                    self.rubberPoli.show()
    
        #Creando una linea
        elif self.creandoLinea and (self.tipoCapa == 2 or self.tipoCapa == 5):
            
            self.rubberLinea.reset(QgsWkbTypes.LineGeometry)
            self.rubberPunto.reset(QgsWkbTypes.PointGeometry)

            if puntoSnap != None:

                puntoSnapXY = QgsPointXY(puntoSnap.x(),puntoSnap.y())
                self.rubberPunto.addPoint(puntoSnapXY, True)
                print("SHOWING SNAP POINT LINEA 832")
                self.rubberPunto.show()
            if self.primerClick:
                if (len(self.listaPuntosLineaTemp) > 1):

                    if puntoSnap != None:
                        self.listaPuntosLineaTemp[-1] = puntoSnapXY
                    else:
                        self.listaPuntosLineaTemp[-1] = posTemp

                    for punto in self.listaPuntosLineaTemp[:-1]:
                        self.rubberLinea.addPoint(punto, False)
                    self.rubberLinea.addPoint(self.listaPuntosLineaTemp[-1], True)
                    print("PRIMER POINT SHOWING RUBBER LINEA 852")
                    self.rubberLinea.show()
                else:
                    if puntoSnap != None:
                        self.listaPuntosLineaTemp.append(puntoSnapXY)
                    else:
                        self.listaPuntosLineaTemp.append(posTemp)
                    self.rubberLinea.addPoint(self.listaPuntosLineaTemp[0], True)
                    print("PRIMER POINT SHOWING RUBBER ELSE LINEA 860")
                    self.rubberLinea.show()

####################################################################################################################

    def snapCompleto(self, startingPoint, toAdvanced):

        #Si obedeceremos la herramienta de digitalizacion avanzada...
        if toAdvanced:
            cadWidget = self.cadDockWidget()
            return cadWidget.currentPoint()[0]
        elif self.esCapaConsulta():
            snap = self.snapVertice(startingPoint, 'manzana')
            if snap != None:
                return snap
            else:
                snap = self.snapVertice(startingPoint, 'predios.geom')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'construcciones')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapVertice(startingPoint, 'horizontales.geom')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapVertice(startingPoint, 'verticales')
                            if snap != None:
                                return snap
                            else:
                                snap = self.snapArista(startingPoint, 'manzana')
                                if snap != None:
                                    return snap
                                else:
                                    snap = self.snapArista(startingPoint, 'predios.geom')
                                    if snap != None:
                                        return snap
                                    else:
                                        snap = self.snapArista(startingPoint, 'construcciones')
                                        if snap != None:
                                            return snap
                                        else:
                                            snap = self.snapArista(startingPoint, 'horizontales.geom')
                                            if snap != None:
                                                return snap
                                            else:
                                                snap = self.snapArista(startingPoint, 'verticales')
                                                if snap != None:
                                                    return snap
                                                else:
                                                    return None
    
        else:
            if self.nombreCapaActiva == 'Estado':
                snap = self.snapVertice(startingPoint, 'Estado')
                if snap != None:
                    return snap
                else:
                    snap = self.snapArista(startingPoint, 'Estado')
                    if snap != None:
                        return snap
                    else:
                        return None

            elif self.nombreCapaActiva == 'Region Catastral':
                snap = self.snapVertice(startingPoint, 'Estado')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'Region Catastral')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapVertice(startingPoint, 'Municipios')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapArista(startingPoint, 'Estado')
                            if snap != None:
                                return snap
                            else:
                                snap = self.snapArista(startingPoint, 'Region Catastral')
                                if snap != None:
                                    return snap
                                else:
                                    snap = self.snapArista(startingPoint, 'Municipios')
                                    if snap != None:
                                        return snap
                                    else:
                                        return None

            elif self.nombreCapaActiva == 'Municipios':
                snap = self.snapVertice(startingPoint, 'Region Catastral')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'Municipios')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapVertice(startingPoint, 'Secciones')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapArista(startingPoint, 'Region Catastral')
                            if snap != None:
                                return snap
                            else:
                                snap = self.snapArista(startingPoint, 'Municipios')
                                if snap != None:
                                    return snap
                                else:
                                    snap = self.snapArista(startingPoint, 'Secciones')
                                    if snap != None:
                                        return snap
                                    else:
                                        return None

            elif self.nombreCapaActiva == 'Secciones':
                snap = self.snapVertice(startingPoint, 'Municipios')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'Secciones')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapVertice(startingPoint, 'Localidades')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapArista(startingPoint, 'Municipios')
                            if snap != None:
                                return snap
                            else:
                                snap = self.snapArista(startingPoint, 'Secciones')
                                if snap != None:
                                    return snap
                                else:
                                    snap = self.snapArista(startingPoint, 'Localidades')
                                    if snap != None:
                                        return snap
                                    else:
                                        return None

            elif self.nombreCapaActiva == 'Localidades':
                snap = self.snapVertice(startingPoint, 'Secciones')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'Localidades')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapVertice(startingPoint, 'Sectores')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapArista(startingPoint, 'Secciones')
                            if snap != None:
                                return snap
                            else:
                                snap = self.snapArista(startingPoint, 'Localidades')
                                if snap != None:
                                    return snap
                                else:
                                    snap = self.snapArista(startingPoint, 'Sectores')
                                    if snap != None:
                                        return snap
                                    else:
                                        return None
            
            elif self.nombreCapaActiva == 'Sectores':
                snap = self.snapVertice(startingPoint, 'Localidades')
                if snap != None:
                    return snap
                else:
                    snap = self.snapVertice(startingPoint, 'Sectores')
                    if snap != None:
                        return snap
                    else:
                        snap = self.snapArista(startingPoint, 'Localidades')
                        if snap != None:
                            return snap
                        else:
                            snap = self.snapArista(startingPoint, 'Sectores')
                            if snap != None:
                                return snap
                            else:
                                return None
        
            elif self.nombreCapaActiva != 'Manzanas' and self.nombreCapaActiva != 'Predios':
                snap = self.snapVertice(startingPoint, self.nombreCapaActiva)
                if snap != None:
                    return snap
                else:
                    snap = self.snapArista(startingPoint, self.nombreCapaActiva)
                    if snap != None:
                        return snap
                    else:
                        return None

##############################################################################################################

    def esCapaConsulta(self):

        try:
            if self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('manzana'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.geom'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('predios.num'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('construcciones'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.geom'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('horizontales.num'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('verticales'):
                return True
            elif self.capaActiva.id() == self.pluginM.ACA.obtenerIdCapa('cves_verticales'):
                return True
            
            else:
                return False
        except:
            pass
            #print(TODO'Excepcion e01 que hay que quitar')

#################################################################################################

    def snapVertice(self, startingPoint, nombreCapa):

        layer = QgsProject.instance().mapLayer(self.pluginM.ACA.obtenerIdCapa(nombreCapa))
        
        self.snapper.setCurrentLayer(layer)
        snapMatch = self.snapper.snapToCurrentLayer(startingPoint, QgsPointLocator.Vertex)

        if snapMatch.hasVertex():
            return snapMatch.point()

################################################################################################################

    def snapArista(self, startingPoint, nombreCapa):

        layer = QgsProject.instance().mapLayer(self.pluginM.ACA.obtenerIdCapa(nombreCapa))
        
        self.snapper.setCurrentLayer(layer)
        snapMatch = self.snapper.snapToCurrentLayer(startingPoint, QgsPointLocator.Edge)

        if snapMatch.hasEdge():
            return snapMatch.point()

###############################################################################################################

class VentanaEmergente(QWidget): 

    def __init__(self, pluginE): 
        QWidget.__init__(self)
 
        self.contenedor = QVBoxLayout()
        self.setLayout(self.contenedor)
        self.tablaAtributos = QTableWidget()
        self.tablaAtributos.setColumnCount(2)
        self.botonAgregar = QPushButton()
        self.botonCancelar = QPushButton()
        self.botonAgregar.setText('Agregar')
        self.botonCancelar.setText('Cancelar')
        self.botonAgregar.clicked.connect(self.confirmarFeature)
        self.botonCancelar.clicked.connect(self.cancelarFeature)
        self.contenedor.addWidget(self.tablaAtributos)
        self.contenedor.addWidget(self.botonAgregar)
        self.contenedor.addWidget(self.botonCancelar)

        self.listaAtributos = []
        self.comboTipoConst = QtWidgets.QComboBox()
        self.comboConstEsp = QtWidgets.QComboBox()
        self.comboTipoAs = QtWidgets.QComboBox()
        self.comboTipoConst = QtWidgets.QComboBox()
        self.comboCveVus = QtWidgets.QComboBox()
        self.pluginE = pluginE        
        self.posibleMostar = True   
        
        self.ultimo = 0
        self.posibleCerrar = False

        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        estilo = """
QWidget{
background : rgb(250,238,224)
}
QPushButton{
background : rgb(174, 116, 0);
color : rgb(255, 255, 255);
border-radius : 4px;
}
QPushButton::hover{
background : rgb(104, 69, 13);
color : rgb(255, 255, 255);
border-radius : 2px;
}
QTableWidget{
background : rgb(255,255,255);
}
"""

        self.setStyleSheet(estilo)

#########################################################################

    def closeEvent(self, evnt):
        if not self.posibleCerrar:
            evnt.ignore()

########################################################################

    def moveEvent(self, evnt):
        evnt.ignore()

###########################################################################

    def resizeEvent(self, evnt):
        evnt.ignore()

##########################################################################

    def focusOutEvent(self, evnt):
        evnt.ignore()

############################################################################

    def llenarTabla(self):

        self.vaciarTabla()
        self.capaActiva = iface.activeLayer()
        nombre = self.pluginE.pluginM.ACA.traducirIdCapa( self.capaActiva.id())
        comboTemp = QtWidgets.QComboBox()
        
        if nombre == 'manzana':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'predios.geom':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'predios.num':
            self.listaAtributos = ['numExt']
            listaEtiquetas = ['Numero Oficial']
        elif nombre == 'construcciones':
            self.listaAtributos = ['nom_volumen', 'id_tipo_construccion', 'num_niveles', 'cve_const_esp']
            listaEtiquetas = ['Nombre de Volumen', 'Tipo de Construccion', 'Numero de Niveles']
        elif nombre == 'horizontales.geom':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'horizontales.num':
            self.listaAtributos = ['num_ofi']
            listaEtiquetas = ['Numero Oficial']
        elif nombre == 'verticales':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'cves_verticales':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'Area de Valor': #Areas de valor
            self.listaAtributos = ['valor', 'descripcion', 'cve_vus']
            listaEtiquetas = ['Valor', 'Descripcion', 'vus']
        elif nombre == 'Zona Uno' or nombre == 'Zona Dos': #Zonas
            self.listaAtributos = ['descripcion']
            listaEtiquetas = ['Descripcion']
        elif nombre == 'Zona Dos': #Zonas
            self.listaAtributos = ['descripcion']
            listaEtiquetas = ['Descripcion']
        elif nombre == 'Predios': #Zonas
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'Colonias': #Codigo Postal
            self.listaAtributos = ['cve_col', 'id_tipo_asentamiento', 'descripcion']
            listaEtiquetas = ['Clave', 'Tipo de Asentamiento', 'Descripcion']
        elif nombre == 'Codigo Postal': #Colonia
            self.listaAtributos = ['cve_cp']
            listaEtiquetas = ['CP']
        elif nombre == 'Calles': #Calles
            self.listaAtributos = ['valor', 'longitud', 'id_cve_vialidad', 'tipo_vector_calle', 'calle']
            listaEtiquetas = ['Valor', 'Longitud', 'Clave vialidad', 'Tipo de Vector', 'Calle']
        elif nombre == 'Sectores': #Sector
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Localidades': #Localidades
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Secciones': #Secciones
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Municipios': #Municipios
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Region Catastral': #Region Catastral
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Estado': #Estado
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']

        for x in range(0, len(listaEtiquetas)):
            self.tablaAtributos.insertRow(x)
            item = QtWidgets.QTableWidgetItem(str(listaEtiquetas[x]))
            self.tablaAtributos.setItem(x, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

        if nombre == 'construcciones': #Obtener tipos de construccion especial

            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}


            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoConst, headers = headers)
            print(respuesta)
            diccionarioConst = {}
            if respuesta.status_code == 200:
                for clave in respuesta.json():
                    comboTemp.addItem(str(clave['tipoConstruccion']), str(clave['id']) )
                    diccionarioConst[clave['id']] = str(clave['tipoConstruccion']) 
            else:
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de construccion\nError de servidor", QMessageBox().Critical, "Cargar tipos de construccion especial")

            self.comboTipoConst = comboTemp
            comboTemp.currentIndexChanged.connect(self.cambiarTipoConstruccion)
            self.tablaAtributos.setCellWidget(1,1,comboTemp)

        elif nombre == 'Calles':
            comboTemp = QtWidgets.QComboBox()

            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}

            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoVialidad, headers = headers)
            comboTemp.addItem('Ninguno','NULL')
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['cTipoVialidad']), str(resp['id']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor", QMessageBox().Critical, "Cargar tipos de vialidad")


            self.comboTipoVia = comboTemp
            self.tablaAtributos.setCellWidget(2,1,comboTemp)

            for x in self.capaActiva.getFeatures():  #Obtener ultimo feateure
                if x.id() > self.ultimo:
                    self.ultimo = x.id()

            nuevaCalle = self.capaActiva.getFeature(self.ultimo)

            longitud = nuevaCalle.geometry().length()
            item = QtWidgets.QTableWidgetItem(str(longitud))
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
            self.tablaAtributos.setItem(1, 1 , item)

        elif nombre == 'Colonias':
            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}
            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoAsentamiento, headers = headers)
            comboTemp.addItem('Ninguno','NULL')
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['descripcion']), str(resp['id']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor", QMessageBox().Critical, "Cargar tipos de asentamiento")


            self.comboTipoAs = comboTemp
            self.tablaAtributos.setCellWidget(1,1,comboTemp)

        elif nombre == 'Area de Valor':
            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}
            respuesta = requests.get(self.pluginE.pluginM.CFG.urlValoresTerrenos, headers = headers)
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['descripcion']), str(resp['cveVus']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de cvevus\nError de servidor", QMessageBox().Critical, "Cargar tipos de asentamiento")


            self.comboCveVus = comboTemp
            self.tablaAtributos.setCellWidget(2,1,comboTemp)


############################################################################################    

    def mostrarTabla(self): #Mostrar tabla
        if self.posibleMostar:
            self.posibleMostar = False
            self.pluginE.alternarModoDibujo()
            self.llenarTabla()
            self.show()        

############################################################################################

    def vaciarTabla(self): #Vaciar tabla

        self.tablaAtributos.clearContents()
        self.tablaAtributos.setRowCount(0)

        for row in range(0, self.tablaAtributos.rowCount()):        
            self.tablaAtributos.removeRow(row) 

##########################################################################################

    def confirmarFeature(self):
        #self.posibleMostar = True
        self.capaActiva = iface.activeLayer()
        self.capaActiva.setReadOnly(False)
        self.capaActiva.startEditing()
        banderaCompleta = True
        nombreCapa = self.pluginE.pluginM.ACA.traducirIdCapa( self.capaActiva.id())
        campos = self.capaActiva.fields()   
        nombres = [campo.name() for campo in campos]

        for x in self.capaActiva.getFeatures():  #Obtener ultimo feateure
            if x.id() > self.ultimo:
                self.ultimo = x.id()

        self.listaIndex = []

        for nombre in nombres:
            
            if nombre in self.listaAtributos:
                self.listaIndex.append(campos.lookupField(nombre))
        
        feat = self.capaActiva.getFeature(self.ultimo)
        
        #.....Manzana....#
        if nombreCapa == 'manzana':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 3 numeros', QMessageBox().Critical, 'Error de entrada')

        #.....predios geom....#
        elif nombreCapa == 'predios.geom':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 5: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 5 numeros', QMessageBox().Critical, 'Error de entrada')

        #.....predios geom....#
        elif nombreCapa == 'predios.num':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False

            lenText = len(texto.strip())

            if lenText < 21 and lenText > 0: #Validacion de longitud
                feat['numExt'] = texto
            else:
                banderaCompleta = False

            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero oficial no debe exceder los 20 caracteres', QMessageBox().Critical, 'Error de entrada')
        
        #.....predios geom....#
        elif nombreCapa == 'horizontales.geom':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 6: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 6 numeros', QMessageBox().Critical, 'Error de entrada')    

        #.....predios geom....#
        elif nombreCapa == 'horizontales.num':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False

            lenText = len(texto.strip())
            if lenText < 21 and lenText > 0: #Validacion de longitud
                feat['num_ofi'] = texto
            else:
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero oficial no debe exceder los 20 caracteres', QMessageBox().Critical, 'Error de entrada')

        #.....verticales geom....#
        elif nombreCapa == 'verticales':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 2 numeros', QMessageBox().Critical, 'Error de entrada') 

        #.....clvaees verticales....#
        elif nombreCapa == 'cves_verticales':
            texto = "Nada"
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 4: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 4 numeros', QMessageBox().Critical, 'Error de entrada')


        elif nombreCapa == 'construcciones': #Con Construcciones

            bandera1 = True
            comboIndex1 = self.comboTipoConst.currentIndex()  #Combo de tipo de construccion
              #Combo de construccion especial
            try:
                texto = self.tablaAtributos.item(0, 1).text()
                if len(texto) > 0 and len(texto) <=3:
                    feat['nom_volumen'] = texto
                else:
                    bandera1 = False
            except:
                bandera1 = False

            if not bandera1:
                self.pluginE.pluginM.UTI.mostrarAlerta('El nombre de volumen no debe exceder los 3 caracteres', QMessageBox().Critical, 'Error de entrada')
            
            bandera2 = True

            if comboIndex1 == 1:
                comboIndex2 = self.comboConstEsp.currentIndex()
                feat['cve_const_esp'] = self.comboConstEsp.itemData(comboIndex2)
                
            else:
                try:
                    texto = self.tablaAtributos.item(2, 1).text()
                    
                    if len(texto) > 0 and int(texto) < 999 and self.pluginE.pluginM.UTI.esEntero(texto):
                        feat['num_niveles'] = texto
                        
                    else:
                        bandera2 = False
                except:
                    bandera2 = False

            if not bandera2:
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero de niveles debe ser numerico y no exceder 999', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = bandera1 and bandera2
                

        elif nombreCapa == 'Area de Valor':

            texto = "Nada"

            banderaValor = True

            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False
            if self.pluginE.pluginM.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    feat['valor'] = float(texto)
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False
            
            banderaDesc = True

            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 256: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False


            if not banderaValor:
                self.pluginE.pluginM.UTI.mostrarAlerta('El valor debe ser un numero decimal cuya longitud de texto no exceda 12 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaDesc

            if banderaCompleta:
                indexCveVus = self.comboCveVus.currentIndex()
                feat['cve_vus'] = self.comboCveVus.itemData(indexCveVus)
        
        #----------------------Area de valor------------------#
        elif nombreCapa == 'Zona Uno':

            texto = "Nada"

            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Area de valor------------------#
        elif nombreCapa == 'Zona Dos':

            texto = "Nada"

            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Codigo Postal':

            texto = "Nada"

            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 5: #Validacion de longitud
                    feat['cve_cp'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('El codigo postal debe estar compuesto por 5 numeros', QMessageBox().Critical, 'Error de entrada')

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Colonias':

            texto = "Nada"

            banderaClave = True
            banderaDesc = True

            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if len(texto) == 4: #Validacion de longitud
                feat['cve_col'] = texto
            else:
                banderaClave = False

            
            try:
                texto = self.tablaAtributos.item(2, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 64: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False

            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la clave debe ser de 4 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la descripcion no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaDesc

            if banderaCompleta:
                indexComboAs = self.comboTipoAs.currentIndex()
                feat['id_tipo_asentamiento'] = self.comboTipoAs.itemData(indexComboAs)

         #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Calles':

            texto = "Nada"

            banderaTipo = True
            banderaCalle = True
            banderaValor = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False

            if self.pluginE.pluginM.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    #print(float(texto))
                    feat['valor'] = float(texto)
                    #print(feat['valor'])
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False


            try:
                texto = self.tablaAtributos.item(4, 1).text()
            except: #Error al obtenre texto
                banderaCalle = False
            if len(texto) <= 256: #Validacion de longitud
                feat['calle'] = texto
            else:
                banderaCalle = False

            
            try:
                texto = self.tablaAtributos.item(3, 1).text()
            except: #Error al obtenre texto
                banderaTipo = False
            if len(texto) <= 64: #Validacion de longitud
                feat['tipo_vector_calle'] = texto
            else:
                banderaTipo = False


            if not banderaValor:
                self.pluginE.pluginM.UTI.mostrarAlerta('El valor debe ser decimal y no exceder los 12 caracteres de longitud', QMessageBox().Critical, 'Error de entrada')

            if not banderaCalle:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la calle no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaTipo:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del tipo de vector no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaTipo and banderaTipo

            if banderaCompleta:
                indexComboVia = self.comboTipoVia.currentIndex()
                feat['id_cve_vialidad'] = self.comboTipoVia.itemData(indexComboVia)
                feat['c_tipo_vialidad'] = self.comboTipoVia.currentText()
                feat['longitud'] = float(self.tablaAtributos.item(1, 1).text())



        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Sectores':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Localidades':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 4: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 4 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Secciones':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 2 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Municipios':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Region Catastral':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Estado':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            
            try:
                texto = self.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
                
            else:
                banderaNom = False


            banderaCompleta = banderaClave and banderaNom

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 2 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')


        self.capaActiva.setReadOnly(True)
        if banderaCompleta:
            
            self.capaActiva.updateFeature(feat)
            self.posibleCerrar = True
            self.posibleMostar = True
            self.close()
            self.posibleCerrar = False
            self.capaActiva.triggerRepaint()
            self.capaActiva.commitChanges()

##################################################################################################

    def cancelarFeature(self):

        self.capaActiva = iface.activeLayer()
        self.capaActiva.startEditing()

        for x in self.capaActiva.getFeatures():
            if x.id() > self.ultimo:
                self.ultimo = x.id()

        self.capaActiva.dataProvider().deleteFeatures([self.ultimo])
            
        self.posibleCerrar = True
        self.posibleMostar = True
        self.close()
        self.posibleCerrar = False
        self.capaActiva.triggerRepaint()
        self.capaActiva.commitChanges()

########################################################################################################################

    def cambiarTipoConstruccion(self):

        index = self.comboTipoConst.currentIndex()
        #self.tablaAtributos.removeRow(2)

        if index == 0:
            #self.tablaAtributos.insertRow(2)
            item = QtWidgets.QTableWidgetItem('Numero de niveles')
            self.tablaAtributos.setItem(2, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
            self.tablaAtributos.removeCellWidget(2,1)
        else:
            #self.tablaAtributos.insertRow(2)
            item = QtWidgets.QTableWidgetItem('Const. Especial')
            self.tablaAtributos.setItem(2, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}

            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoConstEsp, headers = headers)
            
            diccionarioConst = {}
            if respuesta.status_code == 200:
                for clave in respuesta.json():
                    comboTemp.addItem(str(clave['cveConstEsp']) + " - " + clave['descripcion'], str(clave['cveConstEsp']) )
                    diccionarioConst[clave['cveConstEsp']] = str(clave['cveConstEsp']) + " - " + clave['descripcion']
            else:
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de construccion especial\nError de servidor", QMessageBox().Critical, "Cargar tipos de construccion especial")

            self.comboConstEsp = comboTemp

            self.tablaAtributos.setCellWidget(2,1,self.comboConstEsp)

##################################################################################################

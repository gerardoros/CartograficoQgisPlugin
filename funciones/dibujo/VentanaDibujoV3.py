# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VentanaDibujoV3
                                 A QGIS plugin
 VentanaDibujoV3
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by VentanaDibujoV3
        email                : VentanaDibujoV3
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .VentanaDibujoV3_dialog import VentanaDibujoV3Dialog
import os.path


from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSize
from PyQt5.QtGui import QIcon, QColor, QCursor, QPixmap
from PyQt5.QtWidgets import QAction, QWidget,QVBoxLayout, QPushButton, QMessageBox, QTableWidget, QTableWidgetItem
from PyQt5 import QtWidgets

from qgis.core import *
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from qgis.gui import QgsLayerTreeView, QgsMapToolEmitPoint, QgsMapTool, QgsRubberBand, QgsVertexMarker

import os.path
import os, json, requests, sys
from osgeo import ogr, osr

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSize
from PyQt5.QtGui import QIcon, QColor, QCursor, QPixmap
from PyQt5.QtWidgets import QAction, QWidget,QVBoxLayout, QPushButton, QMessageBox, QTableWidget, QTableWidgetItem
from PyQt5 import QtWidgets

from qgis.core import *
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from qgis.gui import QgsLayerTreeView, QgsMapToolEmitPoint, QgsMapTool, QgsRubberBand, QgsVertexMarker

import os.path
import os, json, requests, sys
from osgeo import ogr, osr

class VentanaDibujoV3:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, pluginE):
       
        self.pluginE = pluginE  
        self.dlg = VentanaDibujoV3Dialog(pluginV=self, parent = iface.mainWindow())
        self.dlg.botonAgregar.clicked.connect(self.confirmarFeature)
        self.dlg.botonCancelar.clicked.connect(self.cancelarFeature)
        #self.dlg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        self.listaAtributos = []
        self.comboTipoConst = QtWidgets.QComboBox()
        self.comboConstEsp = QtWidgets.QComboBox()
        self.comboTipoAs = QtWidgets.QComboBox()
        self.comboTipoConst = QtWidgets.QComboBox()
        self.comboCveVus = QtWidgets.QComboBox()
              
        self.posibleMostar = True   
        
        self.ultimo = 0
        self.posibleCerrar = False

        #self.dlg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

    def llenarTabla(self):

        self.vaciarTabla()
        self.capaActiva = iface.activeLayer()
        nombre = self.pluginE.pluginM.ACA.traducirIdCapa( self.capaActiva.id())
        comboTemp = QtWidgets.QComboBox()
        
        if nombre == 'manzana':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'predios.geom':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'predios.num':
            self.listaAtributos = ['numExt']
            listaEtiquetas = ['Numero Oficial']
        elif nombre == 'construcciones':
            self.listaAtributos = ['nom_volumen', 'id_tipo_construccion', 'num_niveles', 'cve_const_esp']
            listaEtiquetas = ['Nombre de Volumen', 'Tipo de Construccion', 'Numero de Niveles']
        elif nombre == 'horizontales.geom':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'horizontales.num':
            self.listaAtributos = ['num_ofi']
            listaEtiquetas = ['Numero Oficial']
        elif nombre == 'verticales':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'cves_verticales':
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'Area de Valor': #Areas de valor
            self.listaAtributos = ['valor', 'descripcion', 'cve_vus']
            listaEtiquetas = ['Valor', 'Descripcion', 'vus']
        elif nombre == 'Zona Uno' or nombre == 'Zona Dos': #Zonas
            self.listaAtributos = ['descripcion']
            listaEtiquetas = ['Descripcion']
        elif nombre == 'Zona Dos': #Zonas
            self.listaAtributos = ['descripcion']
            listaEtiquetas = ['Descripcion']
        elif nombre == 'Predios': #Zonas
            self.listaAtributos = ['clave']
            listaEtiquetas = ['Clave']
        elif nombre == 'Colonias': #Codigo Postal
            self.listaAtributos = ['cve_col', 'id_tipo_asentamiento', 'descripcion']
            listaEtiquetas = ['Clave', 'Tipo de Asentamiento', 'Descripcion']
        elif nombre == 'Codigo Postal': #Colonia
            self.listaAtributos = ['cve_cp']
            listaEtiquetas = ['CP']
        elif nombre == 'Calles': #Calles
            self.listaAtributos = ['valor', 'longitud', 'id_cve_vialidad', 'tipo_vector_calle', 'calle']
            listaEtiquetas = ['Valor', 'Longitud', 'Clave vialidad', 'Tipo de Vector', 'Calle']
        elif nombre == 'Sectores': #Sector
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Localidades': #Localidades
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Secciones': #Secciones
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Municipios': #Municipios
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Region Catastral': #Region Catastral
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']
        elif nombre == 'Estado': #Estado
            self.listaAtributos = ['clave', 'nombre']
            listaEtiquetas = ['Clave', 'Nombre']

        for x in range(0, len(listaEtiquetas)):
            self.dlg.tablaAtributos.insertRow(x)
            item = QtWidgets.QTableWidgetItem(str(listaEtiquetas[x]))
            self.dlg.tablaAtributos.setItem(x, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

        if nombre == 'construcciones': #Obtener tipos de construccion especial

            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}


            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoConst, headers = headers)
            print(respuesta)
            diccionarioConst = {}
            if respuesta.status_code == 200:
                for clave in respuesta.json():
                    comboTemp.addItem(str(clave['tipoConstruccion']), str(clave['id']) )
                    diccionarioConst[clave['id']] = str(clave['tipoConstruccion']) 
            else:
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de construccion\nError de servidor", QMessageBox().Critical, "Cargar tipos de construccion especial")

            self.comboTipoConst = comboTemp
            comboTemp.currentIndexChanged.connect(self.cambiarTipoConstruccion)
            self.dlg.tablaAtributos.setCellWidget(1,1,comboTemp)

        elif nombre == 'Calles':
            comboTemp = QtWidgets.QComboBox()

            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}

            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoVialidad, headers = headers)
            comboTemp.addItem('Ninguno','NULL')
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['cTipoVialidad']), str(resp['id']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor", QMessageBox().Critical, "Cargar tipos de vialidad")


            self.comboTipoVia = comboTemp
            self.dlg.tablaAtributos.setCellWidget(2,1,comboTemp)

            for x in self.capaActiva.getFeatures():  #Obtener ultimo feateure
                if x.id() > self.ultimo:
                    self.ultimo = x.id()

            nuevaCalle = self.capaActiva.getFeature(self.ultimo)

            longitud = nuevaCalle.geometry().length()
            item = QtWidgets.QTableWidgetItem(str(longitud))
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
            self.dlg.tablaAtributos.setItem(1, 1 , item)

        elif nombre == 'Colonias':
            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}
            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoAsentamiento, headers = headers)
            comboTemp.addItem('Ninguno','NULL')
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['descripcion']), str(resp['id']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor", QMessageBox().Critical, "Cargar tipos de asentamiento")


            self.comboTipoAs = comboTemp
            self.dlg.tablaAtributos.setCellWidget(1,1,comboTemp)

        elif nombre == 'Area de Valor':
            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}
            respuesta = requests.get(self.pluginE.pluginM.CFG.urlValoresTerrenos, headers = headers)
            if respuesta.status_code == 200:
                for resp in respuesta.json():
                    comboTemp.addItem(str(resp['descripcion']), str(resp['cveVus']))

            else:
                print(respuesta.status_code)
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de cvevus\nError de servidor", QMessageBox().Critical, "Cargar tipos de asentamiento")


            self.comboCveVus = comboTemp
            self.dlg.tablaAtributos.setCellWidget(2,1,comboTemp)


############################################################################################    

    def mostrarTabla(self): #Mostrar tabla
        if self.posibleMostar and not self.dlg.isVisible():
            self.posibleMostar = False
            self.pluginE.pluginM.alternarModoDibujo()
            self.llenarTabla()
            self.dlg.show()        

############################################################################################

    def vaciarTabla(self): #Vaciar tabla

        self.dlg.tablaAtributos.clearContents()
        self.dlg.tablaAtributos.setRowCount(0)

        for row in range(0, self.dlg.tablaAtributos.rowCount()):        
            self.dlg.tablaAtributos.removeRow(row) 

##########################################################################################

    def confirmarFeature(self):
        #self.posibleMostar = True
        self.capaActiva = iface.activeLayer()
        self.capaActiva.setReadOnly(False)
        self.capaActiva.startEditing()
        banderaCompleta = True
        nombreCapa = self.pluginE.pluginM.ACA.traducirIdCapa( self.capaActiva.id())
        campos = self.capaActiva.fields()   
        nombres = [campo.name() for campo in campos]

        for x in self.capaActiva.getFeatures():  #Obtener ultimo feateure
            if x.id() > self.ultimo:
                self.ultimo = x.id()

        self.listaIndex = []

        for nombre in nombres:
            
            if nombre in self.listaAtributos:
                self.listaIndex.append(campos.lookupField(nombre))
        
        feat = self.capaActiva.getFeature(self.ultimo)
        
        #.....Manzana....#
        if nombreCapa == 'manzana':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 3 numeros', QMessageBox().Critical, 'Error de entrada')

        #.....predios geom....#
        elif nombreCapa == 'predios.geom':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 5: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 5 numeros', QMessageBox().Critical, 'Error de entrada')

        #.....predios geom....#
        elif nombreCapa == 'predios.num':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False

            lenText = len(texto.strip())

            if lenText < 21 and lenText > 0: #Validacion de longitud
                feat['numExt'] = texto
            else:
                banderaCompleta = False

            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero oficial no debe exceder los 20 caracteres', QMessageBox().Critical, 'Error de entrada')
        
        #.....predios geom....#
        elif nombreCapa == 'horizontales.geom':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 6: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 6 numeros', QMessageBox().Critical, 'Error de entrada')    

        #.....predios geom....#
        elif nombreCapa == 'horizontales.num':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False

            lenText = len(texto.strip())
            if lenText < 21 and lenText > 0: #Validacion de longitud
                feat['num_ofi'] = texto
            else:
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero oficial no debe exceder los 20 caracteres', QMessageBox().Critical, 'Error de entrada')

        #.....verticales geom....#
        elif nombreCapa == 'verticales':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 2 numeros', QMessageBox().Critical, 'Error de entrada') 

        #.....clvaees verticales....#
        elif nombreCapa == 'cves_verticales':
            texto = "Nada"
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 4: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta: #Mensaje de error
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por exactamente 4 numeros', QMessageBox().Critical, 'Error de entrada')


        elif nombreCapa == 'construcciones': #Con Construcciones

            bandera1 = True
            comboIndex1 = self.comboTipoConst.currentIndex()  #Combo de tipo de construccion
              #Combo de construccion especial
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
                if len(texto) > 0 and len(texto) <=3:
                    feat['nom_volumen'] = texto
                else:
                    bandera1 = False
            except:
                bandera1 = False

            if not bandera1:
                self.pluginE.pluginM.UTI.mostrarAlerta('El nombre de volumen no debe exceder los 3 caracteres', QMessageBox().Critical, 'Error de entrada')
            
            bandera2 = True

            if comboIndex1 == 1:
                comboIndex2 = self.comboConstEsp.currentIndex()
                feat['cve_const_esp'] = self.comboConstEsp.itemData(comboIndex2)
                
            else:
                try:
                    texto = self.dlg.tablaAtributos.item(2, 1).text()
                    
                    if len(texto) > 0 and int(texto) < 999 and self.pluginE.pluginM.UTI.esEntero(texto):
                        feat['num_niveles'] = texto
                        
                    else:
                        bandera2 = False
                except:
                    bandera2 = False

            if not bandera2:
                self.pluginE.pluginM.UTI.mostrarAlerta('El numero de niveles debe ser numerico y no exceder 999', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = bandera1 and bandera2
                

        elif nombreCapa == 'Area de Valor':

            texto = "Nada"

            banderaValor = True

            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False
            if self.pluginE.pluginM.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    feat['valor'] = float(texto)
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False
            
            banderaDesc = True

            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 256: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False


            if not banderaValor:
                self.pluginE.pluginM.UTI.mostrarAlerta('El valor debe ser un numero decimal cuya longitud de texto no exceda 12 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaDesc

            if banderaCompleta:
                indexCveVus = self.comboCveVus.currentIndex()
                feat['cve_vus'] = self.comboCveVus.itemData(indexCveVus)
        
        #----------------------Area de valor------------------#
        elif nombreCapa == 'Zona Uno':

            texto = "Nada"

            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Area de valor------------------#
        elif nombreCapa == 'Zona Dos':

            texto = "Nada"

            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Codigo Postal':

            texto = "Nada"

            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 5: #Validacion de longitud
                    feat['cve_cp'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta:
                self.pluginE.pluginM.UTI.mostrarAlerta('El codigo postal debe estar compuesto por 5 numeros', QMessageBox().Critical, 'Error de entrada')

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Colonias':

            texto = "Nada"

            banderaClave = True
            banderaDesc = True

            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if len(texto) == 4: #Validacion de longitud
                feat['cve_col'] = texto
            else:
                banderaClave = False

            
            try:
                texto = self.dlg.tablaAtributos.item(2, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 64: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False

            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la clave debe ser de 4 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la descripcion no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaDesc

            if banderaCompleta:
                indexComboAs = self.comboTipoAs.currentIndex()
                feat['id_tipo_asentamiento'] = self.comboTipoAs.itemData(indexComboAs)

         #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Calles':

            texto = "Nada"

            banderaTipo = True
            banderaCalle = True
            banderaValor = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False

            if self.pluginE.pluginM.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    #print(float(texto))
                    feat['valor'] = float(texto)
                    #print(feat['valor'])
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False


            try:
                texto = self.dlg.tablaAtributos.item(4, 1).text()
            except: #Error al obtenre texto
                banderaCalle = False
            if len(texto) <= 256: #Validacion de longitud
                feat['calle'] = texto
            else:
                banderaCalle = False

            
            try:
                texto = self.dlg.tablaAtributos.item(3, 1).text()
            except: #Error al obtenre texto
                banderaTipo = False
            if len(texto) <= 64: #Validacion de longitud
                feat['tipo_vector_calle'] = texto
            else:
                banderaTipo = False


            if not banderaValor:
                self.pluginE.pluginM.UTI.mostrarAlerta('El valor debe ser decimal y no exceder los 12 caracteres de longitud', QMessageBox().Critical, 'Error de entrada')

            if not banderaCalle:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud de la calle no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaTipo:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del tipo de vector no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaTipo and banderaTipo

            if banderaCompleta:
                indexComboVia = self.comboTipoVia.currentIndex()
                feat['id_cve_vialidad'] = self.comboTipoVia.itemData(indexComboVia)
                feat['c_tipo_vialidad'] = self.comboTipoVia.currentText()
                feat['longitud'] = float(self.dlg.tablaAtributos.item(1, 1).text())



        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Sectores':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Localidades':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 4: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 4 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Secciones':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 2 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Municipios':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Region Catastral':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 3 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Estado':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            
            try:
                texto = self.dlg.tablaAtributos.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.pluginE.pluginM.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaAtributos.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
                
            else:
                banderaNom = False


            banderaCompleta = banderaClave and banderaNom

            #Banderas
            if not banderaClave:
                self.pluginE.pluginM.UTI.mostrarAlerta('La clave debe estar compuesta por 2 numeros', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.pluginE.pluginM.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')


        self.capaActiva.setReadOnly(True)
        if banderaCompleta:
            
            self.capaActiva.updateFeature(feat)
            self.posibleCerrar = True
            self.posibleMostar = True
            self.dlg.close()
            self.posibleCerrar = False
            self.capaActiva.triggerRepaint()
            self.capaActiva.commitChanges()

##################################################################################################

    def cancelarFeature(self):

        self.capaActiva = iface.activeLayer()
        self.capaActiva.startEditing()

        for x in self.capaActiva.getFeatures():
            if x.id() > self.ultimo:
                self.ultimo = x.id()

        self.capaActiva.dataProvider().deleteFeatures([self.ultimo])
            
        self.posibleCerrar = True
        self.posibleMostar = True
        self.dlg.close()
        self.posibleCerrar = False
        self.capaActiva.triggerRepaint()
        self.capaActiva.commitChanges()

########################################################################################################################

    def cambiarTipoConstruccion(self):

        index = self.comboTipoConst.currentIndex()
        #self.dlg.tablaAtributos.removeRow(2)

        if index == 0:
            #self.dlg.tablaAtributos.insertRow(2)
            item = QtWidgets.QTableWidgetItem('Numero de niveles')
            self.dlg.tablaAtributos.setItem(2, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
            self.dlg.tablaAtributos.removeCellWidget(2,1)
        else:
            #self.dlg.tablaAtributos.insertRow(2)
            item = QtWidgets.QTableWidgetItem('Const. Especial')
            self.dlg.tablaAtributos.setItem(2, 0 , item)#self.capaActual.getFeatures().attributes()[x])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

            comboTemp = QtWidgets.QComboBox()
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginE.pluginM.UTI.obtenerToken()}

            respuesta = requests.get(self.pluginE.pluginM.CFG.urlTipoConstEsp, headers = headers)
            
            diccionarioConst = {}
            if respuesta.status_code == 200:
                for clave in respuesta.json():
                    comboTemp.addItem(str(clave['cveConstEsp']) + " - " + clave['descripcion'], str(clave['cveConstEsp']) )
                    diccionarioConst[clave['cveConstEsp']] = str(clave['cveConstEsp']) + " - " + clave['descripcion']
            else:
                self.pluginE.pluginM.UTI.mostrarAlerta("No se han podido cargar los tipos de construccion especial\nError de servidor", QMessageBox().Critical, "Cargar tipos de construccion especial")

            self.comboConstEsp = comboTemp

            self.dlg.tablaAtributos.setCellWidget(2,1,self.comboConstEsp)

##################################################################################################

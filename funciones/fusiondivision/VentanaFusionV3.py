# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VentanaFusionV3
                                 A QGIS plugin
 VentanaFusionV3
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by VentanaFusionV3
        email                : VentanaFusionV3
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .VentanaFusionV3_dialog import VentanaFusionV3Dialog
import os.path

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSize
from PyQt5.QtGui import QIcon, QColor, QCursor, QPixmap, QStandardItemModel
from PyQt5.QtWidgets import QAction, QWidget,QVBoxLayout, QPushButton, QMessageBox, QTableWidget, QTableWidgetItem
from PyQt5 import QtWidgets
from PyQt5 import QtCore

# Initialize Qt resources from file resources.py
from qgis.core import *
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from qgis.gui import QgsLayerTreeView, QgsMapToolEmitPoint, QgsMapTool, QgsRubberBand, QgsVertexMarker

# Import the code for the DockWidget
import os.path
import os, json, requests, sys
from osgeo import ogr, osr


class VentanaFusionV3:

    def __init__(self, iface, pluginFD):
        
        self.pluginFD = pluginFD
        self.dlg = VentanaFusionV3Dialog(parent = iface.mainWindow())
        #self.dlg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        # Create the dialog (after translation) and keep reference
        
        self.predios = [None, None]

        self.listaCampos = ['cve_cat', 'clave', 'cve_cat_ant', 'cve_tipo_pred', 'num_ext', 'fondo', 'frente', 'sup_terr', 'uso_predio']
        self.listaEtiquetas = ['Clave Catastral', 'Clave', 'Cve. Cat. Anterior', 'Clave Tipo Predio', 'Numero Exterior', 'Fondo', 'Frente', 'Superficie de terreno', 'Uso de predio']

        self.dlg.btnConfirmar.clicked.connect(self.confirmarFusion)
        self.dlg.btnCancelar.clicked.connect(self.cancelarFusion)
        #self.dlg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        header = self.dlg.tabComp.horizontalHeader()
        for x in range(0, len(self.listaEtiquetas)):
            header.setSectionResizeMode(x, QtWidgets.QHeaderView.ResizeToContents)
            self.dlg.tabComp.setHorizontalHeaderItem(x, QTableWidgetItem(self.listaEtiquetas[x]))

#---------------------------------------------------------------------------

    def cancelarFusion(self):
        self.dlg.close()
        self.pluginFD.dlg.btnCargarPredio.setEnabled(True)

#------------------------------------------------------

    def closeEvent(self, evnt):
        self.pluginFD.dlg.btnCargarPredio.setEnabled(True)

#----------------------------------------------------------------------

    def confirmarFusion(self):
        numQueda = sorted(set(index.row() for index in self.dlg.tabComp.selectedIndexes()))

        if numQueda == None:
            self.pluginFD.UTI.mostrarAlerta('Debes seleccionar un reglon de la tabla', QMessageBox().Critical, 'Error de seleccion')
            return

        if len(numQueda) != 1:
            self.pluginFD.UTI.mostrarAlerta('Debes seleccionar solo un reglon de la tabla', QMessageBox().Critical, 'Error de seleccion')
            return

        numQueda = numQueda[0]
        self.pluginFD.fusionarPredios(numQueda)
        self.dlg.close()
#--------------------------------------------------------------------------

    def llenarTablaComp(self, predio1, predio2):
        self.vaciarTabla()
        self.dlg.tabComp.insertRow(0)
        self.dlg.tabComp.insertRow(1)
        self.predios[0] = predio1
        self.predios[1] = predio2

        for x in range(0, len(self.listaCampos)):

            item1 = QtWidgets.QTableWidgetItem(str(predio1[self.listaCampos[x]]))
            item2 = QtWidgets.QTableWidgetItem(str(predio2[self.listaCampos[x]]))

            self.dlg.tabComp.setItem(0, x , item1)
            self.dlg.tabComp.setItem(1, x , item2)

            item1.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
            item2.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )


#------------------------------------------------------
    def vaciarTabla(self): #Vaciar tabla

        self.dlg.tabComp.clearContents()
        self.dlg.tabComp.setRowCount(0)

        for row in range(0, self.dlg.tabComp.rowCount()):        
            self.dlg.tabComp.removeRow(row) 
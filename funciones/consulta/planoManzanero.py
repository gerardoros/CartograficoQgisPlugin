# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlanoManzanero
                                 A QGIS plugin
 Imprimir plano manzanero
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-02
        git sha              : $Format:%H$
        copyright            : (C) 2020 by foo
        email                : bar
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, QRectF, Qt, QRegExp, QDate
from qgis.PyQt.QtGui import QIcon, QColor, QFont, QRegExpValidator
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .planoManzanero_dialog import PlanoManzaneroDialog
import os.path
import processing
from qgis.core import *
from datetime import date
from osgeo import ogr, osr


class PlanoManzanero:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, plano):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        self.dlg = PlanoManzaneroDialog(parent=iface.mainWindow())

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PlanoManzanero_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes

        self.tipo_plano = plano
        self.canvas = iface.mapCanvas()
        self.actions = []
        self.menu = self.tr(u'&Plano Manzanero')
        self.dlg.fldNomCol.setEnabled(False)
        self.dlg.btnAceptarNombre.setEnabled(False)
        self.dlg.btnSelEdgeFinalizar.setEnabled(False)
        self.dlg.btnSelEdgeCancl.setEnabled(False)
        self.selecArista = False
        self.fIdImpresion = None

        #eventos
        self.dlg.btnSelEdge.clicked.connect(self.selEdges)
        self.dlg.btnAceptarNombre.clicked.connect(self.setNombre)
        self.dlg.btnSelEdgeFinalizar.clicked.connect(self.finalizaNombrar)
        self.dlg.btnSelEdgeCancl.clicked.connect(self.cancelaSeleccion)
        self.dlg.btnGeneraPDF.clicked.connect(self.generarPDF)
        self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldRecibo.textEdited.connect(lambda txt: self.lineEditToUpper(txt, self.dlg.fldRecibo))
        self.dlg.fldUbicacion.textEdited.connect(lambda txt: self.lineEditToUpper(txt, self.dlg.fldUbicacion))
        self.dlg.fldLevanto.textEdited.connect(lambda txt: self.lineEditToUpper(txt, self.dlg.fldLevanto))
        self.dlg.fldDibujo.textEdited.connect(lambda txt: self.lineEditToUpper(txt, self.dlg.fldDibujo))

        #validaciones
        rx = QRegExp("[a-zA-ZÀ-ÿ. ]{255}")
        val = QRegExpValidator(rx)
        #self.dlg.fldUbicacion.setValidator(val)
        self.dlg.fldLevanto.setValidator(val)
        self.dlg.fldDibujo.setValidator(val)

        rx = QRegExp("[a-zA-Z0-9]{15}")
        val = QRegExpValidator(rx)
        self.dlg.fldRecibo.setValidator(val)

        self.dlg.dateEdit.setDate(QDate.currentDate())


        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PlanoManzanero', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/planoManzanero/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Plano Manzanero'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        self.obtenerXCapas()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def selEdges(self):

        #checamos si la capa de aristas ya existe
        layers = QgsProject.instance().mapLayersByName('colindantesAristas')
        if layers:
            self.xAristas = layers[0]
            render = self.xAristas.renderer()
            symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,255,0,255', 'width_border': '0.5'})
            render.setSymbol(symbol)
            self.xAristas.triggerRepaint()
        else:

            if self.tipo_plano == 'manzanero':
                featCargada = [f for f in self.xManzana.getFeatures()][0]
            else:
                self.seleccion = self.xPredGeom.selectedFeatures()
                if not self.seleccion:
                    self.UTI.mostrarAlerta('Selecciona un predio', QMessageBox.Critical, 'Capas de consulta')
                    return
                featCargada = self.seleccion[0]

            # haremos un buffer a la geometria original de la manzana
            geom = featCargada.geometry().simplify(5)
            buffer = geom.buffer(7, 0, QgsGeometry.CapRound, QgsGeometry.JoinStyleMiter, 2)
            featCargada.setGeometry(buffer)

            temp = QgsVectorLayer(f"Polygon?crs=epsg:{QSettings().value('srid')}", "manzana_cargada", "memory")
            temp.startEditing()
            temp.dataProvider().addFeatures([featCargada])
            temp.commitChanges()

            temp_lines = processing.run("qgis:polygonstolines", {'INPUT': temp, 'OUTPUT': 'memory:'})["OUTPUT"]
            result = processing.run("qgis:explodelines", {'INPUT': temp_lines, 'OUTPUT': 'memory:'})["OUTPUT"]

            temp2 = QgsVectorLayer(f"LineString?crs=epsg:{QSettings().value('srid')}&field=colindante:string(255)", "colindantesAristas", "memory")
            temp2.startEditing()
            temp2.dataProvider().addFeatures(result.getFeatures())
            temp2.commitChanges()
            aristas = QgsProject.instance().addMapLayer(temp2)
            self.xAristas = aristas

            self.xAristas.selectionChanged.connect(self.nombrarArista)

            # ------------------------------- labeling -------------------------------------------

            layer_settings = QgsPalLayerSettings()
            text_format = QgsTextFormat()

            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)

            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))

            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = "colindante"
            layer_settings.placement = QgsPalLayerSettings.Line
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)

            render = self.xAristas.renderer()
            symbol = QgsLineSymbol.createSimple(
                {'line_style': 'SimpleLine', 'color': '0,255,0,255', 'width_border': '0.5'})
            render.setSymbol(symbol)

            self.xAristas.setLabeling(layer_settings)
            self.xAristas.setLabelsEnabled(True)
            self.xAristas.triggerRepaint()

        self.dlg.lbEstatus.setText("Elija una arista de la capa 'colindantesAristas'")
        #self.estatusCapas(False)
        self.activarSeleccion()
        self.iface.mapCanvas().refresh()

    def estatusCapas(self, flag):
        root = QgsProject.instance().layerTreeRoot()

        # Apagamos el grupo consulta y sus capas
        group = root.findGroup('consulta')
        group.setItemVisibilityChecked(flag)

        # Apagamos el grupo referencia y sus capas
        group = root.findGroup('referencia')
        group.setItemVisibilityChecked(flag)


    def activarSeleccion(self):
        if not self.selecArista:
            self.iface.actionSelect().trigger()
            self.canvas.setCursor(self.UTI.cursorCruz)
            self.dlg.btnSelEdge.setEnabled(False)
            self.dlg.btnSelEdgeFinalizar.setEnabled(True)
            self.dlg.btnSelEdgeCancl.setEnabled(True)
            self.dlg.btnGeneraPDF.setEnabled(False)
            self.selecArista = True


    def cancelaSeleccion(self):
        if self.selecArista:
            #borramos la capa de aristas
            QgsProject.instance().removeMapLayer(self.xAristas.id())
            self.dlg.btnSelEdge.setEnabled(True)
            self.dlg.btnGeneraPDF.setEnabled(True)
            self.dlg.btnSelEdgeFinalizar.setEnabled(False)
            self.dlg.btnSelEdgeCancl.setEnabled(False)
            self.dlg.fldNomCol.setEnabled(False)
            self.dlg.btnAceptarNombre.setEnabled(False)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.dlg.lbEstatus.setText("Listo...")
            #self.estatusCapas(True)
            self.selecArista = False
            self.iface.actionPan().trigger()

    def nombrarArista(self):

        self.dlg.lbEstatus.setText("Nombra al colindante correspondiente")
        self.dlg.fldNomCol.setEnabled(True)
        self.dlg.btnAceptarNombre.setEnabled(True)


    def setNombre(self):

        self.xAristas.startEditing()
        for feature in self.xAristas.getSelectedFeatures():
            self.xAristas.changeAttributeValue(feature.id(), 0, self.dlg.fldNomCol.text())

        self.xAristas.commitChanges()
        self.xAristas.triggerRepaint()
        self.iface.mapCanvas().refresh()
        self.dlg.lbEstatus.setText("Nombre asignado exitosamente")

    def finalizaNombrar(self):

        render = self.xAristas.renderer()
        symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,0,0,0', 'width_border': '0.5'})
        render.setSymbol(symbol)
        self.dlg.btnGeneraPDF.setEnabled(True)
        self.dlg.btnSelEdge.setEnabled(True)
        self.xAristas.removeSelection()
        self.iface.actionPan().trigger()
        self.dlg.lbEstatus.setText("Listo...")
        self.dlg.btnSelEdgeFinalizar.setEnabled(False)
        self.dlg.btnSelEdgeCancl.setEnabled(False)
        self.dlg.fldNomCol.setEnabled(False)
        self.dlg.btnAceptarNombre.setEnabled(False)
        self.selecArista = False
        self.xAristas.triggerRepaint()


    def generarPDF(self):

        if self.tipo_plano == 'manzanero':
            self.event_planoMza()
        else:
            self.event_planoPred()


    def event_planoMza(self):

        # if not self.validarCombox():
        #     self.UTI.mostrarAlerta('No se han seleccionado manzanas para cargar', QMessageBox.Critical,
        #                            'Capas de consulta')
        #     return

        # pintar la capas de calles y de manzanas
        try:
            bound = self.obtenerBoundingBox().asWkt()
        except:
            self.UTI.mostrarAlerta('No se ha cargado ninguna Manzana', QMessageBox().Critical, 'Cargar referencia')
            return

        self.ACA.pintarCapasReferencia('Calles', bound, False)
        self.ACA.pintarCapasReferencia('Manzanas', bound, False)

        # obtiene la informacion de las capas complementarias
        xCalle = QgsProject.instance().mapLayer(QSettings().value('xCalle'))
        xManza = QgsProject.instance().mapLayer(QSettings().value('xManzanasRef'))

        layer = QgsProject.instance().mapLayer(QSettings().value('xManzana'))

        # obtiene los parametrospara el reporte
        cveCata = list(layer.getFeatures())[0]['cve_cat']
        cveCata = cveCata[0:3] + '-' + cveCata[3:5] + '-' + cveCata[5:] if cveCata else 'NOO ES CADENA'

        propietario = ''  # propietarios (no se sabe de donde salen por ahorita 2020-11-09)
        mpio = QSettings().value('mpio') + ', ESTADO DE MÉXICO'
        levanto = self.dlg.fldLevanto.text()
        dibujo = self.dlg.fldDibujo.text()
        ubicacion = self.dlg.fldUbicacion.text()
        recibo = self.dlg.fldRecibo.text()
        fecha = self.fechaTextual(self.dlg.dateEdit.date().toString("dd/MM/yyyy"))
        certifica = ''  # la persona que certifica no se sabe quien es...
        scale = 0  # escala del mapa

        # INICIA PROCESO DE IMPRESION DE PLANO MANZANERO
        project = QgsProject.instance()
        manager = project.layoutManager()
        layoutName = 'Manzana'
        layouts_list = manager.printLayouts()

        # remove any duplicate layouts
        for layout in layouts_list:
            if layout.name() == layoutName:
                manager.removeLayout(layout)

        layout = QgsPrintLayout(project)
        layout.initializeDefaults()
        layout.setName(layoutName)

        # define el estilo de la pagina ('Carta' en este caso)
        pc = layout.pageCollection()
        pc.pages()[0].setPageSize('letter', QgsLayoutItemPage.Landscape)
        manager.addLayout(layout)

        # ** DISEÑO **
        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 8, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 25.009, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 84.870, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 91.500, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 98.147, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.958, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 105.118, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 111.760, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 117.683, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 123.600, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.500, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(236.127, 123.600, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(19.094, 5.500, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214.000, 129.110, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214.000, 135.024, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 72.976, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # PINTA LA MANZANA (MAPA GRANDE)
        # obtiene solo el poligono que se mostrara en el mapa grande
        stringCapa = 'Polygon?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerPoly = QgsVectorLayer(stringCapa, 'polygon', 'memory')
        prov = layerPoly.dataProvider()
        geom = list(layer.getFeatures())[0].geometry()
        feat = QgsFeature()
        feat.setGeometry(geom)
        feat.setAttributes([str(1)])
        prov.addFeatures([feat])

        # QgsProject.instance().addMapLayers([layerPoly])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.OverPoint
        s.fieldName = "'Superficie: ' || round($area, 2) || 'm2'"
        s.enabled = True
        s.isExpression = True
        s.centroidWhole = True
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerPoly.setLabeling(labeling)
        layerPoly.setLabelsEnabled(True)
        layerPoly.triggerRepaint()
        # estilo de la geometria
        render = layerPoly.renderer()
        symbol = QgsFillSymbol.createSimple({'color': '255,0,0,0', 'color_border': '#000000', 'width_border': '0.3'})
        render.setSymbol(symbol)

        # QgsProject.instance().addMapLayers([layerPoly])

        # PINTAR LOS PUNTOS QUE INDICAN SU NUMERACION
        # obtener la geometria del poligono
        geom = list(layerPoly.getFeatures())[0].geometry()
        polygon = geom.asPolygon()
        vertices = []
        # obtiene los vertices del poligono
        n = len(polygon[0])
        for i in range(n):
            vertices.append(polygon[0][i])

        # creacion de la capa de puntos
        stringCapa = 'Point?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerPoint = QgsVectorLayer(stringCapa, 'point', 'memory')
        prov = layerPoint.dataProvider()

        for i, v in enumerate(vertices):
            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPointXY(v))
            if (i + 1) != len(vertices):
                feat.setAttributes([i + 1])
            prov.addFeatures([feat])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.fieldName = "num"
        s.enabled = True
        s.isExpression = True
        s.centroidWhole = True
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerPoint.setLabeling(labeling)
        layerPoint.setLabelsEnabled(True)
        layerPoint.triggerRepaint()

        # estilo de la geometria
        props = layerPoint.renderer().symbol().symbolLayer(0).properties()
        props['color'] = '#ffffff'
        symbol = QgsMarkerSymbol.createSimple({'name': 'square', 'color': '255,255,255,0', 'outline_color': '0,0,0,0'})
        layerPoint.renderer().setSymbol(symbol)

        # PINTAR LAS LINEAS QUE CONFORMAN EL POLIGONO PARA MARCAR LAS DISTANCIAS QUE HAY ENTRE SUS PUNTOS
        # creacion de la capa de lineas
        stringCapa = 'LineString?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerLine = QgsVectorLayer(stringCapa, 'line', 'memory')
        prov = layerLine.dataProvider()
        # se toma un punto y su siguiente para la creacion de la linea, asi para todo el poligono
        for i in range(len(vertices)):
            listTemp = []
            listTemp.append(vertices[i])
            # cuando no hay punto siguiente se toma en cuenta el primero para cerrar el poligono
            if (i + 1) == len(vertices):
                listTemp.append(vertices[0])
            else:
                listTemp.append(vertices[i + 1])

            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPolylineXY(listTemp))
            feat.setAttributes([str(round(feat.geometry().length(), 2))])
            prov.addFeatures([feat])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.Line
        s.fieldName = 'num'
        s.enabled = True
        s.isExpression = False
        s.centroidWhole = True
        # s.displayAll = True # muestra todas las etiquetas sin importar que se empalmen
        # muestra todas las etiquetas adentro de la linea, si se empalman las muestra afuera
        s.placementFlags = QgsPalLayerSettings.BelowLine
        s.mergeLines = 1
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(5)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerLine.setLabeling(labeling)
        layerLine.setLabelsEnabled(True)
        layerLine.triggerRepaint()

        # estilo de la geometria
        render = layerLine.renderer()
        symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,0,0,0', 'width_border': '0.5'})
        render.setSymbol(symbol)

        # AGREGAR LINEAS DE CALLES SIN LINEA (SOLO LA ETIQUETA)
        # se obtiene la geometria del predio
        geom = list(layerPoly.getFeatures())[0].geometry()
        geom = geom.simplify(5)  # simplificamos para que la geometria no tenga tantos puntos (desaparezcan las curvas)
        geom = geom.buffer(10, 0)  # buffer de 10 metros para encontrar las calles pegadas a él

        # obtener las geometrias de calles
        layers = xCalle
        calles = layers
        # se obtiene las calles que colindan a la geometria del predio
        listaTemp = []
        fCalles = list(calles.getFeatures())
        rango2 = len(fCalles)
        for i in range(0, rango2):
            f2 = fCalles[i]
            if (f2.geometry().intersects(geom)):
                interseccion = f2.geometry().intersection(geom)  # intersection() - regresa un QgsGeometry
                # se validara si la intersecion entre las dos goemetrias es menor a una longitud de 6 metros no se mostrara en el mapa
                if interseccion.length() > 6:
                    map = {}
                    map['geom'] = interseccion
                    map['nombre'] = f2['calle']
                    listaTemp.append(map)

        # creacion de la capa de calles colindantes al predio
        stringCapa = 'LineString?crs=epsg:' + str(QSettings().value('srid')) + '&field=calle:string(10)'
        layerLinestring = QgsVectorLayer(stringCapa, 'calles', 'memory')
        prov = layerLinestring.dataProvider()

        for l in listaTemp:
            feat = QgsFeature()
            feat.setGeometry(l['geom'])
            feat.setAttributes([l['nombre']])
            prov.addFeatures([feat])
        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.Line
        s.fieldName = 'calle'
        s.enabled = True
        s.isExpression = False
        s.centroidWhole = True
        s.placementFlags = QgsPalLayerSettings.BelowLine | QgsPalLayerSettings.AboveLine
        s.mergeLines = 1
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(10)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerLinestring.setLabeling(labeling)
        layerLinestring.setLabelsEnabled(True)
        layerLinestring.triggerRepaint()
        # estilo de la geometria
        render = layerLinestring.renderer()
        symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,0,0,0', 'width_border': '0.5'})
        render.setSymbol(symbol)

        # QgsProject.instance().addMapLayers([layerLinestring])

        # CREACION DEL MAPA GRANDE
        map = QgsLayoutItemMap(layout)
        map.setRect(20, 20, 20, 20)

        # define las capas a mostrar
        map.setLayers([layerPoly, layerPoint, layerLine, layerLinestring, self.xAristas])

        # calcula el rectangulo del area que va a mostrar en el layout
        rect = list(layerPoly.getFeatures())[0].geometry().buffer(15, 0).boundingBox()
        # validacion para cuando el bbox resultante sea de manera rectancular con un largo mas grande que el ancho
        if rect.height() > rect.width():
            bbox = rect
            xmin1, ymin1, xmax1, ymax1 = bbox.buffered((rect.height() - rect.width()) / 2).toRectF().getCoords()
            xmin2, ymin2, xmax2, ymax2 = bbox.toRectF().getCoords()

            p1 = QgsPointXY(xmin1, ymax2)
            p2 = QgsPointXY(xmax1, ymin2)
            rect = QgsRectangle(p1, p2)

        # carga el rectanculo
        rect.scale(1.0)
        map.setExtent(rect)
        map.setBackgroundColor(QColor(255, 255, 255, 0))

        # bloquear capas (para que no se muestre otra mas que la se asigno)
        map.setKeepLayerSet(True)
        map.setKeepLayerStyles(True)

        # define el estilo del marco y lo activa
        measure = QgsLayoutMeasurement(0.30, QgsUnitTypes.LayoutMillimeters)
        map.setFrameStrokeWidth(measure)
        map.setFrameEnabled(True)

        # define el estilo del grid que aparece en el mapa
        mapGrid = QgsLayoutItemMapGrid("grid", map)
        mapGrid.setAnnotationPrecision(0)
        mapGrid.setAnnotationFrameDistance(1)
        mapGrid.setAnnotationFontColor(QColor(0, 0, 0))
        mapGrid.setIntervalX(150)
        mapGrid.setIntervalY(250)
        mapGrid.setStyle(QgsLayoutItemMapGrid.GridStyle.Cross)
        mapGrid.setCrossLength(2)
        mapGrid.setFrameStyle(QgsLayoutItemMapGrid.FrameStyle.ExteriorTicks)
        mapGrid.setAnnotationEnabled(True)
        mapGrid.setAnnotationDirection(QgsLayoutItemMapGrid.AnnotationDirection.Vertical,
                                       QgsLayoutItemMapGrid.BorderSide.Left)
        mapGrid.setAnnotationDirection(QgsLayoutItemMapGrid.AnnotationDirection.Vertical,
                                       QgsLayoutItemMapGrid.BorderSide.Right)

        # agrega el grid al mapa
        map.grids().addGrid(mapGrid)

        # define la posision y el tamaño del mapa
        map.attemptMove(QgsLayoutPoint(8, 8, QgsUnitTypes.LayoutMillimeters))
        map.attemptResize(QgsLayoutSize(142.194, 200, QgsUnitTypes.LayoutMillimeters))

        # obtener la escala
        scale = map.scale()

        # agrega el mapa al Layout
        layout.addLayoutItem(map)

        # SE AGREGA UN SEGUNDO MAPA COMO REFERENCIA DE UBICACION
        # se utiliza otra capa para agregar la referencia del predio
        layers1 = xManza
        layer1 = layers1

        # se define el diseño de la manzana seleccionada para el mapa de referencia
        stringCapa = 'Polygon?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerPoly2 = QgsVectorLayer(stringCapa, 'polygon', 'memory')
        prov = layerPoly2.dataProvider()
        geom = list(layer.getFeatures())[0].geometry()
        feat = QgsFeature()
        feat.setGeometry(geom)
        feat.setAttributes([str(1)])
        prov.addFeatures([feat])

        # estilo de la geometria
        render = layerPoly2.renderer()
        symbol = QgsFillSymbol.createSimple({'color': '#686868', 'color_border': '#686868', 'width_border': '0.1'})
        render.setSymbol(symbol)

        map1 = QgsLayoutItemMap(layout)
        map1.setRect(20, 20, 20, 20)

        # zoom a la capa del mapa pequeño
        listaM = list(layer1.getFeatures())
        geometria = QgsGeometry()
        rango = len(listaM)
        geometria = listaM[0].geometry()
        for i in range(0, rango):
            geometria = geometria.combine(listaM[i].geometry())

        rect = geometria.buffer(3, 0).boundingBox()  # zoom realizado
        rect.scale(1.0)
        map1.setLayers([layerPoly2, layer1])
        map1.setExtent(rect)
        map1.setBackgroundColor(QColor(255, 255, 255, 0))
        map1.setKeepLayerSet(True)
        map1.setKeepLayerStyles(True)
        measure = QgsLayoutMeasurement(0.30, QgsUnitTypes.LayoutMillimeters)
        map1.setFrameStrokeWidth(measure)
        map1.setFrameEnabled(True)
        map1.attemptMove(QgsLayoutPoint(214, 33, QgsUnitTypes.LayoutMillimeters))
        map1.attemptResize(QgsLayoutSize(57.863, 51.863, QgsUnitTypes.LayoutMillimeters))

        # agrega el segundo mapa
        layout.addLayoutItem(map1)

        complemento = ''

        for i in range(len(vertices) - 1):
            if (i + 1) == (len(vertices) - 1):
                complemento = complemento + '<tr><td>' + str(i + 1) + ' - 1</td><td>' + str(
                    round(vertices[i].distance(vertices[0]), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].x(), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].y(), 2)) + '</td></tr>'
            else:
                complemento = complemento + '<tr><td>' + str(i + 1) + ' - ' + str(i + 2) + '</td><td>' + str(
                    round(vertices[i].distance(vertices[i + 1]), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].x(), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].y(), 2)) + '</td></tr>'

        html = '''
           <head>
           <style>
           table {
             border-collapse: collapse;
           }

           td, th {
             border: 1px solid #dddddd;
             width: 50px;
             height: 12px;
             font-family: arial, sans-serif;
             text-align: center;
             font-size: 8px;
           }

           .font1 {
               font-family: arial;
               text-align: center;
               font-size: 10px;
           }

           </style>
           </head>
           <body>
           <table>
             <tr>
               <td colspan="4" class="font1"> CUADRO DE CONSTRUCCIÓN </td>
             </tr>
             <tr>
               <td class="distancia1" rowspan="2">LADO<br/>EST-PV</td>
               <td class="distancia1" rowspan="2">DISTANCIA (MTS)</td>
               <td colspan="2">COORDENADAS UTM</td>
             </tr>
             <tr>
               <td style="width:60px">ESTE (X)</td>
               <td style="width:60px">NORTE (Y)</td>
             </tr>
           ''' + complemento + '''
             <tr>
               <td colspan="2">SUPERFICIE: _super_ m2</td>
               <td colspan="2">PERIMETRO: _perim_ m</td>
             </tr>
           </table>
           '''

        geomPTemp = list(layerPoly.getFeatures())[0].geometry()
        area = round(geomPTemp.area(), 2)
        peri = round(geomPTemp.length(), 2)
        html = html.replace('_super_', str('{:,.2f}'.format(area)))
        html = html.replace('_perim_', str('{:,.2f}'.format(peri)))

        layout_html = QgsLayoutItemHtml(layout)
        html_frame = QgsLayoutFrame(layout, layout_html)
        html_frame.attemptSetSceneRect(QRectF(154.145, 5.930, 60, 202.220))
        html_frame.setFrameEnabled(True)
        layout_html.addFrame(html_frame)
        layout_html.setContentMode(QgsLayoutItemHtml.ManualHtml)
        layout_html.setHtml(html)
        layout_html.loadHtml()
        html_frame.setFrameEnabled(False)

        print(layout_html.userStylesheet())
        ms = self.canvas.mapSettings()
        renderContext = QgsRenderContext.fromMapSettings(ms)

        mapToPixl = self.canvas.getCoordinateTransform()

        hgh_tmp = (6 + len(vertices)) * 12

        print(
            f"************* \nog width: {html_frame.sizeWithUnits().width()} \n og height: {html_frame.sizeWithUnits().height()}\n"
            f"units:{html_frame.sizeWithUnits().units()}\n"
            f"mapunitperpizel: {mapToPixl.mapUnitsPerPixel()}")

        r_width = renderContext.convertToMapUnits(html_frame.sizeWithUnits().width(),  QgsUnitTypes.RenderMillimeters)
        r_height = renderContext.convertToMapUnits(hgh_tmp,  QgsUnitTypes.RenderPixels)

        print(
            f"************* \nconverted width: {r_width} \n converted height: {r_height}\n")

        rectF = QRectF(self.canvas.center().x(), self.canvas.center().y(), r_width, r_height)
        rect = QgsRectangle(rectF)
        print(rect.asWktPolygon())
        poly_rect = QgsGeometry.fromWkt(rect.asWktPolygon())
        print(poly_rect)

        temp2 = QgsVectorLayer(f"Polygon?crs=epsg:{QSettings().value('srid')}",
                               "rectangulo", "memory")

        feat = QgsFeature()
        feat.setGeometry(poly_rect)
        temp2.dataProvider().addFeatures([feat])

        rect_layer = QgsProject.instance().addMapLayer(temp2)
        rect_layer.triggerRepaint()


        # agregar una imagen (rosa de los vientos)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(7.85, 7.85, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(22, 22, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/image4144.png')
        picture.setLinkedMap(map)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # agregar una imagen (rosa de los vientos, segundo mapa)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(261.194, 74.220, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(10, 10, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/image4144.png')
        # picture.setLinkedMap(map1)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # agregar una imagen (logo de cuautitlan)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(214.2, 8.2, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(26.407, 14.486, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/Cuau_bien.jpg')
        # picture.setLinkedMap(map1)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # CREACION DE ETIQUETAS PARA EL LAYOUT
        title = QgsLayoutItemLabel(layout)
        title.setText('COORDINACIÓN DE\nCATASTRO')
        title.attemptMove(QgsLayoutPoint(248, 9, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(23.194, 10.364, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 8))
        title.setHAlign(Qt.AlignmentFlag.AlignCenter)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('CROQUIS DE LOCALIZACIÓN')
        title.attemptMove(QgsLayoutPoint(223, 28, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(36.410, 3.480, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 8))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('PLANO MANZANERO')
        title.attemptMove(QgsLayoutPoint(218, 23.5, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(30.3, 3.56, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('PROPIETARIO O POSEEDOR DEL INMUEBLE:')
        title.attemptMove(QgsLayoutPoint(214.200, 85.849, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(45.397, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(propietario.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 87.870, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('CLAVE CATASTRAL:')
        title.attemptMove(QgsLayoutPoint(214.200, 91.994, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(20.491, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(cveCata)
        title.attemptMove(QgsLayoutPoint(215.493, 94.203, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('UBICACIÓN:')
        title.attemptMove(QgsLayoutPoint(214.200, 98.408, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.204, 2.695, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(ubicacion.upper())
        title.attemptMove(QgsLayoutPoint(226.205, 98.408, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(44.989, 7.296, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('MUNICIPIO Y/O ENTIDAD FEDERATIVA:')
        title.attemptMove(QgsLayoutPoint(214.200, 105.254, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.813, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(mpio.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 107.950, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('LEVANTO:')
        title.attemptMove(QgsLayoutPoint(214.200, 112.212, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(10.246, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(levanto.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 114.323, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('DIBUJO:')
        title.attemptMove(QgsLayoutPoint(214.200, 117.883, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.813, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(dibujo.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 120.007, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('SUPERFICIE:')
        title.attemptMove(QgsLayoutPoint(214.200, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.968, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(str('{:,.2f}'.format(area)) + ' M2')
        title.attemptMove(QgsLayoutPoint(215.493, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('FECHA:')
        title.attemptMove(QgsLayoutPoint(236.978, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.968, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(str(date.today()))
        title.attemptMove(QgsLayoutPoint(237.694, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(17.677, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('ESCALA:')
        title.attemptMove(QgsLayoutPoint(256.896, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(11.579, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('1:' + str(round(scale, 0)))
        title.attemptMove(QgsLayoutPoint(257.763, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(12.956, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('METODO DE MEDICIÓN:')
        title.attemptMove(QgsLayoutPoint(214.200, 129.250, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(26.407, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('1:' + str(round(scale, 0)))
        title.attemptMove(QgsLayoutPoint(215.493, 131.314, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.655, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        texto = '''LA QUE SUSCRIBE LIC. LIZETT ORTEGA ALMANZA COORDINADORA DE CATASTRO EN EL MUNICIPIO DE CUAUTITLÁN, ESTADO DE MÉXICO.
           CON FUNDAMENTO EN LO ESTABLECIDO EN LOS ARTICULOS 171 FRACC. VI Y 172 DEL CÓDIGO FINANCIERO DEL ESTADO DE MÉXICO Y MUNICIPIOS.\n\n
           QUE EN EL PADRÓN CATASTRAL SE ENCUENTRA REGISTRADO EL PREDIO CON LA UBICACIÓN Y MEDIDAS QUE SE MUESTRAN EN EL PLANO MANZANERO\n\n
           LOS DERECHOS CONFORME AL ARTICULO 166 DEL CÓDIGO FINANCIERO DEL ESTADO DE MÉXICO Y MUNICIPIOS\n\n\n\n\n\n\n\n\n
           - EL PRESENTE PLANO NO AUTORIZA FUSIÓN, SUBDIVISIÓN O LOTIFICACION ALGUNA
           - EL PRESENTE PLANO NO PREJUZGA DERECHOS DE PROPIEDAD
           - EL PRESENTE PLANO NO DETERMINA INFORMACIÓN AUTORIZADA PARA CUALQUIER TIPO DE VIALIDAD
           - EL PRESENTE PLANO MANZANERO CATASTRAL DEJA SALVO LOS DERECHOS DE TERCERAS PERSONAS\n\n\n
           '''
        title.setText(texto)
        title.attemptMove(QgsLayoutPoint(215.200, 136.576, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.520, 71.212, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 5))
        title.setHAlign(Qt.AlignmentFlag.AlignLeft)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        texto = '''C E R T I F I C A\n\n\n\n\n
           A T E N T A M E N T E\n\n\n        
           ''' + certifica.upper()
        title.setText(texto)
        title.attemptMove(QgsLayoutPoint(214.200, 142.600, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.433, 50.790, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        title.setHAlign(Qt.AlignmentFlag.AlignCenter)
        layout.addLayoutItem(title)

        # IMPRESION EN PDF Y PNG
        layout = manager.layoutByName(layoutName)
        exporter = QgsLayoutExporter(layout)

        folder = str(
            QFileDialog.getExistingDirectory(None, "Selecciona la carpeta donde se guardará el plano manzananero",
                                             'c:/'))

        # fnPng = 'C:/AplicacionQGIS/reporte/layout_ejemplo.png'
        fnPdf = folder + '/plano_manzanero_' + cveCata + '.pdf'

        # exporter.exportToImage(fnPng, QgsLayoutExporter.ImageExportSettings())
        exporter.exportToPdf(fnPdf, QgsLayoutExporter.PdfExportSettings())

        self.UTI.mostrarAlerta("Proceso concluido", QMessageBox.Information, 'Plano Manzanero')

        # abrir carpeta del archivo recien creado
        path = os.path.realpath(folder)
        os.startfile(path)

        # eliminar el layout
        manager.removeLayout(layout)


    def event_planoPred(self):

        try:
            bound = self.obtenerBoundingBox().asWkt()
        except:
            self.UTI.mostrarAlerta('No se ha cargado ninguna Manzana', QMessageBox().Critical, 'Cargar referencia')
            return

        self.seleccion = self.xPredGeom.selectedFeatures()
        if not self.seleccion:
            self.UTI.mostrarAlerta('Selecciona un predio', QMessageBox.Critical, 'Capas de consulta')
            return
        else:
            self.fIdImpresion = self.seleccion[0].id()

        self.ACA.pintarCapasReferencia('Calles', bound, False)
        self.ACA.pintarCapasReferencia('Manzanas', bound, False)

        # obtiene la informacion de las capas complementarias
        xCalle = QgsProject.instance().mapLayer(QSettings().value('xCalle'))
        xManza = QgsProject.instance().mapLayer(QSettings().value('xManzanasRef'))
        xMza = QgsProject.instance().mapLayer(QSettings().value('xManzana'))

        layer = QgsProject.instance().mapLayer(QSettings().value('xPredGeom'))

        # obtiene los parametros para el reporte
        cveCata = list(layer.getFeatures([self.fIdImpresion]))[0]['cve_cat']
        cveCata = cveCata[0:3] + '-' + cveCata[3:5] + '-' + cveCata[5:8] + '-' + cveCata[8:10] + '-' + cveCata[
                                                                                                       10:] if cveCata else 'NOO ES CADENA'

        propietario = ''  # propietarios (no se sabe de donde salen por ahorita 2020-11-09)
        mpio = QSettings().value('mpio') + ', ESTADO DE MÉXICO'
        levanto = self.dlg.fldLevanto.text()
        dibujo = self.dlg.fldDibujo.text()
        ubicacion = self.dlg.fldUbicacion.text()
        recibo = self.dlg.fldRecibo.text()
        fecha = self.fechaTextual(self.dlg.dateEdit.date().toString("dd/MM/yyyy"))
        certifica = ''  # la persona que certifica no se sabe quien es...
        scale = 0  # escala del mapa

        # INICIA PROCESO DE IMPRESION DE PLANO
        project = QgsProject.instance()
        manager = project.layoutManager()
        layoutName = 'Layout1'
        layouts_list = manager.printLayouts()
        # remove any duplicate layouts
        for layout in layouts_list:
            if layout.name() == layoutName:
                manager.removeLayout(layout)
        layout = QgsPrintLayout(project)
        layout.initializeDefaults()
        layout.setName(layoutName)

        # define el estilo de la pagina ('Carta' en este caso)
        pc = layout.pageCollection()
        pc.pages()[0].setPageSize('letter', QgsLayoutItemPage.Landscape)
        manager.addLayout(layout)

        # ** DISEÑO **
        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 8, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 25.009, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 84.870, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 91.500, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 98.147, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.958, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 105.118, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 6.635, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 111.760, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 117.683, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214, 123.600, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.500, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(236.127, 123.600, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(19.094, 5.500, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214.000, 129.110, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 5.912, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # agrega un rectangulo
        rectan = QgsLayoutItemShape(layout)
        rectan.setShapeType(QgsLayoutItemShape.Shape.Rectangle)
        rectan.attemptMove(QgsLayoutPoint(214.000, 135.024, QgsUnitTypes.LayoutMillimeters))
        rectan.attemptResize(QgsLayoutSize(57.863, 72.976, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(rectan)

        # PINTA EL PREDIO (MAPA GRANDE)
        # obtiene solo el poligono que se mostrara en el mapa grande
        stringCapa = 'Polygon?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerPoly = QgsVectorLayer(stringCapa, 'polygon', 'memory')
        prov = layerPoly.dataProvider()
        geom = list(layer.getFeatures([self.fIdImpresion]))[0].geometry()
        feat = QgsFeature()
        feat.setGeometry(geom)
        feat.setAttributes([str(1)])
        prov.addFeatures([feat])

        # QgsProject.instance().addMapLayers([layerPoly])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.OverPoint
        s.fieldName = "'Superficie: ' || round($area, 2)"
        s.enabled = True
        s.isExpression = True
        s.centroidWhole = True
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerPoly.setLabeling(labeling)
        layerPoly.setLabelsEnabled(True)
        layerPoly.triggerRepaint()
        # estilo de la geometria
        render = layerPoly.renderer()
        symbol = QgsFillSymbol.createSimple(
            {'color': '255,0,0,0', 'color_border': '#000000', 'width_border': '0.3'})
        render.setSymbol(symbol)

        # PINTAR LOS PUNTOS QUE INDICAN SU NUMERACION
        # obtener la geometria del poligono
        geom = list(layerPoly.getFeatures())[0].geometry()
        polygon = geom.asPolygon()
        vertices = []
        # obtiene los vertices del poligono
        n = len(polygon[0])
        for i in range(n):
            vertices.append(polygon[0][i])

        # creacion de la capa de puntos
        stringCapa = 'Point?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerPoint = QgsVectorLayer(stringCapa, 'point', 'memory')
        prov = layerPoint.dataProvider()

        for i, v in enumerate(vertices):
            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPointXY(v))
            if (i + 1) != len(vertices):
                feat.setAttributes([i + 1])
            prov.addFeatures([feat])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.fieldName = "num"
        s.enabled = True
        s.isExpression = True
        s.centroidWhole = True
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerPoint.setLabeling(labeling)
        layerPoint.setLabelsEnabled(True)
        layerPoint.triggerRepaint()

        # estilo de la geometria
        props = layerPoint.renderer().symbol().symbolLayer(0).properties()
        props['color'] = '#ffffff'
        symbol = QgsMarkerSymbol.createSimple(
            {'name': 'square', 'color': '255,255,255,0', 'outline_color': '0,0,0,0'})
        layerPoint.renderer().setSymbol(symbol)

        # PINTAR LAS LINEAS QUE CONFORMAN EL POLIGONO PARA MARCAR LAS DISTANCIAS QUE HAY ENTRE SUS PUNTOS
        # creacion de la capa de lineas
        stringCapa = 'LineString?crs=epsg:' + str(QSettings().value('srid')) + '&field=num:string(10)'
        layerLine = QgsVectorLayer(stringCapa, 'line', 'memory')
        prov = layerLine.dataProvider()
        # se toma un punto y su siguiente para la creacion de la linea, asi para todo el poligono
        for i in range(len(vertices)):
            listTemp = []
            listTemp.append(vertices[i])
            # cuando no hay punto siguiente se toma en cuenta el primero para cerrar el poligono
            if (i + 1) == len(vertices):
                listTemp.append(vertices[0])
            else:
                listTemp.append(vertices[i + 1])

            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPolylineXY(listTemp))
            feat.setAttributes([str(round(feat.geometry().length(), 2))])
            prov.addFeatures([feat])

        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.Line
        s.fieldName = 'num'
        s.enabled = True
        s.isExpression = False
        s.centroidWhole = True
        # s.displayAll = True # muestra todas las etiquetas sin importar que se empalmen
        # muestra todas las etiquetas adentro de la linea, si se empalman las muestra afuera
        s.placementFlags = QgsPalLayerSettings.BelowLine
        s.mergeLines = 1
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(5)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerLine.setLabeling(labeling)
        layerLine.setLabelsEnabled(True)
        layerLine.triggerRepaint()

        # estilo de la geometria
        render = layerLine.renderer()
        symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,0,0,0', 'width_border': '0.5'})
        render.setSymbol(symbol)

        # AGREGAR LINEAS DE CALLES SIN LINEA (SOLO LA ETIQUETA)
        # se obtiene la geometria del predio
        geom = list(layerPoly.getFeatures())[0].geometry()
        geom = geom.simplify(
            5)  # simplificamos para que la geometria no tenga tantos puntos (desaparezcan las curvas)
        geom = geom.buffer(10, 0)  # buffer de 10 metros para encontrar las calles pegadas a él

        # obtener las geometrias de calles
        layers = xCalle
        calles = layers
        # se obtiene las calles que colindan a la geometria del predio
        listaTemp = []
        fCalles = list(calles.getFeatures())
        rango2 = len(fCalles)
        for i in range(0, rango2):
            f2 = fCalles[i]
            if (f2.geometry().intersects(geom)):
                interseccion = f2.geometry().intersection(geom)  # intersection() - regresa un QgsGeometry
                # se validara si la intersecion entre las dos goemetrias es menor a una longitud de 6 metros no se mostrara en el mapa
                if interseccion.length() > 6:
                    map = {}
                    map['geom'] = interseccion
                    map['nombre'] = f2['calle']
                    listaTemp.append(map)

        # creacion de la capa de calles colindantes al predio
        stringCapa = 'LineString?crs=epsg:' + str(QSettings().value('srid')) + '&field=calle:string(10)'
        layerLinestring = QgsVectorLayer(stringCapa, 'pruebaaa', 'memory')
        prov = layerLinestring.dataProvider()

        for l in listaTemp:
            feat = QgsFeature()
            feat.setGeometry(l['geom'])
            feat.setAttributes([l['nombre']])
            prov.addFeatures([feat])
        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.placement = QgsPalLayerSettings.Line
        s.fieldName = 'calle'
        s.enabled = True
        s.isExpression = False
        s.centroidWhole = True
        s.placementFlags = QgsPalLayerSettings.BelowLine | QgsPalLayerSettings.AboveLine
        s.mergeLines = 1
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(10)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerLinestring.setLabeling(labeling)
        layerLinestring.setLabelsEnabled(True)
        layerLinestring.triggerRepaint()
        # estilo de la geometria
        render = layerLinestring.renderer()
        symbol = QgsLineSymbol.createSimple({'line_style': 'SimpleLine', 'color': '0,0,0,0', 'width_border': '0.5'})
        render.setSymbol(symbol)

        # OBTENER LOS POLIGONOS QUE TENGA CERCA PARA DEFINIRLOS EN EL MAPA
        # se obtiene la geometria del predio
        geomOrig = list(layerPoly.getFeatures())[0].geometry()
        geom = geomOrig.buffer(2, 0)  # buffer de 5 metros para encontrar los predios pegados a él
        # obtener las geometrias de los predios
        predios = layer
        # se obtiene los predios que colindan a la geometria del predio
        listaTemp = []
        fPredios = list(predios.getFeatures())
        rango2 = len(fPredios)
        for i in range(0, rango2):
            f2 = fPredios[i]
            if (f2.geometry().intersects(geom)):
                interseccion = f2.geometry().intersection(geom)  # intersection() - regresa un QgsGeometry
                # se validara si la intersecion entre las dos goemetrias es menor a una longitud de 6 metros no se mostrara en el mapa
                if round(interseccion.area(), 2) != round(geomOrig.area(), 2):
                    map = {}
                    map['geom'] = interseccion
                    map['nombre'] = 'Propiedad Privada'
                    listaTemp.append(map)

        # creacion de la capa de predios colindantes al predio
        stringCapa = 'Polygon?crs=epsg:' + str(QSettings().value('srid')) + '&field=leyenda:string(40)'
        layerPolygon = QgsVectorLayer(stringCapa, 'pruebaaa', 'memory')
        prov = layerPolygon.dataProvider()

        for l in listaTemp:
            feat = QgsFeature()
            feat.setGeometry(l['geom'])
            feat.setAttributes([l['nombre']])
            prov.addFeatures([feat])
        # etiqueta del layer (comportamiento del texto)
        s = QgsPalLayerSettings()
        s.fieldName = 'leyenda'
        s.enabled = True
        s.isExpression = False
        s.centroidWhole = True
        s.mergeLines = 1
        s.placement = QgsPalLayerSettings.Placement.Free
        # formato del texto
        textFormat = QgsTextFormat()
        textFormat.setColor(QColor(0, 0, 0))
        textFormat.setSize(10)
        textFormat.setNamedStyle('Bold')
        s.setFormat(textFormat)
        # asociar el estilo con la capa
        labeling = QgsVectorLayerSimpleLabeling(s)
        layerPolygon.setLabeling(labeling)
        layerPolygon.setLabelsEnabled(True)
        layerPolygon.triggerRepaint()
        # estilo de la geometria
        render = layerPolygon.renderer()
        symbol = QgsFillSymbol.createSimple(
            {'color': '255,0,0,0', 'color_border': '0,0,0,0', 'width_border': '0.0', 'outline_color': '0,0,0,0'})
        render.setSymbol(symbol)

        # CREACION DEL MAPA GRANDE
        map = QgsLayoutItemMap(layout)
        map.setRect(20, 20, 20, 20)

        # define las capas a mostrar
        map.setLayers([layerPoly, layerPoint, layerLine, layerLinestring, layerPolygon, self.xAristas])

        # calcula el rectangulo del area que va a mostrar en el layout
        rect = list(layerPoly.getFeatures())[0].geometry().buffer(10, 0).boundingBox()
        # validacion para cuando el bbox resultante sea de manera rectancular con un largo mas grande que el ancho
        if rect.height() > rect.width():
            bbox = rect
            xmin1, ymin1, xmax1, ymax1 = bbox.buffered((rect.height() - rect.width()) / 2).toRectF().getCoords()
            xmin2, ymin2, xmax2, ymax2 = bbox.toRectF().getCoords()

            p1 = QgsPointXY(xmin1, ymax2)
            p2 = QgsPointXY(xmax1, ymin2)
            rect = QgsRectangle(p1, p2)

        # carga el rectanculo
        rect.scale(1.0)
        map.setExtent(rect)
        map.setBackgroundColor(QColor(255, 255, 255, 0))

        # bloquear capas (para que no se muestre otra mas que la se asigno)
        map.setKeepLayerSet(True)
        map.setKeepLayerStyles(True)

        # define el estilo del marco y lo activa
        measure = QgsLayoutMeasurement(0.30, QgsUnitTypes.LayoutMillimeters)
        map.setFrameStrokeWidth(measure)
        map.setFrameEnabled(True)

        # define el estilo del grid que aparece en el mapa
        mapGrid = QgsLayoutItemMapGrid("grid", map)
        mapGrid.setAnnotationPrecision(0)
        mapGrid.setAnnotationFrameDistance(1)
        mapGrid.setAnnotationFontColor(QColor(0, 0, 0))
        mapGrid.setIntervalX(15)
        mapGrid.setIntervalY(25)
        mapGrid.setStyle(QgsLayoutItemMapGrid.GridStyle.Cross)
        mapGrid.setCrossLength(2)
        mapGrid.setFrameStyle(QgsLayoutItemMapGrid.FrameStyle.ExteriorTicks)
        mapGrid.setAnnotationEnabled(True)
        mapGrid.setAnnotationDirection(QgsLayoutItemMapGrid.AnnotationDirection.Vertical,
                                       QgsLayoutItemMapGrid.BorderSide.Left)
        mapGrid.setAnnotationDirection(QgsLayoutItemMapGrid.AnnotationDirection.Vertical,
                                       QgsLayoutItemMapGrid.BorderSide.Right)

        # agrega el grid al mapa
        map.grids().addGrid(mapGrid)

        # define la posision y el tamaño del mapa
        map.attemptMove(QgsLayoutPoint(8, 8, QgsUnitTypes.LayoutMillimeters))
        map.attemptResize(QgsLayoutSize(142.194, 200, QgsUnitTypes.LayoutMillimeters))

        # obtener la escala
        scale = map.scale()

        # agrega el mapa al Layout
        layout.addLayoutItem(map)

        # SE AGREGA UN SEGUNDO MAPA COMO REFERENCIA DE UBICACION
        # se utiliza otra capa para agregar la referencia del predio
        layer1 = xManza if xManza else layer

        map1 = QgsLayoutItemMap(layout)
        map1.setRect(20, 20, 20, 20)

        # zoom a la capa del mapa pequeño
        listaM = list(layer1.getFeatures())
        geometria = QgsGeometry()
        rango = len(listaM)
        geometria = listaM[0].geometry()
        for i in range(0, rango):
            geometria = geometria.combine(listaM[i].geometry())

        rect = geometria.buffer(3, 0).boundingBox()  # zoom realizado
        rect.scale(1.0)

        if xManza:
            map1.setLayers([layer1, xMza])
        else:
            map1.setLayers([layer1])

        map1.setExtent(rect)
        map1.setBackgroundColor(QColor(255, 255, 255, 0))
        map1.setKeepLayerSet(True)
        map1.setKeepLayerStyles(True)
        measure = QgsLayoutMeasurement(0.30, QgsUnitTypes.LayoutMillimeters)
        map1.setFrameStrokeWidth(measure)
        map1.setFrameEnabled(True)
        map1.attemptMove(QgsLayoutPoint(214, 33, QgsUnitTypes.LayoutMillimeters))
        map1.attemptResize(QgsLayoutSize(57.863, 51.863, QgsUnitTypes.LayoutMillimeters))

        # se agrega el overview (referencia en el mapa respecto al predio usado)
        overview = QgsLayoutItemMapOverview('overview', map1)
        overview.setLinkedMap(map)
        symbol = QgsFillSymbol.createSimple({'color': '0,0,0,130', 'color_border': '0,0,0,0', 'width_border': '0'})
        overview.setFrameSymbol(symbol)
        map1.overviews().addOverview(overview)

        # agrega el segundo mapa
        layout.addLayoutItem(map1)

        complemento = ''
        for i in range(len(vertices) - 1):
            if (i + 1) == (len(vertices) - 1):
                complemento = complemento + '<tr><td>' + str(i + 1) + ' - 1</td><td>' + str(
                    round(vertices[i].distance(vertices[0]), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].x(), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].y(), 2)) + '</td></tr>'
            else:
                complemento = complemento + '<tr><td>' + str(i + 1) + ' - ' + str(i + 2) + '</td><td>' + str(
                    round(vertices[i].distance(vertices[i + 1]), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].x(), 2)) + '</td><td>' + '{:,.2f}'.format(
                    round(vertices[i].y(), 2)) + '</td></tr>'

        html = '''
            <head>
            <style>
            table {
              border-collapse: collapse;
            }

            td, th {
              border: 1px solid #dddddd;
              width: 50px;
              height: 12px;
              font-family: arial, sans-serif;
              text-align: center;
              font-size: 8px;
            }

            .font1 {
                font-family: arial;
                text-align: center;
                font-size: 10px;
            }

            </style>
            </head>
            <body>
            <table>
              <tr>
                <td colspan="4" class="font1"> CUADRO DE CONSTRUCCIÓN </td>
              </tr>
              <tr>
                <td class="distancia1" rowspan="2">LADO<br/>EST-PV</td>
                <td class="distancia1" rowspan="2">DISTANCIA (MTS)</td>
                <td colspan="2">COORDENADAS UTM</td>
              </tr>
              <tr>
                <td style="width:60px">ESTE (X)</td>
                <td style="width:60px">NORTE (Y)</td>
              </tr>
            ''' + complemento + '''
              <tr>
                <td colspan="2">SUPERFICIE: _super_ m2</td>
                <td colspan="2">PERIMETRO: _perim_ m</td>
              </tr>
            </table>
            '''

        geomPTemp = list(layerPoly.getFeatures())[0].geometry()
        area = round(geomPTemp.area(), 2)
        peri = round(geomPTemp.length(), 2)
        html = html.replace('_super_', str('{:,.2f}'.format(area)))
        html = html.replace('_perim_', str('{:,.2f}'.format(peri)))

        layout_html = QgsLayoutItemHtml(layout)
        html_frame = QgsLayoutFrame(layout, layout_html)
        html_frame.attemptSetSceneRect(QRectF(154.145, 5.930, 60, 202.220))
        html_frame.setFrameEnabled(True)
        layout_html.addFrame(html_frame)
        layout_html.setContentMode(QgsLayoutItemHtml.ManualHtml)
        layout_html.setHtml(html)
        layout_html.loadHtml()
        html_frame.setFrameEnabled(False)

        # agregar una imagen (rosa de los vientos)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(7.85, 7.85, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(22, 22, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/image4144.png')
        picture.setLinkedMap(map)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # agregar una imagen (rosa de los vientos, segundo mapa)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(261.194, 74.220, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(10, 10, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/image4144.png')
        # picture.setLinkedMap(map1)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # agregar una imagen (logo de cuautitlan)
        picture = QgsLayoutItemPicture(layout)
        picture.attemptMove(QgsLayoutPoint(214.2, 8.2, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(26.407, 14.486, QgsUnitTypes.LayoutMillimeters))
        picture.setPicturePath(':cedula/icons/Cuau_bien.jpg')
        # picture.setLinkedMap(map1)
        picture.setNorthMode(QgsLayoutItemPicture.NorthMode.TrueNorth)
        layout.addLayoutItem(picture)

        # CREACION DE ETIQUETAS PARA EL LAYOUT
        title = QgsLayoutItemLabel(layout)
        title.setText('COORDINACIÓN DE\nCATASTRO')
        title.attemptMove(QgsLayoutPoint(248, 9, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(23.194, 10.364, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 8))
        title.setHAlign(Qt.AlignmentFlag.AlignCenter)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('CROQUIS DE LOCALIZACIÓN')
        title.attemptMove(QgsLayoutPoint(223, 28, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(36.410, 3.480, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 8))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('VERIFICACIÓN DE LINDEROS')
        title.attemptMove(QgsLayoutPoint(218, 23.5, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(30.3, 3.56, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('PROPIETARIO O POSEEDOR DEL INMUEBLE:')
        title.attemptMove(QgsLayoutPoint(214.200, 85.849, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(45.397, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(propietario.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 87.870, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('CLAVE CATASTRAL:')
        title.attemptMove(QgsLayoutPoint(214.200, 91.994, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(20.491, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(cveCata)
        title.attemptMove(QgsLayoutPoint(215.493, 94.203, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('UBICACIÓN:')
        title.attemptMove(QgsLayoutPoint(214.200, 98.408, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.204, 2.695, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(ubicacion.upper())
        title.attemptMove(QgsLayoutPoint(226.205, 98.408, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(44.989, 7.296, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('MUNICIPIO Y/O ENTIDAD FEDERATIVA:')
        title.attemptMove(QgsLayoutPoint(214.200, 105.254, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.813, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(mpio.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 107.950, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('LEVANTO:')
        title.attemptMove(QgsLayoutPoint(214.200, 112.212, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(10.246, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(levanto.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 114.323, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('DIBUJO:')
        title.attemptMove(QgsLayoutPoint(214.200, 117.883, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.813, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(dibujo.upper())
        title.attemptMove(QgsLayoutPoint(215.493, 120.007, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('SUPERFICIE:')
        title.attemptMove(QgsLayoutPoint(214.200, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.968, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(str('{:,.2f}'.format(area)) + ' M2')
        title.attemptMove(QgsLayoutPoint(215.493, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.227, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('FECHA:')
        title.attemptMove(QgsLayoutPoint(236.978, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.968, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText(str(date.today()))
        title.attemptMove(QgsLayoutPoint(237.694, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(17.677, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('ESCALA:')
        title.attemptMove(QgsLayoutPoint(256.896, 123.567, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(11.579, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('1:' + str(round(scale, 0)))
        title.attemptMove(QgsLayoutPoint(257.763, 125.690, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(12.956, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('METODO DE MEDICIÓN:')
        title.attemptMove(QgsLayoutPoint(214.200, 129.250, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(26.407, 2.696, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 6))
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        title.setText('1:' + str(round(scale, 0)))
        title.attemptMove(QgsLayoutPoint(215.493, 131.314, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(13.655, 3.560, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        texto = f'''LA QUE SUSCRIBE LIC. LIZETT ORTEGA ALMANZA COORDINADORA DE CATASTRO EN EL MUNICIPIO DE CUAUTITLÁN, ESTADO DE MÉXICO.
    CON FUNDAMENTO EN LO ESTABLECIDO EN LOS ARTICULOS 171 FRACC. VI Y 172 DEL CÓDIGO FINANCIERO DEL ESTADO DE MÉXICO Y MUNICIPIOS.\n\n
    QUE EN EL PADRÓN CATASTRAL SE ENCUENTRA REGISTRADO EL PREDIO CON LA UBICACIÓN Y MEDIDAS RESULTANTES DE LA VISITA FÍSICA DE FECHA 07 DE SEMPTIEMBRE DE 2020\n\n
    LOS DERECHOS CONFORME AL ARTICULO 166 DEL CÓDIGO FINANCIERO DEL ESTADO DE MÉXICO Y MUNICIPIOS SE ACUSAN CUBIERTOS CON EL RECIBO OFICIAL No. {recibo} DE {fecha}\n\n\n\n\n\n\n
    - EL PRESENTE PLANO NO AUTORIZA FUSIÓN, SUBDIVISIÓN O LOTIFICACION ALGUNA
    - EL PRESENTE PLANO NO PREJUZGA DERECHOS DE PROPIEDAD
    - EL PRESENTE PLANO NO DETERMINA INFORMACIÓN AUTORIZADA PARA CUALQUIER TIPO DE VIALIDAD
    - EL PRESENTE PLANO MANZANERO CATASTRAL DEJA SALVO LOS DERECHOS DE TERCERAS PERSONAS\n\n\n
            '''
        title.setText(texto)
        title.attemptMove(QgsLayoutPoint(215.200, 136.576, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(55.520, 71.212, QgsUnitTypes.LayoutMillimeters))
        title.setFont(QFont('MS Shell Dlg 2', 5))
        title.setHAlign(Qt.AlignmentFlag.AlignLeft)
        layout.addLayoutItem(title)

        title = QgsLayoutItemLabel(layout)
        texto = '''C E R T I F I C A\n\n\n\n\n\n\n
            A T E N T A M E N T E\n\n\n        
            ''' + certifica.upper()
        title.setText(texto)
        title.attemptMove(QgsLayoutPoint(214.200, 146.000, QgsUnitTypes.LayoutMillimeters))
        title.attemptResize(QgsLayoutSize(57.433, 50.790, QgsUnitTypes.LayoutMillimeters))
        font = QFont('MS Shell Dlg 2', 8)
        font.setBold(True)
        title.setFont(font)
        title.setHAlign(Qt.AlignmentFlag.AlignCenter)
        layout.addLayoutItem(title)

        '''
        # Imprimir la lista de capas 

        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Legend")
        layerTree = QgsLayerTree()
        layerTree.addLayer(layers[0])
        layerTree.addLayer(layers[1])
        legend.model().setRootGroup(layerTree)
        layout.addLayoutItem(legend)
        legend.attemptMove(QgsLayoutPoint(230, 15, QgsUnitTypes.LayoutMillimeters))
        '''

        ''' 
        # barra de escalas

        scalebar = QgsLayoutItemScaleBar(layout)
        scalebar.setStyle('Line Ticks Up')
        scalebar.setUnits(QgsUnitTypes.DistanceMeters)
        scalebar.setNumberOfSegments(5)
        scalebar.setNumberOfSegmentsLeft(0)
        scalebar.setUnitsPerSegment(20)
        scalebar.setLinkedMap(map)
        scalebar.setUnitLabel('m')
        scalebar.setFont(QFont('Arial', 14))
        scalebar.update()
        layout.addLayoutItem(scalebar)
        scalebar.attemptMove(QgsLayoutPoint(5, 190, QgsUnitTypes.LayoutMillimeters))
        '''

        # IMPRESION EN PDF Y PNG
        layout = manager.layoutByName(layoutName)
        exporter = QgsLayoutExporter(layout)

        folder = str(
            QFileDialog.getExistingDirectory(None, "Selecciona la carpeta donde se guardará el reporte", 'c:/'))

        fnPdf = folder + '/verificacion_linderos_' + cveCata + '.pdf'

        # fnPng = 'C:/BORRARRRRRRRRRRRR/qgis/layout_ejemplo.png'
        # fnPdf = 'C:/BORRARRRRRRRRRRRR/qgis/layout_ejemplo.pdf'

        # exporter.exportToImage(fnPng, QgsLayoutExporter.ImageExportSettings())
        exporter.exportToPdf(fnPdf, QgsLayoutExporter.PdfExportSettings())

        self.UTI.mostrarAlerta("Proceso concluido", QMessageBox.Information, 'Plano Manzanero')

        # abrir carpeta del archivo recien creado
        path = os.path.realpath(folder)
        os.startfile(path)

        # eliminar el layout
        # manager.removeLayout(layout)





    def obtenerBoundingBox(self):

        self.manzanaPrincipal = self.xManzana
        xManzana = QgsProject.instance().mapLayer(QSettings().value('xManzana'))

        if xManzana is None:
            return

        listaManzanas = list(self.manzanaPrincipal.getFeatures())
        geometria = QgsGeometry()

        rango = len(listaManzanas)
        if rango == 0:
            return None

        geometria = listaManzanas[0].geometry()

        for i in range(0, rango):
            geometria = geometria.combine(listaManzanas[i].geometry())

        geoTemp = (QgsGeometry.fromWkt(geometria.boundingBox().asWktPolygon())).buffer(10, 0)

        return geoTemp



    def obtenerXCapas(self):
        # carga las capas en caso de no existir
        # self.UTI.cargarCapaVacio()

        xMan = QSettings().value('xManzana')
        xPredG = QSettings().value('xPredGeom')
        xPredN = QSettings().value('xPredNum')
        xCon = QSettings().value('xConst')
        xHoriG = QSettings().value('xHoriGeom')
        xHoriN = QSettings().value('xHoriNum')
        xVe = QSettings().value('xVert')
        xCv = QSettings().value('xCvesVert')

        self.xManzana = QgsProject.instance().mapLayer(xMan)
        self.xPredGeom = QgsProject.instance().mapLayer(xPredG)
        self.xPredNum = QgsProject.instance().mapLayer(xPredN)
        self.xConst = QgsProject.instance().mapLayer(xCon)
        self.xHoriGeom = QgsProject.instance().mapLayer(xHoriG)
        self.xHoriNum = QgsProject.instance().mapLayer(xHoriN)
        self.xVert = QgsProject.instance().mapLayer(xVe)
        self.xCvesVert = QgsProject.instance().mapLayer(xCv)

        self.xAristas = None


    def closeEvent(self, msg):
        if msg:
            # borramos la capa de aristas
            if self.xAristas:
                QgsProject.instance().removeMapLayer(self.xAristas.id())
            if self.xPredGeom:
                self.xPredGeom.removeSelection()
            if self.xManzana:
                self.xManzana.removeSelection()
            self.canvas.refresh()
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()


    def lineEditToUpper(self, txt, who):
        who.setText(txt.upper())

    def fechaTextual(self, fecha):

        meses = {"01":"ENERO",
                 "02":"FEBRERO",
                 "03":"MARZO",
                 "04":"ABRIL",
                 "05":"MAYO",
                 "06":"JUNIO",
                 "07":"JULIO",
                 "08":"AGOSTO",
                 "09":"SEPTIEMBRE",
                 "10":"OCTUBRE",
                 "11":"NOVIEMBRE",
                 "12":"DICIEMBRE"}

        d,m,a = fecha.split('/')

        return f"{d} DE {meses[m]} DEL {a}"
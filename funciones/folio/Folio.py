# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Folio
                                 A QGIS plugin
 Folio
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Folio
        email                : Folio
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QAction, QApplication, QFileDialog, QToolBox,  QMessageBox
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Folio_dialog import FolioDialog
import os.path
from PyQt5 import QtWidgets
import os.path, requests, json

class Folio:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, CFG = None, UTI = None, parent=None, nuevo = False):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Folio_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.nuevo = nuevo
        self.CFG = CFG
        self.UTI = UTI
        self.headers = {'Content-Type': 'application/json'}
        self.folio = []
        self.actions = []
        self.recuperar = {}
        self.menu = self.tr(u'&Folio')
        self.dlg = FolioDialog(parent = iface.mainWindow())
        self.dlg.btnBrowse_8.clicked.connect(self.buscar)
        self.dlg.twOperaciones_9.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.dlg.twOperaciones_9.clicked.connect(self.enviar)
        self.dlg.btnCancelar.clicked.connect(self.adios)
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Folio', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Folio/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Folio'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FolioDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def buscar(self):
        self.datos = self.dlg.leBusqueda_4.text()

        envio = {}
        envio['folio'] = self.datos
        envio['solicitante'] = self.datos
        resp = self.guardarOperacion(nuevo = self.nuevo, url = (self.CFG.urlOptenerTramites), envio = envio)
        #print(resp)
        self.dlg.twOperaciones_9.clearContents()
        self.dlg.twOperaciones_9.setRowCount(0)
        if resp == []:
            self.createAlert('Ingrese un Folio correcta o un nombre correcto', QMessageBox().Critical, "Solicitud")

                # mostrar usuarios en tabla

        self.dlg.twOperaciones_9.setRowCount(len(resp))
        for x in range(0, len(resp)):
            
            item2 = QTableWidgetItem(str(resp[x]['fecha_solcitud']))
            item3 = QTableWidgetItem(str(resp[x]['clave_catastral']))
            item4 = QTableWidgetItem(str(resp[x]['solicita_localidad']))
            item5 = QTableWidgetItem(str(resp[x]['folio_inicio']))
            item6 = QTableWidgetItem(str(resp[x]['propietario']))
            item7 = QTableWidgetItem(str(resp[x]['solicita_nombre']))
            item8 = QTableWidgetItem(str(resp[x]['idTramite']))
            item9 = QTableWidgetItem(str(resp[x]['solicita_tel']))
            item10 = QTableWidgetItem(str(resp[x]['solicita_municipio']))
            item11 = QTableWidgetItem(str(resp[x]['id']))
            item12 = QTableWidgetItem(str(resp[x]['solicita_colonia']))
            item13 = QTableWidgetItem(str(resp[x]['solicita_fraccionamiento']))
            item14 = QTableWidgetItem(str(resp[x]['solicita_correo']))
            item15 = QTableWidgetItem(str(resp[x]['solicita_calle']))
            self.dlg.twOperaciones_9.setItem(x,0, item2)
            self.dlg.twOperaciones_9.setItem(x,1, item3)
            self.dlg.twOperaciones_9.setItem(x,2, item4)
            self.dlg.twOperaciones_9.setItem(x,3, item5)
            self.dlg.twOperaciones_9.setItem(x,4, item6)
            self.dlg.twOperaciones_9.setItem(x,5, item7)
            self.dlg.twOperaciones_9.setItem(x,6, item8)
            self.dlg.twOperaciones_9.setItem(x,7, item9)
            self.dlg.twOperaciones_9.setItem(x,8, item10)
            self.dlg.twOperaciones_9.setItem(x,9, item11)
            self.dlg.twOperaciones_9.setItem(x,10, item12)
            self.dlg.twOperaciones_9.setItem(x,11, item13)
            self.dlg.twOperaciones_9.setItem(x,12, item14)
            self.dlg.twOperaciones_9.setItem(x,13, item15)
    def enviar(self):
        if self.dlg.twOperaciones_9.rowCount() > 0:


            row_2 = self.dlg.twOperaciones_9.currentRow()
            rol = self.dlg.twOperaciones_9.item(row_2,0)
            rol1 = self.dlg.twOperaciones_9.item(row_2,1)
            rol2 = self.dlg.twOperaciones_9.item(row_2,2)
            rol3 = self.dlg.twOperaciones_9.item(row_2,3)
            rol4 = self.dlg.twOperaciones_9.item(row_2,4)
            rol5 = self.dlg.twOperaciones_9.item(row_2,5)
            rol6 = self.dlg.twOperaciones_9.item(row_2,7)
            rol7 = self.dlg.twOperaciones_9.item(row_2,8)
            rol8 = self.dlg.twOperaciones_9.item(row_2,10)
            rol9 = self.dlg.twOperaciones_9.item(row_2,11)
            rol10 = self.dlg.twOperaciones_9.item(row_2,12)
            rol11 = self.dlg.twOperaciones_9.item(row_2,13)
            rol12 = self.dlg.twOperaciones_9.item(row_2,6)
            rol13 = self.dlg.twOperaciones_9.item(row_2,9)
            self.recuperar['fecha_solcitud'] = rol.text()
            self.recuperar['clave_catastral'] =   rol1.text()
            self.recuperar["solicita_localidad"] = rol2.text()
            self.recuperar["folio_inicio"] = rol3.text()
            self.recuperar["propietario"] = rol4.text()
            self.recuperar["solicita_nombre"] = rol5.text()
            self.recuperar["solicita_tel"] = rol6.text()
            self.recuperar["solicita_municipio"] = rol7.text()
            self.recuperar["solicita_colonia"] = rol8.text()
            self.recuperar["solicita_fraccionamiento"] = rol9.text()
            self.recuperar["solicita_correo"] = rol10.text()
            self.recuperar["solicita_calle"] = rol11.text()
            self.recuperar["idTramite"] = rol12.text()
            self.recuperar["id"] = rol13.text()
            self.adios()
            #self.recuperar.append(rol.text() + rol2.text() + rol3.text() + rol4.text() + rol5.text() + rol6.text() + rol7.text() + rol8.text() + rol9.text() + rol10.text()  )
            #print(self.recuperar)
    def adios(self):
        self.dlg.close()
    def guardarOperacion(self, nuevo = False, url = '', envio = {}):
        data = ""
        
        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(envio)
        
        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()
            
            if nuevo:
                response = requests.post(url, headers = self.headers, data = jsonEnv)
                data = response.content
                # ejemplo con put, url, header y body o datos a enviar
               

        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'guardarOperacion()' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return str(e)

        if response.status_code == 403:
            self.createAlert('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Operaciones")
            return None
           
        elif response.status_code >= 300:
            self.createAlert('Error en peticion "guardarOperacion()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return response.text

        return json.loads(data)

    def consumeWSGeneral(self, url_cons = ""):

        url = url_cons
        data = ""

        try:
            self.headers['Authorization'] = self.UTI.obtenerToken()
            response = requests.get(url, headers = self.headers)
        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'consumeWSGeneral()'" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return

        if response.status_code == 200:
            data = response.content
                   
        else:
            self.createAlert('Error en peticion "consumeWSGeneral()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return

        return json.loads(data)
    def createAlert(self, mensaje, icono = QMessageBox().Critical, titulo = 'Operaciones'):
        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()
    def adios(self):
        self.dlg.close()
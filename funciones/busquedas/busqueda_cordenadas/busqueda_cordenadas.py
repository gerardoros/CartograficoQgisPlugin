# -*- coding: utf-8 -*-
"""
/***************************************************************************
 busquedacordenadas
                                 A QGIS plugin
 busqueda por cordenadas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by 1
        email                : 1
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.gui import QgsMapToolEmitPoint
from ....funciones.configuracion import Configuracion
from ....funciones.utilidades import utilidades
from osgeo import ogr, osr
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .busqueda_cordenadas_dialog import busquedacordenadasDialog
import os.path
import json,requests
from qgis.core import *
from ..datos_inmueble import datos_inmueble

class busquedacordenadas:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        #Init canvas
        self.canvas = self.iface.mapCanvas()
        #Init click tool
        self.clickTool = QgsMapToolEmitPoint(self.canvas)
        self.clickTool.canvasClicked.connect( self.handleMouseDown )
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'busquedacordenadas_{}.qm'.format(locale))

    
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.CFG = Configuracion.Configuracion()
        self.UTI = utilidades.Utilidad()
        self.UTI.CFG = self.CFG

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&busquedacordenadas')
        self.dockwidget = busquedacordenadasDialog(parent = iface.mainWindow())
        # -- evento boton de consulta de predio por coordenadas
        self.dockwidget.btLocalizar.clicked.connect(self.localizarCoordenadas)
        self.dockwidget.btCerrar.clicked.connect(self.closePlugin)
        self.dockwidget.btDetalle.clicked.connect(self.abrirDetallePredio)


        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None



    def closePlugin(self):
        self.dockwidget.leCordenadasX.setText("");
        self.dockwidget.leCordenadasY.setText("");
        self.dockwidget.close()


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('busquedacordenadas', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/busqueda_cordenadas/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        result = QObject.connect(self.clickTool, SIGNAL("canvasClicked(const QgsPoint &, Qt::MouseButton)"), self.handleMouseDown)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.dockwidget.leCordenadasX.setText("")
        self.dockwidget.leCordenadasY.setText("")
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&busquedacordenadas'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = busquedacordenadasDialog()

        self.canvas.setMapTool(self.clickTool)

        self.dockwidget.leCordenadasX.setText("");
        self.dockwidget.leCordenadasY.setText("");

        # show the dialog
        self.dockwidget.show()
        # Run the dialog event loop
        result = self.dockwidget.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass





    #--- Obtiene las coordenadas #################
    def handleMouseDown(self, point, button):
        self.dockwidget.leCordenadasX.setText(str(point.x()))
        self.dockwidget.leCordenadasY.setText(str(point.y()))
        print( str(point.x()) + " , " +str(point.y()) )


    def consumeWSGeneral(self, url_cons = ""):
        self.listaCoordenada = [self.dockwidget.leCordenadasX.text(), self.dockwidget.leCordenadasY.text()]
        self.srid = QSettings().value("srid")
        self.jsonGuardar = {'src': self.srid, 'coordinates': self.listaCoordenada}
        jsonParaGuardarAtributos = json.dumps(self.jsonGuardar)
        url = self.CFG.urlBusquedaPorCoordenadas
        payload = jsonParaGuardarAtributos
        headers = {'Content-Type': 'application/json', 'Authorization': self.UTI.obtenerToken()}

        try:
            response = requests.post(url, headers = headers, data = payload)

        except requests.exceptions.RequestException:
            self.UTI.mostrarAlerta("No se ha podido conectar al servidor v1", QMessageBox.Critical, "Guardar Cambios v1")#Error en la peticion de consulta


        return response.json()

    # --- metodo que abre el detalle del INMUEBLE
    def abrirDetallePredio(self):
        #Para abrir el detalle del predio
        urlDetallePredio = self.CFG.urlDetallePredio
        headers = {'Content-Type': 'application/json', 'Authorization': self.UTI.obtenerToken()}
        try:
            
            response = requests.get(urlDetallePredio + str(self.consumeWSGeneral(self)['features'][0]['properties']['id']), headers = headers)
            self.dataPrueba = response.json()
            self.DTP = datos_inmueble.datosinmueble(self.iface, self.dataPrueba)
            self.DTP.run()

        except Exception:
            self.UTI.mostrarAlerta("No se ha podido conectar al servidor v1", QMessageBox.Critical, "Guardar Cambios v1")#Error en la peticion de consulta
 
        

    # --- Metodo que manda a realizar la funcion de localizar coordenadas #################
    def localizarCoordenadas(self):

        if (self.dockwidget.leCordenadasX.text() == "") or (self.dockwidget.leCordenadasY.text() == "") :
            self.UTI.mostrarAlerta("No tienes coordenadas en el campo", QMessageBox.Critical, "Busqueda por coordenadas")#Error en la peticion de consulta
        else:
            try:
                mem_layer = QgsProject.instance().mapLayer(QSettings().value('xPredGeom'))
                nombreCapa = mem_layer.name()

                data = self.consumeWSGeneral(self)

                type(data)
                srid = QSettings().value("srid")
                inSpatialRef = osr.SpatialReference()
                inSpatialRef.ImportFromEPSG(int(srid))
                outSpatialRef = osr.SpatialReference()
                outSpatialRef.ImportFromEPSG(int(srid))
                coordTrans = osr.CoordinateTransformation(inSpatialRef, outSpatialRef)
                if not bool(data):
                    self.UTI.mostrarAlerta("Error de servidor pintcap", QMessageBox().Critical, "Cargar capa de consulta")
                    print('ERROR: CAP000')

                #Obtenemos todos los atributos del JSON
                if data['features'] == []:
                    return True

                varKeys = data['features'][0]['properties']

                keys = list(varKeys.keys())
                properties = []
                geoms = []

                for feature in data['features']:

                    geom = feature['geometry']

                    property = feature['properties']
                    geom = json.dumps(geom)
                    geometry = ogr.CreateGeometryFromJson(geom)
                    geometry.Transform(coordTrans)
                    geoms.append(geometry.ExportToWkt())
                    l = []
                    for i in range(0, len(keys)):
                        l.append(property[keys[i]])
                    properties.append(l)

                prov = mem_layer.dataProvider()
                feats = [ QgsFeature() for i in range(len(geoms)) ]

                for i, feat in enumerate(feats):
                    feat.setAttributes(properties[i])
                    feat.setGeometry(QgsGeometry.fromWkt(geoms[i]))
                    self.bbox = QgsGeometry.fromWkt(geoms[i]).boundingBox()

                prov.addFeatures(feats)

                mem_layer.triggerRepaint()

                self.iface.mapCanvas().setExtent(self.bbox)
                self.iface.mapCanvas().refresh()
                return True
            except Exception:
                self.UTI.mostrarAlerta("No se encontró ningún predio", QMessageBox.Critical, "Busqueda de predios por coordenadas")#Error en la peticion de consulta

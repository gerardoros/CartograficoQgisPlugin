# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AdminUsers
                                 A QGIS plugin
 Administracion de Usuarios
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2018 by worknest
        email                : dignacio.lopezo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5 import QtWidgets

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon, QColor, QBrush
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .AdminUsers_dialog import AdminUsersDialog
from .usuariosEdicionVer import usuariosEdicionVer
import os.path, requests, json
from .cambioClave_Usuario import cambioClave_Usuario


class AdminUsers:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AdminUsers_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = AdminUsersDialog(parent = iface.mainWindow())

        # ------ DECLARACION DE EVENTOS

        self.dlg.tabwUsuarios.blockSignals(True)
        self.dlg.tabwUsuarios.currentChanged.connect(self.event_cambioPestania)
        self.dlg.tabwUsuarios.blockSignals(False)

        self.dlg.leBusqueda.textChanged.connect(self.event_textChangedLbBusqueda)

        self.dlg.btnNuevoUsuario.clicked.connect(self.event_nuevoUsuario)
        self.dlg.btnCambioClave.clicked.connect(self.event_cambioContra)

        # ------ CIERRA DECLARACION DE EVENTOS


        # ------ INICIALIZAR VALORES
        
        # muestra siempre la primer tab
        self.dlg.tabwUsuarios.setCurrentIndex(0)

        self.dlg.twUsuarios.setColumnHidden(0, True)
        self.dlg.twUsuarios.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        self.dlg.twUsuarios.setSortingEnabled(True)
        
        header = self.dlg.twUsuarios.horizontalHeader()
        #header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        #header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        #header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)


        header.setResizeContentsPrecision(100)
        header.setResizeContentsPrecision(200)
        header.setResizeContentsPrecision(200)


        self.headers = {'Content-Type': 'application/json'}

        self.CFG = None
        self.UTI = None

        self.usuarios = []

        # ------ CERRAR INICIALIZAR VALORES

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AdminUsers', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/AdminUsers/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AdminUsers'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        
        self.event_cambioPestania(index = 0)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    # --- E V E N T O S   Widget ---

    # - cambio de pestaña
    def event_cambioPestania(self, index): #changed!

        # solo se ejecuta siempre y cuando sea la misma pestaña
        if index == 0:

            # remover todos
            self.dlg.twUsuarios.clearContents()
            self.dlg.twUsuarios.setRowCount(0)
                
            for row in range(0, self.dlg.twUsuarios.rowCount()):        
                self.dlg.twUsuarios.removeRow(row) 

            # consumir ws para descargar usuarios
            self.usuarios = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllUsers)

            if not self.usuarios or len(self.usuarios) == 0:
                return

            # mostrar usuarios en tabla
            self.dlg.twUsuarios.setRowCount(len(self.usuarios))
            for i in range(0, len(self.usuarios)):

                auth = ", ".join(self.usuarios[i]['authorities'])

                btnVer = QtWidgets.QPushButton('Ver')
                btnEdi = QtWidgets.QPushButton('Editar')
                btnElim = QtWidgets.QPushButton('Eliminar')


                btnVer.setStyleSheet('''QPushButton{
                                    background : rgb(174, 116, 0);
                                    color : rgb(255, 255, 255);
                                    font-weight: bold;
                                    }
                                    QPushButton::disabled {
                                    background : rgb(187, 129, 13);
                                    color : rgb(245,245,245);
                                    border: 1px solid #adb2b5;
                                    }''')

                
                btnEdi.setStyleSheet('''QPushButton{
                                    background : rgb(174, 116, 0);
                                    color : rgb(255, 255, 255);
                                    font-weight: bold;
                                    }
                                    QPushButton::disabled {
                                    background : rgb(187, 129, 13);
                                    color : rgb(245,245,245);
                                    border: 1px solid #adb2b5;
                                    }''')

                self.dlg.twUsuarios.setItem(i, 0, QtWidgets.QTableWidgetItem(str(self.usuarios[i]['id'])))
                self.dlg.twUsuarios.setItem(i, 1, QtWidgets.QTableWidgetItem((self.usuarios[i]['firstName'] if self.usuarios[i]['firstName'] else '') + ' ' + (self.usuarios[i]['lastName'] if self.usuarios[i]['lastName'] else '')))
                self.dlg.twUsuarios.setItem(i, 2, QtWidgets.QTableWidgetItem(self.usuarios[i]['login']))
                self.dlg.twUsuarios.setItem(i, 3, QtWidgets.QTableWidgetItem(auth))
                self.dlg.twUsuarios.setCellWidget(i, 4, btnVer)
                self.dlg.twUsuarios.setCellWidget(i, 5, btnEdi)
                #self.dlg.twUsuarios.setCellWidget(i, 6, btnElim)
                
                btnVer.clicked.connect(self.event_currentPositionButtonPressed)
                btnEdi.clicked.connect(self.event_currentPositionButtonPressed)
                btnElim.clicked.connect(self.event_currentPositionButtonPressed)

    # - boton presionado dentro de la lista
    def event_currentPositionButtonPressed(self):
        clickme = QtWidgets.qApp.focusWidget()
        # or button = self.sender()
        index = self.dlg.twUsuarios.indexAt(clickme.pos())
        
        if index.isValid():
            item = self.dlg.twUsuarios.item(index.row(), 0)
            usuario = [x for i, x in enumerate(self.usuarios) if str(x['id']) == item.text()]

            # ver
            if index.column() == 4:

                obj = usuariosEdicionVer(usuario[0] if len(usuario) > 0 else None, False, False, CFG = self.CFG, UTI = self.UTI)
                respuesta = obj.exec()
                pass

            # editar
            if index.column() == 5:
                obj = usuariosEdicionVer(usuario[0] if len(usuario) > 0 else None, False, True, CFG = self.CFG, UTI = self.UTI)
                respuesta = obj.exec()
                pass

            # eliminar
            if index.column() == 6:
                pass

            # regresa un 0 o un 1
            # 0 = RECHAZADO = CANCELAR
            # 1 = ACEPTADO  = ACEPTAR
            if respuesta == 0:
                return

            # limpiar tabla
            self.limpiaTabla()

            self.event_cambioPestania(0)

    # - cambio de texto para realizar busquedas
    def event_textChangedLbBusqueda(self, texto):
        
        for row in range(0,self.dlg.twUsuarios.rowCount()):
            self.dlg.twUsuarios.showRow(row)

        if texto == '':
            return
        items = self.dlg.twUsuarios.findItems(texto, Qt.MatchContains)

        ocultar = True
        rowCount = self.dlg.twUsuarios.rowCount()
        for row in range(0, rowCount):
            ocultar = True
            for item in items:

                if row == item.row():
                    ocultar = False
                    break

            if ocultar:
                self.dlg.twUsuarios.hideRow(row)

    # - creacion de nuevo usuario
    def event_nuevoUsuario(self):
        obj = usuariosEdicionVer(nuevo = True, edicion = True, CFG = self.CFG, UTI = self.UTI)

        respuesta = obj.exec()
        # regresa un 0 o un 1
        # 0 = RECHAZADO = CANCELAR
        # 1 = ACEPTADO  = ACEPTAR
        if respuesta == 0:
            return

        # limpiar tabla
        self.limpiaTabla()

        self.event_cambioPestania(0)

    def event_cambioContra(self):
        var = QSettings().value('datoUsuario')

        print(var)
        print(type(var))
        obj = cambioClave_Usuario(CFG = self.CFG, UTI = self.UTI, usuario = var)
        obj.exec()

    # --- CERRAR E V E N T O S   Widget ---

    # --- S E R V I C I O S   W E B  ---

    # - consume ws para informacion de catalogos
    def consumeWSGeneral(self, url_cons = ""):

        url = url_cons
        data = ""

        try:
            self.headers['Authorization'] = self.UTI.obtenerToken()
            response = requests.get(url, headers = self.headers)
        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'consumeWSGeneral()'" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return

        if response.status_code == 200:
            data = response.content
           
        else:
            self.createAlert('Error en peticion "consumeWSGeneral()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return

        return json.loads(data)

    # --- S E R V I C I O S   W E B   CIERRA ---

    # --- M E T O D O S ---

    def limpiaTabla(self):
        print('entras')
        self.dlg.twUsuarios.clearContents()
        self.dlg.twUsuarios.setRowCount(0)
            
        for row in range(0, self.dlg.twUsuarios.rowCount()):        
            self.dlg.twUsuarios.removeRow(row) 

    # - Crea una alerta para ser mostrada como ventana de advertencia
    def createAlert(self, mensaje, icono = QMessageBox().Critical, titulo = 'Usuarios'):
        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()

    # --- M E T O D O S  CERRAR ---

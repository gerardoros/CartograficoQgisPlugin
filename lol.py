# -*- coding: utf-8 -*-
"""
/***************************************************************************
 lol
                                 A QGIS plugin
 lol
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-18
        git sha              : $Format:%H$
        copyright            : (C) 2020 by lol
        email                : lol
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QSize
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDesktopWidget
from .funciones.configuracion import Configuracion
from .funciones.utilidades import utilidades
from qgis.utils import iface
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from qgis.core import *
import jwt
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the DockWidget
from .lol_dockwidget import lolDockWidget
import os.path, requests, json
from .funciones.consulta import ActualizacionCatastralV3
from .funciones.configuracion import Configuracion
from .funciones.consulta import ActualizacionCatastralV3
from .funciones.dibujo import DibujoV3
from .funciones.eliminacion import EliminacionV3
from .funciones.topologia import TopologiaV3
from .funciones.utilidades import utilidades
from .funciones.fusiondivision import DivisionFusion
from .funciones.cargamasiva import Integracion

from .funciones.revisioncampo import AsignacionCampo
from .funciones.revisioncampo import AsignacionRevision
from .funciones.revisioncampo import CedulaPadron
from .funciones.revisioncampo import AsignacionPadron
from .funciones.revisioncampo import IntermedioCedulaRevision
from .funciones.subir_shape import subir_shape
from .funciones.adminusers import AdminUsers

class lol:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'lol_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&lol')
        
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'lol')
        self.toolbar.setObjectName(u'lol')

       
        #print "** INITIALIZING lol"

        


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('lol', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Master/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING lol"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD lol"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&lol'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

       

            #print "** STARTING lol"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
        
            # Create the dockwidget (after translation) and keep reference
        self.dockwidget = lolDockWidget()

        # connect to provide cleanup on closing of dockwidget
        self.dockwidget.closingPlugin.connect(self.onClosePlugin)
        self.CFG = Configuracion.Configuracion()
        self.UTI = utilidades.Utilidad()
        self.UTI.CFG = self.CFG

        self.headers = {'Content-Type': 'application/json'}

        # consulta informacion del usuario logueado
        usuario = self.UTI.decodeRot13(QSettings().value('usuario'))
        #print(usuario)
        var = QSettings()
        token = var.value('token')

        # se decodifica el token (JWT)
        decode = jwt.decode(token, verify=False)
        #print(decode)
        resultado = self.consumeWSGeneral(url_cons = self.CFG.url_MA_getInfoUser + str(decode['user_name']))
        #print(resultado)
        if not resultado:
            return
       
        var.setValue("datoUsuario", resultado)
        # obtiene todos los permisos del usuario
        # ----- P E N D I E N T E ----

        #self.dockwidget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        #self.CFG = Configuracion
        
        # Consulta de cartografia
        self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface)
        self.UTI.ACA = self.ACA

        #Subir shapes
        self.SHP = subir_shape.SubirShape(iface)

        # Division y fusion
        self.DFS = DivisionFusion.DivisionFusion(iface, self.ACA)
        
        # Dibujo
        self.DBJ = DibujoV3.DibujoV3(iface)
        
        # Eliminacion de geometrias
        self.ELM = EliminacionV3.EliminacionV3(iface)

        # Verificacion de Topologias
        self.TPG = TopologiaV3.TopologiaV3(iface, self.ACA, self.CFG, self.UTI)

        # Integracion (Carga masiva)
        self.CMS = Integracion.Integracion(iface)
        
        # Asignaciones de campo, revision y padron
        self.ASCM = AsignacionCampo.AsignacionCampo(iface, self.UTI)
        self.ASRV = AsignacionRevision.AsignacionRevision(iface, self.UTI)
        self.ASPA = AsignacionPadron.AsignacionPadron(iface, self.UTI)

        # Intermediarios de asignaciones para Padron y gabinete
        self.INTEPAD = IntermedioCedulaRevision.IntermedioCedulaRevision(iface, self, 'PAD')
        self.INTEREV = IntermedioCedulaRevision.IntermedioCedulaRevision(iface, self, 'REV')


        #------------ DESACTIVAMOS LAS OPERACIONES Y MANDAMOS A VERIFICAR SUS ROLES
        self.comproveRoles()
        self.asignActionsByRoles(iface)

        # ------------ EVENTO DE BOTONES -------------
       
        self.dockwidget.btnConsulta.clicked.connect(self.irAConsulta)
        self.dockwidget.btnDibujo.clicked.connect(self.irADibujo)
        self.dockwidget.btnEliminar.clicked.connect(self.irAEliminar)
        self.dockwidget.btnTopologia.clicked.connect(self.irATopologia)
        self.dockwidget.btnFusDiv.clicked.connect(self.irAFusionDivision)
        self.dockwidget.btnCargaMasiva.clicked.connect(self.irACargaMasiva)
        self.dockwidget.btnAsigCampo.clicked.connect(self.irAAsignacionCampo)
        self.dockwidget.btnAsigRev.clicked.connect(self.irAAsignacionRevision)
        self.dockwidget.btnAsigPad.clicked.connect(self.irAAsignacionPadron)

        
        self.dockwidget.btnInterPad.clicked.connect(self.irAIntermediarioPad)
        self.dockwidget.btnInterRev.clicked.connect(self.irAIntermediarioRev)

        self.dockwidget.btnAdminUsers.clicked.connect(self.irAAdminUsuarios)
        self.dockwidget.setFixedSize(121,1000)
        self.i = 0
        self.dockwidget.despliega.clicked.connect(self.cdesplega)
        # show the dockwidget
        # TODO: fix to allow choice of dock location
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
        self.dockwidget.show()


    def cdesplega(self):
        if self.i == 0:
            self.i = self.i + 1
            self.dockwidget.btnConsulta.setFixedSize(250, 51)
            self.dockwidget.btnConsulta.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnConsulta.setText("consulta")
            self.dockwidget.btnDibujo.setFixedSize(250, 51)
            self.dockwidget.btnDibujo.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnDibujo.setText("dibujo")
            self.dockwidget.btnEliminar.setFixedSize(250, 51)
            self.dockwidget.btnEliminar.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnEliminar.setText("eliminar")
            self.dockwidget.btnTopologia.setFixedSize(250, 51)
            self.dockwidget.btnTopologia.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnTopologia.setText("topologia")
            self.dockwidget.btnFusDiv.setFixedSize(250, 51)
            self.dockwidget.btnFusDiv.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnFusDiv.setText("funciones")
            self.dockwidget.btnCargaMasiva.setFixedSize(250, 51)
            self.dockwidget.btnCargaMasiva.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnCargaMasiva.setText("carga masiva")
            self.dockwidget.btnAsigCampo.setFixedSize(250, 51)
            self.dockwidget.btnAsigCampo.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigCampo.setText("asignacion de campo")
            self.dockwidget.btnAsigRev.setFixedSize(250, 51)
            self.dockwidget.btnAsigRev.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigRev.setText("Asignacion de Revision ")
            self.dockwidget.btnAsigPad.setFixedSize(250, 51)
            self.dockwidget.btnAsigPad.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigPad.setText("Asignacion de Padron")
            self.dockwidget.btnInterRev.setFixedSize(250, 51)
            self.dockwidget.btnInterRev.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnInterRev.setText("Intermedio Revision")
            self.dockwidget.btnInterPad.setFixedSize(250, 51)
            self.dockwidget.btnInterPad.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnInterPad.setText("intermedario Padron")
            self.dockwidget.btnAdminUsers.setFixedSize(250, 51)
            self.dockwidget.btnAdminUsers.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAdminUsers.setText("Usuarios")
            
            self.dockwidget.setFixedSize(250,1000)
            print(self.i)
        elif self.i == 1:
            self.i = 0
            self.dockwidget.btnConsulta.setFixedSize(121, 51)
            self.dockwidget.btnConsulta.setText("")
            self.dockwidget.btnConsulta.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnDibujo.setFixedSize(121, 51)
            self.dockwidget.btnDibujo.setText("")
            self.dockwidget.btnDibujo.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnEliminar.setFixedSize(121, 51)
            self.dockwidget.btnEliminar.setText("")
            self.dockwidget.btnEliminar.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnTopologia.setFixedSize(121, 51)
            self.dockwidget.btnTopologia.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnTopologia.setText("")
            self.dockwidget.btnFusDiv.setFixedSize(121, 51)
            self.dockwidget.btnFusDiv.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnFusDiv.setText("")
            self.dockwidget.btnCargaMasiva.setFixedSize(121, 51)
            self.dockwidget.btnCargaMasiva.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnCargaMasiva.setText("")
            self.dockwidget.btnAsigCampo.setFixedSize(121, 51)
            self.dockwidget.btnAsigCampo.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigCampo.setText("")
            self.dockwidget.btnAsigRev.setFixedSize(121, 51)
            self.dockwidget.btnAsigRev.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigRev.setText("")
            self.dockwidget.btnAsigPad.setFixedSize(121, 51)
            self.dockwidget.btnAsigPad.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAsigPad.setText("")
            self.dockwidget.btnInterRev.setFixedSize(121, 51)
            self.dockwidget.btnInterRev.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnInterRev.setText("")
            self.dockwidget.btnInterPad.setFixedSize(121, 51)
            self.dockwidget.btnInterPad.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnInterPad.setText("")
            self.dockwidget.btnAdminUsers.setFixedSize(121, 51)
            self.dockwidget.btnAdminUsers.setStyleSheet("QPushButton{\nbackground : rgb(174, 116, 0);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton::hover{\nbackground : rgb(104, 69, 13);\ncolor : rgb(255, 255, 255);\nborder-radius : 4px;\n}\nQPushButton:disabled {\nbackground: rgb(217, 217, 217)\n}font-size:18px;font-family:Times New Roman;")
            self.dockwidget.btnAdminUsers.setText("")
            self.dockwidget.setFixedSize(121,1000)
            print(self.i)


    def comproveRoles(self):

        # ------------ PRUEBA PARA DESHABILITAR LOS BOTONES -------
        
        self.dockwidget.btnConsulta.setEnabled(False)
        self.dockwidget.btnDibujo.setEnabled(False)
        self.dockwidget.btnEliminar.setEnabled(False)
        self.dockwidget.btnTopologia.setEnabled(False)
        self.dockwidget.btnFusDiv.setEnabled(False)
        self.dockwidget.btnCargaMasiva.setEnabled(False)
        self.dockwidget.btnAsigCampo.setEnabled(False)
        self.dockwidget.btnAsigRev.setEnabled(False)
        self.dockwidget.btnAsigPad.setEnabled(False)
        self.dockwidget.btnInterPad.setEnabled(False)
        self.dockwidget.btnInterRev.setEnabled(False)
        self.dockwidget.btnAdminUsers.setEnabled(False)

    #--------MEOTOD QUE COMPRUEBA LAS VERIIFCACIONES DE LOS BOTONES
    def asignActionsByRoles(self, iface):
        var = QSettings()
        if var.value('logeado') == 'True':
            response = self.consumeWSGeneral(self.CFG.url_permisos)
            
            for rol in response["roles"]:
                if rol == 'CONSULTA':
                    self.dockwidget.btnConsulta.setEnabled(True)
                if rol == 'DIBUJO':
                    self.dockwidget.btnDibujo.setEnabled(True)
                if rol == 'ELIMINAR':
                    self.dockwidget.btnEliminar.setEnabled(True)
                if rol == 'TOPOLOGIA':
                    self.dockwidget.btnTopologia.setEnabled(True)
                if rol == 'FUSION_SUBDIVISION':
                    self.dockwidget.btnFusDiv.setEnabled(True)
                if rol == 'CARGA_MASIVA':
                    self.dockwidget.btnCargaMasiva.setEnabled(True)
                if rol == 'ASIGNACION_CAMPO':
                    self.dockwidget.btnAsigCampo.setEnabled(True)
                if rol == 'ASIGNACION_REVISION':
                    self.dockwidget.btnAsigRev.setEnabled(True)
                if rol == 'ASIGNACION_PADRON':
                    self.dockwidget.btnAsigPad.setEnabled(True)
                if rol == 'INTERMEDIO_REVISION':
                    self.dockwidget.btnInterRev.setEnabled(True)
                if rol == 'INTERMEDIO_PADRON':
                    self.dockwidget.btnInterPad.setEnabled(True)
                if rol == 'ADMIN_USERS':
                    self.dockwidget.btnAdminUsers.setEnabled(True)
        else:
            self.comproveRoles()
#------------------ no se hace nada con este metodo -----------------------------------
    def borrar (self):

        # valida si ya se ha agregado el grupo
        root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup('consulta')
        if group is None:

            root = QgsProject.instance().layerTreeRoot() 
            root.addGroup('consulta')
            root.addGroup('referencia') 

        # nuevaCapa = QgsVectorLayer(QSettings().value('sAreasInscritas'), 'areas_inscritas', 'memory')

        listNC = []
        listNC.append(QgsVectorLayer(QSettings().value('sAreasInscritas'), 'areas_inscritas', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sCvesVert'), 'cves_verticales', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sVert'), 'verticales', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sHoriNum'), 'horizontales.num', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sHoriGeom'), 'horizontales.geom', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sConst'), 'construcciones', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sPredNum'), 'predios.num', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sPredGeom'), 'predios.geom', 'memory'))
        listNC.append(QgsVectorLayer(QSettings().value('sManzana'), 'manzana', 'memory'))

        root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup('consulta')

        for l in listNC:
            
            self.UTI.formatoCapa(l.name(), l)

            QgsProject.instance().addMapLayers([l], False)

            capaArbol = QgsLayerTreeLayer(l)
            group.insertChildNode(0, capaArbol)

    def irAAsignaTareas(self):

        # Asignacion de tareas
        self.AST = AsignaTareas.AsignaTareas(iface)
        self.AST.CFG = self.CFG
        self.AST.UTI = self.UTI

        self.AST.run() 
    def irAConsulta(self):

        self.ACA.CFG = self.CFG
        self.ACA.UTI = self.UTI
        self.ACA.DFS = self.DFS
        self.ACA.DBJ = self.ACA
        self.ACA.ELM = self.ELM
        self.ACA.DFS = self.DFS
        self.ACA.TPG = self.TPG
        self.ACA.CMS = self.CMS

        self.ACA.run()

    def irADibujo(self):

        self.DBJ.CFG = self.CFG
        self.DBJ.UTI = self.UTI
        self.DBJ.DFS = self.DFS
        self.DBJ.ACA = self.ACA
        self.DBJ.ELM = self.ELM
        self.DBJ.DFS = self.DFS
        self.DBJ.TPG = self.TPG

        self.DBJ.run()

#------------------------------------------------------------------------

    def irAEliminar(self):

        self.ELM.CFG = self.CFG
        self.ELM.UTI = self.UTI
        self.ELM.DFS = self.DFS
        self.ELM.DBJ = self.DBJ
        self.ELM.ACA = self.ACA
        self.ELM.DFS = self.DFS
        self.ELM.TPG = self.TPG

        self.ELM.run()

#-----------------------------------------------------------------------------

    def irATopologia(self):

        #self.TPG.CFG = self.CFG
        #self.TPG.UTI = self.UTI
        self.TPG.DFS = self.DFS
        self.TPG.DBJ = self.DBJ
        self.TPG.ELM = self.ELM
        self.TPG.DFS = self.DFS
        self.TPG.CMS = self.CMS

        self.TPG.run()

#--------------------------------------------------------------------------

    def irAFusionDivision(self):

        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG

        self.DFS.run()

##############################################################################

    def irACargaMasiva(self):

        self.CMS.UTI = self.UTI
        self.CMS.ACA = self.ACA

        self.CMS.run()

##############################################################################

    def irASubirShape(self):
        self.SHP.UTI = self.UTI
        self.SHP.ACA = self.ACA
        self.SHP.CFG = self.CFG

        self.SHP.run()



###############################################################################

    def irAAsignacionCampo(self):

        self.ASCM.CFG = self.CFG
        self.ASCM.ACA = self.ACA

        self.ASCM.run()

####################################################################################

    def irAAsignacionRevision(self):

        self.ASRV.CFG = self.CFG
        self.ASRV.ACA = self.ACA

        self.ASRV.run()

####################################################################################

    def irAAsignacionPadron(self):

        self.ASPA.CFG = self.CFG
        self.ASPA.ACA = self.ACA

        self.ASPA.run()

####################################################################################

    def irAIntermediarioPad(self):

        self.INTEPAD.CFG = self.CFG
        self.INTEPAD.ACA = self.ACA
        self.INTEPAD.UTI = self.UTI

        self.INTEPAD.run()

####################################################################################

    def irAIntermediarioRev(self):

        self.INTEREV.CFG = self.CFG
        self.INTEREV.ACA = self.ACA
        self.INTEREV.UTI = self.UTI

        self.INTEREV.run()

####################################################################################
    
    def irAAdminUsuarios(self):

        #Administracion de usuarios
        self.ADU = AdminUsers.AdminUsers(iface)

        self.ADU.CFG = self.CFG
        self.ADU.UTI = self.UTI

        self.ADU.run()


    # --- S E R V I C I O S   W E B  ---

    # - consume ws 
    def consumeWSGeneral(self, url_cons = ""):

        url = url_cons
        data = ""

        try:
            self.headers['Authorization'] = self.UTI.obtenerToken()
            #jwt.decode(self.UTI.obtenerToken(), "JWT", algorithms=['RS256'])
            #print(self.UTI.obtenerToken().encode().decode("RS256"))
            #var = QSettings()
            #token = var.value('token')

        # se decodifica el token (JWT)
            #decode = jwt.decode(token, verify=False)
            #print(decode)
            response = requests.get(url, headers = self.headers)
        except requests.exceptions.RequestException as e:
            self.UTI.mostrarAlerta("Error de servidor, 'consumeWSGeneral(Master)' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return

        if response.status_code == 200:
            data = response.content
            
        elif response.status_code == 403:
            self.UTI.mostrarAlerta('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Sistema Cartográfico")
            return None
           
        else:
            self.UTI.mostrarAlerta('Error en peticion "consumeWSGeneral(Master)":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return
        #print(json.loads(data.decode("utf-8")))
        return json.loads(data.decode("utf-8"))


  
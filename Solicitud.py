# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Solicitud
                                 A QGIS plugin
 Solicitud
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Solicitud
        email                : Solicitud
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QAction, QApplication, QFileDialog, QToolBox,  QMessageBox
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Solicitud_dialog import SolicitudDialog
import os.path
import os.path, requests, json
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem
from PyQt5.QtWidgets import QAction, QMessageBox
from PyQt5 import QtWidgets
import jwt
from .funciones.folio.Folio import Folio
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from .funciones.configuracion import Configuracion
from .funciones.utilidades import utilidades
class Solicitud:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, CFG = None, UTI = None, parent=None, nuevo = False):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.CFG = Configuracion.Configuracion()
        self.UTI = utilidades.Utilidad()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Solicitud_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Solicitud')
        self.dlg = SolicitudDialog(parent = iface.mainWindow())
       
        self.dlg.twOperaciones_6.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.dlg.btnAlta.clicked.connect(self.altas)
        
        self.dlg.btnConsulta.clicked.connect(self.consulta) 
        self.dlg.btnSalir.clicked.connect(self.adios) 
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.dlg.twOperaciones_6.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.dlg.twOperaciones_6.hideColumn(1)
        self.dlg.twOperaciones_7.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.dlg.twOperaciones_7.hideColumn(1)
        self.dlg.btnAlta.setEnabled(True)
        self.dlg.btnModi.setEnabled(False)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnGrabar.setEnabled(False)
        self.dlg.btnCancelar.setEnabled(False)
        self.dlg.btnSalir.setEnabled(True)
        self.nuevo = nuevo
        self.CFG = CFG
        self.UTI = UTI
        self.headers = {'Content-Type': 'application/json'}
        self.usuarios = []
        self.roles = []
        envio = {}
        self.first_start = None
        self.dlg.btnModi.clicked.connect(self.Modi)
        self.dlg.lineEdit.setVisible(False)
        self.dlg.lineEdit_2.setVisible(False)
        self.dlg.lineEdit_3.setVisible(False)
        self.i = 0
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Solicitud', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Master/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Solicitud'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        #result = self.dlg.exec_()
        # See if OK was pressed
        #if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #pass

    def altas(self):
        self.i  = 1
        self.dlg.btnAlta.setEnabled(False)
        self.dlg.btnModi.setEnabled(False)
        self.dlg.btnConsulta.setEnabled(False)
        self.dlg.btnGrabar.setEnabled(True)
        self.dlg.btnCancelar.setEnabled(True)
        self.dlg.btnSalir.setEnabled(False)
        self.tablitas()
        self.dlg.twOperaciones_6.clicked.connect(self.traerOperaciones)
        self.dlg.btnBrowse_7.clicked.connect(self.traerDatosPredio)
        self.dlg.btnGrabar.clicked.connect(self.grabar)
        self.dlg.dateEdit_4.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dlg.twOperaciones_8.clicked.connect(self.ExtraerDatos)
        self.dlg.btnCancelar.clicked.connect(self.cancelar)
    def cancelar(self):
        if self.i == 1:
            mensaje = "Â¿Cancelar el Alta? "
            respuesta = QMessageBox.question(iface.mainWindow(), "Cancelar", mensaje, QMessageBox.Yes, QMessageBox.No)

            if respuesta == QMessageBox.Yes:
                self.dlg.btnAlta.setEnabled(True)
                self.dlg.btnModi.setEnabled(False)
                self.dlg.btnConsulta.setEnabled(True)
                self.dlg.btnGrabar.setEnabled(False)
                self.dlg.btnCancelar.setEnabled(False)
                self.dlg.btnSalir.setEnabled(True)
                self.dlg.twOperaciones_6.clearContents()
                self.dlg.twOperaciones_6.setRowCount(0)
                self.dlg.twOperaciones_7.clearContents()
                self.dlg.twOperaciones_7.setRowCount(0)
                self.dlg.twOperaciones_8.clearContents()
                self.dlg.twOperaciones_8.setRowCount(0)
                self.dlg.leBusqueda_3.setText('')
                self.dlg.lineEdit_14.setText('')
                self.dlg.lineEdit_15.setText('')
                self.dlg.lineEdit_16.setText('')
                self.dlg.lineEdit_17.setText('')
                self.dlg.lineEdit_18.setText('')
                self.dlg.lineEdit_19.setText('')
                self.dlg.lineEdit_20.setText('')
                self.dlg.lineEdit_21.setText('')
                self.dlg.lineEdit_22.setText('')
                self.dlg.lineEdit_29.setText('')
                self.dlg.lineEdit_33.setText('')
                self.dlg.lineEdit_34.setText('')
                self.dlg.lineEdit_35.setText('')
                self.dlg.lineEdit_36.setText('')
                self.dlg.lineEdit_37.setText('')
                self.dlg.lineEdit_38.setText('')
                self.dlg.lineEdit_39.setText('')
                self.dlg.lineEdit_40.setText('')
                self.i = 0
    def grabar(self):
        #allRows = self.dlg.twOperaciones_7.rowCount()

        # inicializamos variable (lista) donde se agregan el texto de los registros activos por check
        #self._seleccionados = []

        # se itera los registros del qtablewidget
        #for row in range(0, allRows):

            # se obtiene el item segun la iteracion
            # el registro (row) en la posicion 0 (columna 0) 
            # en este ejmplo solo se cuenta con una columna por eso la posicion 0
            #item = self.dlg.twOperaciones_7.item(row, 0)
            #item3 = self.dlg.twOperaciones_7.item(row, 1)

            # se verifica que el checkbox este seleccionado
            #if item.checkState() == 2: # True
                #self._seleccionados.append(item3.text())
        row_2 = self.dlg.twOperaciones_6.currentRow()
        rol = self.dlg.twOperaciones_6.item(row_2,1)
        if rol == None:
            self.createAlert('Seleccione un tramite y espesifique su documentacion', QMessageBox().Critical, "Solicitud")
            return
        if self.dlg.lineEdit_14.text() == '' or self.dlg.lineEdit_21.text() == '' or self.dlg.lineEdit_22.text() == '':
            self.createAlert('LLene todos los campos obligatorios', QMessageBox().Critical, "Solicitud")
        else:
            envio = {}
            envio['solicitante'] = self.dlg.lineEdit_14.text()
            envio['calle'] = self.dlg.lineEdit_16.text()  
            envio["fraccionamiento"] = self.dlg.lineEdit_17.text()
            envio["colonia"] = self.dlg.lineEdit_18.text()
            envio["localidad"] = self.dlg.lineEdit_19.text()
            envio["municipio"] = self.dlg.lineEdit_20.text()
            envio["telefono"] = self.dlg.lineEdit_21.text()
            envio["correo"] = self.dlg.lineEdit_22.text()
            envio["cveCat"] = self.dlg.lineEdit_33.text()
            envio["idTramite"] = rol.text()
            print(envio)
            Guardar = self.guardarSolicitud(nuevo = self.nuevo, url = (self.CFG.urlGuardarTramites), envio = envio)
            mensaje = "Â¿Datos correctos? "
            respuesta = QMessageBox.question(iface.mainWindow(), "Cancelar", mensaje, QMessageBox.Yes, QMessageBox.No)
            if respuesta == QMessageBox.Yes:
                self.createAlert('Este es su nÃºmero de folio:' + str(Guardar), QMessageBox().Information)
                return
       
            



    def consulta(self):
        self.i = 2
        self.dlg.obj = Folio(self.iface, CFG = self.CFG, UTI = self.UTI, nuevo = True)
        self.dlg.obj.run()
        #print(self.dlg.obj.recuperar)
        rec = self.dlg.obj.recuperar
        if not rec:
             return

                # mostrar rec en tabla
   
        self.dlg.lineEdit_14.setText(str(rec['solicita_nombre']))
        self.dlg.lineEdit_16.setText(str(rec['solicita_calle']))
        self.dlg.lineEdit_17.setText(str(rec['solicita_fraccionamiento']))
        self.dlg.lineEdit_18.setText(str(rec['solicita_colonia']))
        self.dlg.lineEdit_19.setText(str(rec['solicita_localidad']))
        self.dlg.lineEdit_20.setText(str(rec['solicita_municipio']))
        self.dlg.lineEdit_21.setText(str(rec['solicita_tel']))
        self.dlg.lineEdit_22.setText(str(rec['solicita_correo']))
        self.dlg.lineEdit_13.setText(str(rec['folio_inicio']))
        self.dlg.lineEdit_29.setText(str(rec['propietario']))
        self.dlg.lineEdit_33.setText(str(rec['clave_catastral']))
        self.dlg.lineEdit.setText(str(rec['fecha_solcitud']))
        self.dlg.lineEdit_2.setText(str(rec['idTramite']))
        self.dlg.lineEdit_3.setText(str(rec['id']))
        self.dlg.btnAlta.setEnabled(False)
        self.dlg.btnModi.setEnabled(True)
        self.dlg.btnConsulta.setEnabled(False)
        self.dlg.btnGrabar.setEnabled(False)
        self.dlg.btnCancelar.setEnabled(True)
        self.dlg.btnSalir.setEnabled(False)
        self.dlg.btnCancelar.clicked.connect(self.cancelar2)
        self.tablitas()
        self.dlg.twOperaciones_6.clicked.connect(self.traerOperaciones)
        self.dlg.twOperaciones_8.clicked.connect(self.ExtraerDatos)
        self.dlg.btnBrowse_7.clicked.connect(self.traerDatosPredio)
    def Modi(self):
        row_2 = self.dlg.twOperaciones_6.currentRow()
        rol = self.dlg.twOperaciones_6.item(row_2,1)
        envio = {}
        envio['fecha_solcitud'] = self.dlg.lineEdit.text()
        envio['clave_catastral'] = self.dlg.lineEdit_33.text()
        envio['solicita_localidad'] = self.dlg.lineEdit_19.text()
        envio['folio_inicio'] = self.dlg.lineEdit_13.text()
        envio['propietario'] = self.dlg.lineEdit_29.text()
        envio['solicita_nombre'] = self.dlg.lineEdit_14.text()
        if rol == None:
            envio['idTramite'] = self.dlg.lineEdit_2.text()
            print(self.dlg.lineEdit_2.text())
        else:
            envio['idTramite'] = rol.text()
            print(rol.text())
        envio['solicita_tel'] = self.dlg.lineEdit_21.text()
        envio['solicita_municipio'] = self.dlg.lineEdit_20.text()
        envio['id'] = self.dlg.lineEdit_3.text()
        envio['solicita_colonia'] = self.dlg.lineEdit_18.text()
        envio['solicita_fraccionamiento'] = self.dlg.lineEdit_17.text()
        envio['solicita_correo'] = self.dlg.lineEdit_22.text()
        envio['solicita_calle'] = self.dlg.lineEdit_16.text()
        resp = self.editarSolicitud(nuevo = self.nuevo, url = (self.CFG.urlActualizarTramite), envio = envio)
        #print(resp)
        if resp == 'OK':
            self.createAlert('Datos Modificados', QMessageBox().Information)
        self.dlg.btnAlta.setEnabled(True)
        self.dlg.btnModi.setEnabled(False)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnGrabar.setEnabled(False)
        self.dlg.btnCancelar.setEnabled(False)
        self.dlg.btnSalir.setEnabled(True)
        self.dlg.twOperaciones_6.clearContents()
        self.dlg.twOperaciones_6.setRowCount(0)
        self.dlg.twOperaciones_7.clearContents()
        self.dlg.twOperaciones_7.setRowCount(0)
        self.dlg.twOperaciones_8.clearContents()
        self.dlg.twOperaciones_8.setRowCount(0)
        self.dlg.leBusqueda_3.setText('')
        self.dlg.lineEdit_14.setText('')
        self.dlg.lineEdit_15.setText('')
        self.dlg.lineEdit_16.setText('')
        self.dlg.lineEdit_17.setText('')
        self.dlg.lineEdit_18.setText('')
        self.dlg.lineEdit_19.setText('')
        self.dlg.lineEdit_20.setText('')
        self.dlg.lineEdit_21.setText('')
        self.dlg.lineEdit_22.setText('')
        self.dlg.lineEdit_29.setText('')
        self.dlg.lineEdit_33.setText('')
        self.dlg.lineEdit_34.setText('')
        self.dlg.lineEdit_35.setText('')
        self.dlg.lineEdit_36.setText('')
        self.dlg.lineEdit_37.setText('')
        self.dlg.lineEdit_38.setText('')
        self.dlg.lineEdit_39.setText('')
        self.dlg.lineEdit_40.setText('')
    def cancelar2(self):
        if self.i == 2:
            mensaje = "Cancelar los Cambios"
            respuesta = QMessageBox.question(iface.mainWindow(), "Cancelar", mensaje, QMessageBox.Yes, QMessageBox.No)

            if respuesta == QMessageBox.Yes:
                self.dlg.btnAlta.setEnabled(True)
                self.dlg.btnModi.setEnabled(False)
                self.dlg.btnConsulta.setEnabled(True)
                self.dlg.btnGrabar.setEnabled(False)
                self.dlg.btnCancelar.setEnabled(False)
                self.dlg.btnSalir.setEnabled(True)
                self.dlg.twOperaciones_6.clearContents()
                self.dlg.twOperaciones_6.setRowCount(0)
                self.dlg.twOperaciones_7.clearContents()
                self.dlg.twOperaciones_7.setRowCount(0)
                self.dlg.twOperaciones_8.clearContents()
                self.dlg.twOperaciones_8.setRowCount(0)
                self.dlg.leBusqueda_3.setText('')
                self.dlg.lineEdit_14.setText('')
                self.dlg.lineEdit_15.setText('')
                self.dlg.lineEdit_16.setText('')
                self.dlg.lineEdit_17.setText('')
                self.dlg.lineEdit_18.setText('')
                self.dlg.lineEdit_19.setText('')
                self.dlg.lineEdit_20.setText('')
                self.dlg.lineEdit_21.setText('')
                self.dlg.lineEdit_22.setText('')
                self.dlg.lineEdit_29.setText('')
                self.dlg.lineEdit_33.setText('')
                self.dlg.lineEdit_34.setText('')
                self.dlg.lineEdit_35.setText('')
                self.dlg.lineEdit_36.setText('')
                self.dlg.lineEdit_37.setText('')
                self.dlg.lineEdit_38.setText('')
                self.dlg.lineEdit_39.setText('')
                self.dlg.lineEdit_40.setText('')
                self.i = 0
    def tablitas(self):
        '''self.roles = ['1.- solicitud de servicios catastrales', '2.- acreditar la propiedad', '3.- Formato de traslado de dominio','4.- Resivo de pago de traslado de dominio','5.- Resivo de pago de impuesto predial','6.- Acreditar el interes juridico','7.- Copia de orden de pago de derechos por el servicio']
        #print(self.roles)
        if not self.roles:
             return

                # mostrar usuarios en tabla
        self.dlg.twOperaciones_7.setRowCount(len(self.roles))
        for x in range(0, len(self.roles)):

           
            check = QTableWidgetItem'4(self.roles[x])
            check.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            if len(self.roles[x]) > 1:
                check.setCheckState(QtCore.Qt.Unchecked)
            else:
                check.setCheckState(QtCore.Qt.Checked)
            #self.dlg.twOperaciones_2.setItem(x,0,check)
            
            self.dlg.twOperaciones_7.setItem(x, 0, check)'''
        self.dlg.twOperaciones_6.clearContents()
        self.dlg.twOperaciones_6.setRowCount(0)
        self.usuarios = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllTramites)

        if not self.usuarios:
             return

                # mostrar usuarios en tabla
        self.dlg.twOperaciones_6.setRowCount(len(self.usuarios))
        for x in range(0, len(self.usuarios)):
            
            item2 = QTableWidgetItem(self.usuarios[x]['descripcion'])
            item3 = QTableWidgetItem(str(self.usuarios[x]['id']))
            self.dlg.twOperaciones_6.setItem(x, 0, item2)
            self.dlg.twOperaciones_6.setItem(x, 1, item3)

    def traerOperaciones(self):
        #self.createAlert("Si conecto", QMessageBox().Information, "Si se hizo")
        self.dlg.twOperaciones_7.clearContents()
        self.dlg.twOperaciones_7.setRowCount(0)



        row = self.dlg.twOperaciones_6.currentRow()
        rol = self.dlg.twOperaciones_6.item(row,1)

        #print('---------------')
        #print(rol.text())
        #print(self.CFG.url_AU_getAllRole + rol.text())
        #print('---------------')


        self.roles = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllRequisitos + rol.text())
        #print(self.roles)
        if not self.roles:
             return

                # mostrar usuarios en tabla
        self.dlg.twOperaciones_7.setRowCount(len(self.roles))
        for x in range(0, len(self.roles)):
            

           
            check = QTableWidgetItem(self.roles[x]['descripcion'])

            #check = QTableWidgetItem(self.roles[x]['tipo'])
            check.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            if self.roles[x]['tipo'] == 'UNO' or self.roles[x]['tipo'] == 'DOS' or self.roles[x]['tipo'] == 'TRE' or self.roles[x]['tipo'] == 'CUA' or self.roles[x]['tipo'] == 'CIN' :
                check.setCheckState(QtCore.Qt.Unchecked)
            else:
                check.setCheckState(QtCore.Qt.Checked)

            #self.dlg.twOperaciones_7.setItem(x,0,check)
            
            self.dlg.twOperaciones_7.setItem(x, 0, check)
            self.dlg.twOperaciones_7.setItem(x, 1, QtWidgets.QTableWidgetItem(str(self.roles[x]['id'])))
    def traerDatosPredio(self):
        self.datos = self.dlg.leBusqueda_3.text()

        envio = {}
        envio['cveCat'] = self.datos
        envio['propietario'] = self.datos
        resp = self.guardarSolicitud(nuevo = self.nuevo, url = (self.CFG.url_AU_getAllDatospre), envio = envio)
        #print(resp)
        self.dlg.twOperaciones_8.clearContents()
        self.dlg.twOperaciones_8.setRowCount(0)
        if resp == []:
            self.createAlert('Ingrese una clave correcta o un nombre correcto', QMessageBox().Critical, "Solicitud")

                # mostrar usuarios en tabla

        self.dlg.twOperaciones_8.setRowCount(len(resp))
        for x in range(0, len(resp)):
            
            item2 = QTableWidgetItem(str(resp[x]['superConstruccion']))
            item3 = QTableWidgetItem(str(resp[x]['numext']))
            item4 = QTableWidgetItem(str(resp[x]['superTer']))
            item5 = QTableWidgetItem(str(resp[x]['propietario']))
            item6 = QTableWidgetItem(str(resp[x]['cveCat']))
            item7 = QTableWidgetItem(str(resp[x]['id']))
            item8 = QTableWidgetItem(str(resp[x]['colonia']))
            self.dlg.twOperaciones_8.setItem(x,0, item2)
            self.dlg.twOperaciones_8.setItem(x,1, item3)
            self.dlg.twOperaciones_8.setItem(x,2, item4)
            self.dlg.twOperaciones_8.setItem(x,3, item5)
            self.dlg.twOperaciones_8.setItem(x,4, item6)
            self.dlg.twOperaciones_8.setItem(x,5, item7)
            self.dlg.twOperaciones_8.setItem(x,6, item8)

      
        
        #self.dlg.accept()       
        #print(envio)

    def ExtraerDatos(self):
        if self.dlg.twOperaciones_8.rowCount() > 0:


            row_2 = self.dlg.twOperaciones_8.currentRow()
            rol = self.dlg.twOperaciones_8.item(row_2,0)
            rol1 = self.dlg.twOperaciones_8.item(row_2,1)
            rol2 = self.dlg.twOperaciones_8.item(row_2,2)
            rol3 = self.dlg.twOperaciones_8.item(row_2,3)
            rol4 = self.dlg.twOperaciones_8.item(row_2,4)
            rol5 = self.dlg.twOperaciones_8.item(row_2,6)
            # obtenemos el numero total de registros en el qtablewidget
            print(rol.text())
            self.dlg.lineEdit_29.setText(rol3.text())
            self.dlg.lineEdit_33.setText(rol4.text())
            self.dlg.lineEdit_34.setText(rol2.text())
            self.dlg.lineEdit_35.setText(rol.text())
            self.dlg.lineEdit_36.setText(rol1.text())
            #self.dlg.lineEdit_37.setText(rol3.text())
            self.dlg.lineEdit_38.setText(rol5.text())
            #self.dlg.lineEdit_39.setText(rol3.text())
            #self.dlg.lineEdit_40.setText(rol3.text())
    def editarSolicitud(self, nuevo = False, url = '', envio = {}):
        data = ""
        
        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(envio)
        
        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()

            if nuevo:
                response = requests.put(url, headers = self.headers, data = jsonEnv)
           

                # ejemplo con put, url, header y body o datos a enviar
               

        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'editarSolicitud()' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return str(e)

        if response.status_code == 403:
            self.createAlert('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Operaciones")
            return None
           
        elif response.status_code >= 300:
            self.createAlert('Error en peticion "editarSolicitud()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return response.text

        return 'OK'
    def guardarSolicitud(self, nuevo = False, url = '', envio = {}):
        data = ""
        
        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(envio)
        
        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()
            
            if nuevo:
                response = requests.post(url, headers = self.headers, data = jsonEnv)
                data = response.content
                # ejemplo con put, url, header y body o datos a enviar
               

        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'guardarSolicitud()' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return str(e)

        if response.status_code == 403:
            self.createAlert('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Operaciones")
            return None
           
        elif response.status_code >= 300:
            self.createAlert('Error en peticion "guardarSolicitud()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return response.text

        return json.loads(data)

    def consumeWSGeneral(self, url_cons = ""):

        url = url_cons
        data = ""

        try:
            self.headers['Authorization'] = self.UTI.obtenerToken()
            response = requests.get(url, headers = self.headers)
        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'consumeWSGeneral()'" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return

        if response.status_code == 200:
            data = response.content
                   
        else:
            self.createAlert('Error en peticion "consumeWSGeneral()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return

        return json.loads(data)
    def createAlert(self, mensaje, icono = QMessageBox().Critical, titulo = 'Operaciones'):
        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()
    def adios(self):
        self.dlg.close()
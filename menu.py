# -*- coding: utf-8 -*-
"""
/***************************************************************************
 menu
                                 A QGIS plugin
 menu
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by menu
        email                : menu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                             dlg                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QRectF
from qgis.PyQt.QtGui import QIcon,  QCursor, QPixmap, QStandardItemModel, QIntValidator
from qgis.PyQt.QtWidgets import QAction, QApplication, QFileDialog, QToolBox,  QMessageBox
from PyQt5 import QtGui

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .menu_dialog import menuDialog
from .funciones.generar_documentos.cert_cve_catastral_dialog import CertCveCatastralDialog
from .funciones.generar_documentos.cert_cve_catastral import CertCveCatastral
from .funciones.generar_documentos.cert_cve_valor import CertCveValor
from .funciones.generar_documentos.cert_aportes import CertAportes
from .funciones.generar_documentos.const_identificacion import ConstIdentificacion
from .funciones.generar_documentos.gen_doc_calvecat import gen_doc_calvecat
from .funciones.consulta.ActualizacionCatastralV3 import ActualizacionCatastralV3
import os.path
from qgis.utils import iface
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QVBoxLayout, QLabel, QToolBox, QPushButton, QTextEdit, QLineEdit
from PyQt5.QtGui import QColor
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QRectF
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QRegExp
from qgis.PyQt.QtGui import QIcon, QRegExpValidator
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog

#from ..estatusClave import EstatusClaves_dialog
import os.path

from PyQt5.QtCore import  Qt, QSize, QDir, QDate
from PyQt5.QtGui import QColor, QCursor, QPixmap, QStandardItemModel
from PyQt5.QtWidgets import  QTableWidgetItem, QListView, QCompleter
from PyQt5 import QtWidgets
# Initialize Qt resources from file resources.py
from qgis.core import *
from qgis.utils import iface
from qgis.gui import QgsLayerTreeView, QgsVertexMarker
from PyQt5 import QtGui
# Import the code for the DockWidget
import os, json, requests, datetime, qgis.core
from datetime import datetime as dt, date
from osgeo import ogr, osr
from .funciones.configuracion import Configuracion
from .funciones.utilidades import utilidades
from .funciones.fusiondivision import DivisionFusion
from .funciones.consulta import ActualizacionCatastralV3
from .funciones.consulta.Cedula_MainWindow import CedulaMainWindow
import os.path
import json
import requests
import re
from qgis.core import *
#from ..busquedas.periodo.periodo import predio

#from ..busquedas.busqueda_catastral import busqueda_Catastral
#from ..busquedas.busqueda_direccion import busqueda_direccion

#from ..generar_documentos.cert_cve_catastral import CertCveCatastral
#from ..generar_documentos.cert_cve_valor import CertCveValor
#from ..generar_documentos.cert_aportes import CertAportes
#from ..generar_documentos.const_identificacion import ConstIdentificacion
#from ..generar_documentos.gen_doc_calvecat import gen_doc_calvecat
#from .planoManzanero import PlanoManzanero



class menu:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # Save reference to the QGIS interface
        self.iface = iface

        self.CFG = Configuracion.Configuracion()
        self.UTI = utilidades.Utilidad()

        self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface)
        self.ACA.UTI = self.UTI

        self.UTI.CFG = self.CFG
        self.UTI.ACA = self.ACA
        self.DFS = DivisionFusion.DivisionFusion(iface, self.ACA)
        self.DBJ = None
        self.ELM = None
        
        self.TPG = None
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'menu_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&menu')
        self.dlg = menuDialog(parent = iface.mainWindow())
        #self.dlg.toolBox.currentChanged.connect(self.cambio)
        an = self.dlg.width()
        al = self.dlg.height()
        self.i = 0
        self.canvas = iface.mapCanvas()
        self.abrePredio2 = False
        self.abrePredio = False
        self.directorioAGuardar = None
        self.cve_catastral = None
        self.abrePredio3 = False
        self.directorioAGuardar2 = None
        self.cve_catastral2 = None
        self.abrePredio4 = False
        self.directorioAGuardar4 = None
        self.cve_catastral4 = None
        self.abrePredio5 = False
        self.directorioAGuardar5 = None
        self.cve_catastral5 = None
        self.abrePredio6 = False
        self.directorioAGuardar6 = None
        self.cve_catastral6 = None
        self.zona = []
        self.manzana = []
        # eventos
        self.dlg.btnBrowse_5.clicked.connect(self.fun19)
        self.dlg.btnGenerar_5.clicked.connect(self.fun20)
        self.dlg.btnSeleccionar_5.clicked.connect(self.fun21)

        self.dlg.fldCveCat_5.textChanged.connect(self.fun22)

        #validaciones
        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_5.setValidator(val)

        self.onlyInt = QIntValidator()
        self.dlg.fldNomfolio.setValidator(self.onlyInt)
        self.onlyInt = QIntValidator()
        self.dlg.fldCodPostal.setValidator(self.onlyInt)
        self.dlg.btnBrowse_4.clicked.connect(self.fun15)
        self.dlg.btnGenerar_4.clicked.connect(self.fun16)
        self.dlg.btnSeleccionar_4.clicked.connect(self.fun17)
        

        self.dlg.fldCveCat_4.textChanged.connect(self.fun18)

        #validaciones
        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_4.setValidator(val)

        rx = QRegExp("[a-zA-ZÀ-ÿ ]{255}")
        val = QRegExpValidator(rx)
        self.dlg.fldNomSolic.setValidator(val)

        self.onlyInt = QIntValidator()
        self.dlg.fldNumSolucitud.setValidator(self.onlyInt)

        self.dlg.dateEdit_2.setDate(QDate.currentDate())
        self.dlg.btnBrowse_3.clicked.connect(self.fun11)
        self.dlg.btnGenerar_3.clicked.connect(self.fun12)
        self.dlg.btnSeleccionar_3.clicked.connect(self.fun13)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat_3.textChanged.connect(self.fun14)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_3.setValidator(val)


        # eventos
        self.dlg.btnBrowse_2.clicked.connect(self.fun7)
        self.dlg.btnGenerar_2.clicked.connect(self.fun8)
        self.dlg.btnSeleccionar_2.clicked.connect(self.fun9)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat_2.textChanged.connect(self.fun10)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_2.setValidator(val)

        
        #eventos
        self.dlg.btnBrowse.clicked.connect(self.fun)
        self.dlg.btnGenerar.clicked.connect(self.fun1)
        self.dlg.btnSeleccionar.clicked.connect(self.fun2)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat.textChanged.connect(self.fun3)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat.setValidator(val)

        self.dlg.btCodnadas.setIcon(QtGui.QIcon(':/plugins/Master/icons/local.ico'))
        self.dlg.btCodnadas.clicked.connect(self.fun6)
        self.dlg.comboSector.currentIndexChanged.connect(self.obtenerManzanasPorSector)
        self.dlg.comboManzana.currentIndexChanged.connect(self.obtenerIdManzana)
        self.dlg.btnAbrirCedula.clicked.connect(self.fun4)
        
        self.cve_cat_len = 16
        self.dlg.lista = {}
        self.cursorRedondo = QCursor(QPixmap(["16 16 3 1",
                                "      c None",
                                ".     c #FF0000",
                                "+     c #FFFFFF",
                                "                ",
                                "       +.+      ",
                                "      ++.++     ",
                                "     +.....+    ",
                                "    +.     .+   ",
                                "   +.   .   .+  ",
                                "  +.    .    .+ ",
                                " ++.    .    .++",
                                " ... ...+... ...",
                                " ++.    .    .++",
                                "  +.    .    .+ ",
                                "   +.   .   .+  ",
                                "   ++.     .+   ",
                                "    ++.....+    ",
                                "      ++.++     ",
                                "       +.+      "]))
        self.dlg.btnBrowse.setIcon(QtGui.QIcon(':/plugins/Master/icons/browse.png'))
        self.dlg.btnBrowse_2.setIcon(QtGui.QIcon(':/plugins/Master/icons/browse.png'))
        self.dlg.btnBrowse_3.setIcon(QtGui.QIcon(':/plugins/Master/icons/browse.png'))
        self.dlg.btnBrowse_4.setIcon(QtGui.QIcon(':/plugins/Master/icons/browse.png'))
        self.dlg.btnBrowse_5.setIcon(QtGui.QIcon(':/plugins/Master/icons/browse.png'))

        self.botones()
        #self.colapsar()    
        #self.colapsar()
       
        self.dlg.mGroupBox_5.collapsedStateChanged.connect(self.colapsar)
        self.dlg.mGroupBox.collapsedStateChanged.connect(self.colapsar1)
        self.dlg.mGroupBox_2.collapsedStateChanged.connect(self.colapsar2)
        self.dlg.mGroupBox_3.collapsedStateChanged.connect(self.colapsar3)
        self.dlg.mGroupBox_4.collapsedStateChanged.connect(self.colapsar4)
        #self.cambio()
        #self.dlg.mdiArea.addSubWindow(self.dlg.subwindow_2)
        #self.dlg.mdiArea.closeAllSubWindows()
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
       
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('menu', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Master/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(

                self.tr(u'&menu'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        
        #self.CCC = CertCveCatastral.obtenerXCapas1(self)
        #self.CCV = CertCveValor.obtenerXCapas2(self)
        #self.CA = CertAportes.obtenerXCapas3(self)
        #self.CI = ConstIdentificacion.obtenerXCapas4(self)
        #self.GDCC = gen_doc_calvecat.obtenerXCapas5(self)

        #el error aqui es que estabas asignando la funcion 'obtenerXCapas' a self.ACA
        #y self.ACA contiene la referencia a la clase
        #self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3.obtenerXCapas(self)
        self.mem_layer = None
        #esto es lo que debes hacer
        #con la referencia hecha (self.ACA == ActualizacionCatastralV3....) solo mandas a llamar el metodo que ocupas
        self.ACA.obtenerXCapas() #-------- como aqui
        self.ACA.vaciarCapa(self.mem_layer)
        #y no le pases self como parametro
        #self.ACA.obtenerXCapas(self) ------- esto es incorrecto
        #porque los metodos de self.ACA ya contienen la refrencia a su propia clase
      
        self.cuerpo = {"incluirGeom": "true", "pagina": None, "bbox": "false", "pin": "false", "geomWKT": None, "epsg": None, "properties": None, "epsgGeomWKT": None, "itemsPagina": None, "nombre": "x"}
        self.headers = {'Content-Type': 'application/json'}
        self.payload = json.dumps(self.cuerpo)

        self.dlg.comboSector.clear()
        #self.dlg.comboLocalidad.clear()
        self.dlg.comboManzana.clear()

        #Inicializacionde IdManzana
        self.idManzana = ' '

        #Modo desarrollor
        self.modoDesarrollo = False
        self.cargaRapida = True
        #01001001020004054011
        #01001001020004027003
        #01001001020004063010
        self.obtenerSectoresPorMunicipio()
        '''for count in range(self.dlg.comboSector.count()):
            #print (self.dlg.comboSector.itemText(count))
            self.zona.append(self.dlg.comboSector.itemText(count))
        for count in range(self.dlg.comboManzana.count()):
            #print (self.dlg.comboManzana.itemText(count))
            self.manzana.append(self.dlg.comboManzana.itemText(count))
        '''
        xMan = QSettings().value('xManzana')
        xPredG = QSettings().value('xPredGeom')
        xPredN = QSettings().value('xPredNum')
        xCon = QSettings().value('xConst')
        xHoriG = QSettings().value('xHoriGeom')
        xHoriN = QSettings().value('xHoriNum')
        xVe = QSettings().value('xVert')
        xCv = QSettings().value('xCvesVert')

        self.xManzana = QgsProject.instance().mapLayer(xMan)
        self.xPredGeom = QgsProject.instance().mapLayer(xPredG)
        self.xPredNum = QgsProject.instance().mapLayer(xPredN)
        self.xConst = QgsProject.instance().mapLayer(xCon)
        self.xHoriGeom = QgsProject.instance().mapLayer(xHoriG)
        self.xHoriNum = QgsProject.instance().mapLayer(xHoriN)
        self.xVert = QgsProject.instance().mapLayer(xVe)
        self.xCvesVert = QgsProject.instance().mapLayer(xCv)
        #self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface, self.zona, self.manzana)

        

        #Asignar eventos de cambio de seleccion
    
        #self.selec()
        

        



        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def colapsar(self):
        #self.dlg.mGroupBox_5.isCollapsed()
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            self.dlg.mGroupBox.setGeometry(11,30,481,169)
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,50,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)


            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
            self.dlg.mGroupBox_5.setFixedSize(481,20)
            #self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
            
        elif self.dlg.mGroupBox_5.isCollapsed() == False:
            if self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,575,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,535,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)

                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            else:
                self.dlg.mGroupBox_2.setGeometry(11,361,481,169)
            self.dlg.mGroupBox.setGeometry(11,186,481,169)
            
            #self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
            self.dlg.mGroupBox_5.setFixedSize(481,169)

        print(self.dlg.mGroupBox_5.isCollapsed())
    def colapsar1(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                self.dlg.mGroupBox_2.setGeometry(11,50,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_2.isCollapsed() == True:
                        self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            elif self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
            elif self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,575,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,555,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,361,481,169)

        print(self.dlg.mGroupBox.isCollapsed())
    def colapsar2(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
            else:
                
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,575,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,555,481,169)

        print(self.dlg.mGroupBox_2.isCollapsed())
    def colapsar3(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,575,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,169)

        print(self.dlg.mGroupBox_2.isCollapsed())

    def colapsar4(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,346,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                else:
                    return
            else:
                return
        else:
            return
               
           
        print(self.dlg.mGroupBox_2.isCollapsed())



    def fun7(self):
        self.CCV = CertCveValor.selectDirectory2(self) 
    def fun8(self):
        self.CCV = CertCveValor.generarDoc2(self) 
        self.cancelaSeleccion2()
    def fun9(self):
        self.CCV = CertCveValor.activarSeleccion2(self) 
        
        self.xCvesVert.selectionChanged.connect(self.fun23)
        self.xManzana.selectionChanged.connect(self.fun23)
        self.xPredGeom.selectionChanged.connect(self.fun23)
        self.xPredNum.selectionChanged.connect(self.fun23)
        self.xConst.selectionChanged.connect(self.fun23)
        self.xHoriGeom.selectionChanged.connect(self.fun23)
        self.xHoriNum.selectionChanged.connect(self.fun23)
        self.xVert.selectionChanged.connect(self.fun23)
        self.xCvesVert.selectionChanged.connect(self.fun23)
    def fun10(self):
        self.CCV = CertCveValor.lineEditToUpper2(self) 
    def fun11(self):
        self.CA = CertAportes.selectDirectory3(self) 
    def fun12(self):
        self.CA = CertAportes.generarDoc3(self)
        self.cancelaSeleccion3()
    def fun13(self):
        self.CA = CertAportes.activarSeleccion3(self)
        
        self.xCvesVert.selectionChanged.connect(self.fun24)
        self.xManzana.selectionChanged.connect(self.fun24)
        self.xPredGeom.selectionChanged.connect(self.fun24)
        self.xPredNum.selectionChanged.connect(self.fun24)
        self.xConst.selectionChanged.connect(self.fun24)
        self.xHoriGeom.selectionChanged.connect(self.fun24)
        self.xHoriNum.selectionChanged.connect(self.fun24)
        self.xVert.selectionChanged.connect(self.fun24)
        self.xCvesVert.selectionChanged.connect(self.fun24)
    def fun14(self):
        self.CA = CertAportes.lineEditToUpper3(self) 

    def fun15(self):
        self.GDCC = ConstIdentificacion.selectDirectory4(self) 
    def fun16(self):
        self.GDCC = ConstIdentificacion.generarDoc4(self)
        self.cancelaSeleccion4()
    def fun17(self):
        self.GDCC = ConstIdentificacion.activarSeleccion4(self)
        self.xCvesVert.selectionChanged.connect(self.fun25)
        self.xManzana.selectionChanged.connect(self.fun25)
        self.xPredGeom.selectionChanged.connect(self.fun25)
        self.xPredNum.selectionChanged.connect(self.fun25)
        self.xConst.selectionChanged.connect(self.fun25)
        self.xHoriGeom.selectionChanged.connect(self.fun25)
        self.xHoriNum.selectionChanged.connect(self.fun25)
        self.xVert.selectionChanged.connect(self.fun25)
        self.xCvesVert.selectionChanged.connect(self.fun25)
    def fun18(self):
        self.GDCC = ConstIdentificacion.lineEditToUpper4(self) 
    def fun19(self):
        self.GDCC = gen_doc_calvecat.selectDirectory5(self) 
    def fun20(self):
        self.GDCC = gen_doc_calvecat.generarDoc5(self)
        self.cancelaSeleccion5()
    def fun21(self):
        self.GDCC = gen_doc_calvecat.activarSeleccion5(self)
       
        self.xCvesVert.selectionChanged.connect(self.fun26)
        self.xManzana.selectionChanged.connect(self.fun26)
        self.xPredGeom.selectionChanged.connect(self.fun26)
        self.xPredNum.selectionChanged.connect(self.fun26)
        self.xConst.selectionChanged.connect(self.fun26)
        self.xHoriGeom.selectionChanged.connect(self.fun26)
        self.xHoriNum.selectionChanged.connect(self.fun26)
        self.xVert.selectionChanged.connect(self.fun26)
        self.xCvesVert.selectionChanged.connect(self.fun26)
    def fun22(self):
        self.GDCC = gen_doc_calvecat.lineEditToUpper5(self)       

    def fun(self):
        self.CCC = CertCveCatastral.selectDirectory(self) 
    def fun1(self):
        self.CCC = CertCveCatastral.generarDoc(self)
        self.cancelaSeleccion()
    def cancelaSeleccion(self):
        if self.abrePredio:
            self.dlg.btnSeleccionar.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus("Listo...", "ok")
            self.abrePredio = False

    def fun2(self):
        self.CCC = CertCveCatastral.activarSeleccion(self)
     
        self.xManzana.selectionChanged.connect(self.fun5)
        self.xPredGeom.selectionChanged.connect(self.fun5)
        self.xPredNum.selectionChanged.connect(self.fun5)
        self.xConst.selectionChanged.connect(self.fun5)
        self.xHoriGeom.selectionChanged.connect(self.fun5)
        self.xHoriNum.selectionChanged.connect(self.fun5)
        self.xVert.selectionChanged.connect(self.fun5)


    def fun3(self):
        self.CCC = CertCveCatastral.lineEditToUpper(self)

    def fun4(self):
        self.ACA.abrirCedula()
        self.abrirCedula()
        self.cancelaAperturaCedula()

    def abrirCedula(self):
        self.cambiarStatusCedula("Seleccione un predio...", "ok")
        self.iface.actionSelect().trigger()
        self.canvas.setCursor(self.cursorRedondo)
        self.dlg.btnAbrirCedula.setEnabled(False)
        self.abrePredio = True
    def cancelaAperturaCedula(self):
        self.abrePredio = False
        self.dlg.btnAbrirCedula.setEnabled(True)

        '''self.xPredGeom.removeSelection()
        self.xHoriGeom.removeSelection()
        self.xCvesVert.removeSelection()'''
        self.canvas.refresh()
        # regresa herramienta de seleccion normal
        self.iface.actionSelect().trigger()
        self.cambiarStatusCedula("Listo...", "ok")
    def fun5(self):
        self.CCC = CertCveCatastral.seleccionaClave(self)
    def fun23(self):
        self.CCV = CertCveValor.seleccionaClave2(self)
    def fun24(self):
        self.CA = CertAportes.seleccionaClave3(self)
    def fun25(self):
        self.CI = ConstIdentificacion.seleccionaClave4(self)
    def fun26(self):
        self.GDCC = gen_doc_calvecat.seleccionaClave5(self)

    def fun6(self):
        self.ACA.DFS = self.DFS
        self.ACA.pintarCapas()
        self.ACA.UTI = self.UTI
    '''def selec(self):
        self.xManzana.selectionChanged.connect(self.fun5)
        self.xPredGeom.selectionChanged.connect(self.fun5)
        self.xPredNum.selectionChanged.connect(self.fun5)
        self.xConst.selectionChanged.connect(self.fun5)
        self.xHoriGeom.selectionChanged.connect(self.fun5)
        self.xHoriNum.selectionChanged.connect(self.fun5)
        self.xVert.selectionChanged.connect(self.fun5)
        self.xCvesVert.selectionChanged.connect(self.fun5)'''
        


    def validarCombox(self):
        #return (self.dlg.combos.count() > 0 and self.dlg.comboSector.count() > 0 and self.dlg.comboManzana.count()) or self.modoDesarrollo
        return (self.dlg.comboSector.count() > 0 and self.dlg.comboManzana.count()) or self.modoDesarrollo

    def obtenerIdManzana(self):
        
        
        #Obtener el identificador de la manzana
        if self.modoDesarrollo:
           
            #self.idManzana = '01 001 001 02 0004 016 031' #Esta es la chida
            #self.idManzana = '01 001 001 02 0004 026 039' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 026 040' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 060 004' 
                             #01001001020  4026040
            #self.idManzana = '01001001020004060004'  #La larga
            #self.idManzana = '01001001020004020001'
            #self.idManzana = '01001001020004020001'
            self.idManzana = '01001001020004015001'
            
            #01001001020004026039
            #01001001020  4026039

            #self.idManzana = '01001001020004017005' #esta es la mala krnal
            #self.idManzana =  '010010010204050001' #Esta calamos guardado
            #self.idManzana = '01001001020004026040'
            #self.idManzana = '01001001020004021016'
            

        else:
            index = self.dlg.comboManzana.currentIndex()
            self.idManzana = self.dlg.comboManzana.itemData(index)
            print(str(self.idManzana))
            self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface, str(self.idManzana))

    
    def obtenerSectoresPorLocalidad(self):

        if self.dlg.comboLocalidad.count() > 0:

            index = self.dlg.comboLocalidad.currentIndex()
            idSector = self.dlg.comboLocalidad.itemData(index)
            
            self.dlg.comboSector.clear()

            #Si es una clave de 16, buscaremos sectores por municipio, de lo contrario sera por localidad
            url = self.CFG.urlSectoresMuni if self.cve_cat_len == 16 else self.CFG.urlSectores

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(url + idSector + '/sector/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor sec1", QMessageBox().Critical, "Cargar Sectores")
                print('ERROR: SEC000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:

                for sector in respuesta.json():

                    self.dlg.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label
            #else:
            #    self.UTI.mostrarAlerta("No existen sectores en la localidad", QMessageBox().Information, "Cargar Sectores")
            

    # cambio a clave de 16
    def obtenerSectoresPorMunicipio(self):

        id = '1' # hardcodeado el identificador del municipio
        self.dlg.comboSector.clear()

        url = self.CFG.urlSectoresMuni

        try:
            headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
            respuesta = requests.get(url + id + '/sector/', headers = headers)
        except requests.exceptions.RequestException:
            self.UTI.mostrarAlerta("Error de servidor sec1", QMessageBox().Critical, "Cargar Sectores")
            print('ERROR: SEC000')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            for sector in respuesta.json():
                self.dlg.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label

    def obtenerManzanasPorSector(self):
    
        if self.dlg.comboSector.count() > 0:

            index = self.dlg.comboSector.currentIndex()
            idSector = self.dlg.comboSector.itemData(index)

            self.dlg.comboManzana.clear()

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(self.CFG.urlManzanas + idSector + '/manzana/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor man1sec", QMessageBox().Critical, "Cargar Manzanas")
                print('ERROR: MAN000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                for manzana in respuesta.json():
                    self.dlg.comboManzana.addItem(manzana['label'], manzana['other'])#Cambiar other por label
            #else:
            #    self.UTI.mostrarAlerta("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")



   

    def cambiarStatusCedula(self, texto, estado):

        self.dlg.lbEstatusCedula.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula.setStyleSheet('color: black')

    
        
    
        
    def botones(self):
        self.dlg.btnConsulta.clicked.connect(self.ira1)
        self.dlg.btnDibujo.clicked.connect(self.ira2)
        self.dlg.btnEliminar.clicked.connect(self.ira3)
        self.dlg.btnTopologia.clicked.connect(self.ira4)
        self.dlg.btnFusDiv.clicked.connect(self.ira5)
        self.dlg.btnCargaMasiva.clicked.connect(self.ira6)
        self.dlg.btnAsigCampo.clicked.connect(self.ira7)
        self.dlg.btnAsigRev.clicked.connect(self.ira8)
        self.dlg.btnAsigPad.clicked.connect(self.ira9)
        self.dlg.btnInterRev.clicked.connect(self.ira10)
        self.dlg.btnInterPad.clicked.connect(self.ira11)
        self.dlg.btnAdminUsers.clicked.connect(self.ira12)
        #self.dlg.despliega.clicked.connect(self.despliega)
    #def cambio(self):
        #self.dlg.tabWidget.setCurrentIndex(self.dlg.toolBox.currentIndex())
        #print(self.dlg.toolBox.currentIndex())
        '''if self.dlg.toolBox.currentIndex() == 0:
            #self.dlg.setFixedSize(600,751)
            self.dlg.toolBox.setFixedSize(600,751)
        elif self.dlg.toolBox.currentIndex() == 1:
            #self.dlg.setFixedSize(700,779)
            self.dlg.toolBox.setFixedSize(700,751)
        elif self.dlg.toolBox.currentIndex() == 2:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 3:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 4:
            #self.dlg.setFixedSize(720,779)
            self.dlg.toolBox.setFixedSize(720,751)
        elif self.dlg.toolBox.currentIndex() ==80:
            #self.dlg.setFixedSize(680,779)
            self.dlg.toolBox.setFixedSize(680,751)
        elif self.dlg.toolBox.currentIndex() == 6:
            #self.dlg.setFixedSize(700,779)
            self.dlg.toolBox.setFixedSize(700,751)
        elif self.dlg.toolBox.currentIndex() == 7:
            #self.dlg.setFixedSize(710,779)
            self.dlg.toolBox.setFixedSize(710,751)
        elif self.dlg.toolBox.currentIndex() == 8:
            #self.dlg.setFixedSize(670,779)
            self.dlg.toolBox.setFixedSize(670,751)
        elif self.dlg.toolBox.currentIndex() == 9:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 10:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 11:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)'''

    
    def texto(self):
        self.CCC = CertCveCatastral.cambiarStatus(self, texto, estado)

    def cambiarStatus(self, texto, estado):

        self.dlg.lbEstatusCedula_4.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: black')


    '''def lineEditToUpper(self):
        self.dlg.fldCveCat.setText(self.dlg.fldCveCat.text().upper())'''


    

    def cancelaSeleccion2(self):
        if self.abrePredio3:
            self.dlg.btnSeleccionar_2.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus2("Listo...", "ok")
            self.abrePredio3 = False

    

    def cambiarStatus2(self, texto, estado):

        self.dlg.lbEstatusCedula_2.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: black')




    def cancelaSeleccion3(self):
        if self.abrePredio4:
            self.dlg.btnSeleccionar_3.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus("Listo...", "ok")
            self.abrePredio4 = False

    

    def cambiarStatus3(self, texto, estado):

        self.dlg.lbEstatusCedula_3.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: black')


    def cancelaSeleccion4(self):
        if self.abrePredio5:
            self.dlg.btnSeleccionar_4.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus4("Listo...", "ok")
            self.abrePredio5 = False
    def cambiarStatus4(self, texto, estado):

        self.dlg.lbEstatusCedula_5.setText(texto)

        if estado == "ok":  # abriendo
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: green')
        elif estado == "error":  # Seleccione un solo predio
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: black')

    def cancelaSeleccion5(self):
        if self.abrePredio6:
            self.dlg.btnSeleccionar_5.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus5("Listo...", "ok")
            self.abrePredio6 = False
    def cambiarStatus5(self, texto, estado):

        self.dlg.lbEstatusCedula_6.setText(texto)

        if estado == "ok":  # abriendo
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: green')
        elif estado == "error":  # Seleccione un solo predio
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: black')
    

    
    '''def despliega(self):
        if self.i == 0:
            self.i = self.i +1
            self.dlg.dlg.setFixedSize(141,751)
            self.dlg.despliega.setFixedSize(121,51)

        elif self.i == 1:
            self.dlg.dlg.setFixedSize(100,751)
            self.dlg.despliega.setFixedSize(110,51)
            self.i = 0'''
    def ira1(self):
        self.dlg.tabWidget.setCurrentIndex(0)
        #self.dlg.setFixedSize(600,806)
        #self.dlg.tabWidget.setFixedSize(600,806)
    def ira2(self):
        self.dlg.tabWidget.setCurrentIndex(1)
        #self.dlg.setFixedSize(700,806)
        #self.dlg.tabWidget.setFixedSize(700,806)
    def ira3(self):
        self.dlg.tabWidget.setCurrentIndex(2)
        #self.dlg.setFixedSize(750,806)
        #self.dlg.tabWidget.setFixedSize(750,806)
    def ira4(self):
        self.dlg.tabWidget.setCurrentIndex(3)
        #self.dlg.setFixedSize(650,806)
        #self.dlg.tabWidget.setFixedSize(650,806)
    def ira5(self):
        self.dlg.tabWidget.setCurrentIndex(4)
        #self.dlg.setFixedSize(720,806)
        #self.dlg.tabWidget.setFixedSize(720,806)
    def ira6(self):
        self.dlg.tabWidget.setCurrentIndex(5)
        #self.dlg.setFixedSize(680,806)
        #self.dlg.tabWidget.setFixedSize(680,806)
    def ira7(self):
        self.dlg.tabWidget.setCurrentIndex(6)
        #self.dlg.setFixedSize(700,806)
        #self.dlg.tabWidget.setFixedSize(700,806)
    def ira8(self):
        self.dlg.tabWidget.setCurrentIndex(7)
        #self.dlg.setFixedSize(710,806)
        #self.dlg.tabWidget.setFixedSize(710,806)
    def ira9(self):
        self.dlg.tabWidget.setCurrentIndex(8)
        #self.dlg.setFixedSize(670,806)
        #self.dlg.tabWidget.setFixedSize(670,806)
    def ira10(self):
        self.dlg.tabWidget.setCurrentIndex(9)
        #self.dlg.setFixedSize(650,806)
        #self.dlg.tabWidget.setFixedSize(650,806)
    def ira11(self):
        self.dlg.tabWidget.setCurrentIndex(10)
        #self.dlg.setFixedSize(800,806)
        #self.dlg.tabWidget.setFixedSize(800,806)
    def ira12(self):
        self.dlg.tabWidget.setCurrentIndex(11)
        #self.dlg.setFixedSize(780,806)
        #self.dlg.tabWidget.setFixedSize(780,806)


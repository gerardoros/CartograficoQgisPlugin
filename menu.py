# -*- coding: utf-8 -*-
"""
/***************************************************************************
 menu
                                 A QGIS plugin
 menu
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by menu
        email                : menu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                             dlg                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QRectF
from qgis.PyQt.QtGui import QIcon,  QCursor, QPixmap, QStandardItemModel, QIntValidator
from qgis.PyQt.QtWidgets import QAction, QApplication, QFileDialog, QToolBox,  QMessageBox
from PyQt5 import QtGui
import jwt
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .menu_dialog import menuDialog
from .funciones.estatusClave import EstatusClaves_dialog
from .funciones.adminusers.usuariosEdicionVer import usuariosEdicionVer
from .funciones.adminusers.cambioClave_Usuario import cambioClave_Usuario
from .funciones.generar_documentos.cert_cve_catastral_dialog import CertCveCatastralDialog
from .funciones.generar_documentos.cert_cve_catastral import CertCveCatastral
from .funciones.generar_documentos.cert_cve_valor import CertCveValor
from .funciones.generar_documentos.cert_aportes import CertAportes
from .funciones.generar_documentos.const_identificacion import ConstIdentificacion
from .funciones.generar_documentos.gen_doc_calvecat import gen_doc_calvecat
from .funciones.consulta.ActualizacionCatastralV3 import ActualizacionCatastralV3
from .funciones.dibujo import DibujoV3
from .funciones.fusiondivision.EventoDivision import EventoDivision
from .funciones.fusiondivision.VentanaAreas import VentanaAreas
from .funciones.fusiondivision.VentanaFusionV3 import VentanaFusionV3
from .funciones.fusiondivision.VentanaClavesV3 import VentanaClavesV3
from .funciones.eliminacion import EliminacionV3
from .funciones.dibujo.VentanaDibujoV3 import VentanaDibujoV3
from .funciones.adminusers import AdminUsers
import os.path
from qgis.utils import iface, loadPlugin, startPlugin, reloadPlugin
from inspect import getframeinfo, stack
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QVBoxLayout, QLabel, QToolBox, QPushButton, QTextEdit, QLineEdit
from PyQt5.QtGui import QColor
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QRectF
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QRegExp
from qgis.PyQt.QtGui import QIcon, QRegExpValidator
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.gui import QgsLayerTreeView, QgsMapToolEmitPoint, QgsMapTool, QgsRubberBand, QgsVertexMarker, QgsMapToolAdvancedDigitizing
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path, requests, json
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem
from PyQt5.QtWidgets import QAction, QMessageBox
from PyQt5 import QtWidgets
#from ..estatusClave import EstatusClaves_dialog
import os.path

from PyQt5.QtCore import  Qt, QSize, QDir, QDate
from PyQt5.QtGui import QColor, QCursor, QPixmap, QStandardItemModel
from PyQt5.QtWidgets import  QTableWidgetItem, QListView, QCompleter
from PyQt5 import QtWidgets
# Initialize Qt resources from file resources.py
from qgis.core import *
from qgis.utils import iface
from qgis.gui import QgsLayerTreeView, QgsVertexMarker
from PyQt5 import QtGui
# Import the code for the DockWidget
import os, json, requests, datetime, qgis.core
from datetime import datetime as dt, date
from osgeo import ogr, osr
from .funciones.configuracion import Configuracion
from .funciones.utilidades import utilidades
from .funciones.fusiondivision import DivisionFusion
from .funciones.consulta import ActualizacionCatastralV3
from .funciones.topologia import TopologiaV3
from .funciones.consulta.Cedula_MainWindow import CedulaMainWindow
from .funciones.cargamasiva import Integracion
from .funciones.adminusers import AdminUsers
import os.path
import json
import requests
import re
from qgis.core import *
from .funciones.topologia.reglasQG3 import Reglas
from .Solicitud import Solicitud
from .funciones.predio_no_cart.Predio_No_Cart import Predio_No_Cart
#from ..busquedas.periodo.periodo import predio

#from ..busquedas.busqueda_catastral import busqueda_Catastral
#from ..busquedas.busqueda_direccion import busqueda_direccion

#from ..generar_documentos.cert_cve_catastral import CertCveCatastral
#from ..generar_documentos.cert_cve_valor import CertCveValor
#from ..generar_documentos.cert_aportes import CertAportes
#from ..generar_documentos.const_identificacion import ConstIdentificacion
#from ..generar_documentos.gen_doc_calvecat import gen_doc_calvecat
#from .planoManzanero import PlanoManzanero



class menu:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, usuario = None):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # Save reference to the QGIS interface
        self.iface = iface
        self.usuario = usuario
        self.CFG = Configuracion.Configuracion()
        self.UTI = utilidades.Utilidad()
        var = QSettings().value('datoUsuario')
        self.CC = cambioClave_Usuario(CFG = self.CFG, UTI = self.UTI, usuario = var,  nuevo = True)
        self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface)
        self.ACA.UTI = self.UTI
        self.UTI.CFG = self.CFG
        self.UTI.ACA = self.ACA
        self.DFS = DivisionFusion.DivisionFusion(iface, self.ACA)
        self.DBJ = DibujoV3.DibujoV3(iface)
        self.ELM = EliminacionV3.EliminacionV3(iface)
        self.CMS = Integracion.Integracion(iface)
        self.TPG = TopologiaV3.TopologiaV3(iface, self.ACA, self.CFG, self.UTI)
        self.reglas = Reglas(self.ACA, CFG = self.CFG, UTI = self.UTI)
        self.ADU = AdminUsers.AdminUsers(iface)

        self.ADU.CFG = self.CFG
        self.ADU.UTI = self.UTI
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'menu_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&menu')
        self.dlg = menuDialog(parent = iface.mainWindow())
        #self.mapTool = AdvancedMapTool(iface.mapCanvas(), iface.cadDockWidget(), self)
        #iface.mapCanvas().setMapTool(self.mapTool)
        self.eventos= EventoDivision(iface.mapCanvas(), self, iface.cadDockWidget())
        iface.mapCanvas().setMapTool(self.eventos)
        self.VentanaAreas = VentanaAreas(self)
        self.VentanaFusion = VentanaFusionV3(iface, self)
        self.VentanaClaves = VentanaClavesV3(iface, self)
        #self.dlg.toolBox.currentChanged.connect(self.cambio)
        #an = self.dlg.width()
        #al = self.dlg.height()
        self.diccServiciosCalle = {}
        self.i = 0
        self.dlg.setFixedSize(140,844)
        self.canvas = iface.mapCanvas()
        self.dlg.despliega.setIcon(QtGui.QIcon(':/plugins/Master/icons/menu1.png'))
        self.abrePredio2 = False
        self.abrePredio = False
        self.directorioAGuardar = None
        self.cve_catastral = None
        self.abrePredio3 = False
        self.directorioAGuardar2 = None
        self.cve_catastral2 = None
        self.abrePredio4 = False
        self.directorioAGuardar4 = None
        self.cve_catastral4 = None
        self.abrePredio5 = False
        self.directorioAGuardar5 = None
        self.cve_catastral5 = None
        self.abrePredio6 = False
        self.directorioAGuardar6 = None
        self.cve_catastral6 = None
        self.modoEliminar = False
        self.mododibujo = False
        self.click  = False 
        self.zona = []
        self.manzana = []
        self.lastMouseButtonClicked = None
        # eventos
        self.dlg.btnBrowse_5.clicked.connect(self.fun19)
        self.dlg.btnGenerar_5.clicked.connect(self.fun20)
        self.dlg.btnSeleccionar_5.clicked.connect(self.fun21)

        self.dlg.fldCveCat_5.textChanged.connect(self.fun22)
        self.dlg.twOperaciones.clicked.connect(self.traerOperaciones)
        self.dlg.btGuardar.clicked.connect(self.editarOperaciones)
        #self.dlg.btCerrar.clicked.connect(self.event_cancelar)
        self.dlg.twOperaciones.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.dlg.twOperaciones_2.hideColumn(1)
        self._seleccionados = []
        self.nuevo = True
        #self.CFG = CFG
        #self.UTI = UTI
        self.headers = {'Content-Type': 'application/json'}
        self.usuarios = []
        self.roles = []
        self.Cart = 'Predio Cartografiado'
        #validaciones
        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_5.setValidator(val)

        self.onlyInt = QIntValidator()
        self.dlg.fldNomfolio.setValidator(self.onlyInt)
        self.onlyInt = QIntValidator()
        self.dlg.fldCodPostal.setValidator(self.onlyInt)
        self.dlg.btnBrowse_4.clicked.connect(self.fun15)
        self.dlg.btnGenerar_4.clicked.connect(self.fun16)
        self.dlg.btnSeleccionar_4.clicked.connect(self.fun17)
        

        self.dlg.fldCveCat_4.textChanged.connect(self.fun18)

        #validaciones
        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_4.setValidator(val)

        rx = QRegExp("[a-zA-ZÀ-ÿ ]{255}")
        val = QRegExpValidator(rx)
        self.dlg.fldNomSolic.setValidator(val)

        self.onlyInt = QIntValidator()
        self.dlg.fldNumSolucitud.setValidator(self.onlyInt)

        self.dlg.dateEdit_2.setDate(QDate.currentDate())
        self.dlg.btnBrowse_3.clicked.connect(self.fun11)
        self.dlg.btnGenerar_3.clicked.connect(self.fun12)
        self.dlg.btnSeleccionar_3.clicked.connect(self.fun13)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat_3.textChanged.connect(self.fun14)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_3.setValidator(val)


        # eventos
        self.dlg.btnBrowse_2.clicked.connect(self.fun7)
        self.dlg.btnGenerar_2.clicked.connect(self.fun8)
        self.dlg.btnSeleccionar_2.clicked.connect(self.fun9)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat_2.textChanged.connect(self.fun10)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat_2.setValidator(val)

        
        #eventos
        self.dlg.btnBrowse.clicked.connect(self.fun)
        self.dlg.btnGenerar.clicked.connect(self.fun1)
        self.dlg.btnSeleccionar.clicked.connect(self.fun2)
        #self.dlg.exit_signal.connect(self.closeEvent)

        self.dlg.fldCveCat.textChanged.connect(self.fun3)

        rx = QRegExp("[a-zA-Z0-9]{31}")
        val = QRegExpValidator(rx)
        self.dlg.fldCveCat.setValidator(val)

        self.dlg.btCodnadas.setIcon(QtGui.QIcon(':/plugins/Master/icons/local.png'))
        self.dlg.btnConsulta.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo10.png'))
        self.dlg.btnAsigPad.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo11.png'))
        self.dlg.btnTopologia.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo16.png'))
        self.dlg.btCodnadas.clicked.connect(self.fun6)
        self.dlg.btnUbicar.clicked.connect(self.fun6)
        self.dlg.btnLimpiar.clicked.connect(self.funlimpiar)
        self.dlg.botonDibujar.clicked.connect(self.fundibujo)
        self.dlg.botonEliminar.clicked.connect(self.funeliminar)
        self.dlg.btnGuardar.clicked.connect(self.funguardar)
        self.dlg.btnActMarc_2.clicked.connect(self.funmarcadores)
        self.dlg.btnLimpiar_3.clicked.connect(self.funlimpiars)
        self.dlg.btnDibujarCortes.clicked.connect(self.dibujarcorte)
        self.dlg.btnEditarCortes.clicked.connect(self.editarcorte)
        self.dlg.btnLlamarCalcular.clicked.connect(self.areas)
        self.dlg.btnEliminarCortes.clicked.connect(self.eliminarcortes)
        self.dlg.btnCancelarSub.clicked.connect(self.cancelarSub)
        self.dlg.btnSubdividir.clicked.connect(self.sub)
        self.dlg.botonCargarReferencia_2.clicked.connect(self.funcarga)
        self.dlg.btnCargarPredio.clicked.connect(self.cargarsub)
        self.dlg.btnClave.clicked.connect(self.AsignarClave)
        self.dlg.btnSend.clicked.connect(self.seleccionar)
        self.dlg.btnFusionar.clicked.connect(self.fusion)
        self.dlg.comboSector.currentIndexChanged.connect(self.obtenerManzanasPorSector)
        self.dlg.comboManzana.currentIndexChanged.connect(self.obtenerIdManzana)
        self.dlg.comboSector_3.currentIndexChanged.connect(self.obtenerManzanasPorSector2)
        self.dlg.comboManzana_3.currentIndexChanged.connect(self.obtenerIdManzana2)
        self.dlg.btnOk.clicked.connect(self.usuarioguardar)
        self.dlg.botonValidar.clicked.connect(self.validar)
        self.dlg.btnAbrirCedula.clicked.connect(self.fun4)
        self.dlg.btnAbrirCedula_3.clicked.connect(self.fun4)
        self.dlg.comboBox.currentIndexChanged.connect(self.indexcombo)
        self.dlg.btnConfirmar.clicked.connect(self.confusion)
        self.dlg.btnCancelar.clicked.connect(self.cancelarFusion)
        self.dlg.btnAgregaRoles.clicked.connect(self.agregarroles)
        self.dlg.leBusqueda.textChanged.connect(self.event_textChangedLbBusqueda)
        self.dlg.botonActivarEdicion.clicked.connect(self.Activarcapas)
        self.dlg.btnSolicitud.clicked.connect(self.menus)
        self.dlg.botonCancelarReferencia.clicked.connect(self.rollbackCapa)
        self.dlg.botonActualizarRef.clicked.connect(self.actualizarFeatureRef)
        self.dlg.botonValidarRef.clicked.connect(self.validarRef)
        self.dlg.btnAceptar_3.clicked.connect(self.cambiarcontra)
        self.dlg.btnPredioNoCat.clicked.connect(self.llamarPredioNoCat)
        self.dlg.btnProcesar.clicked.connect(self.procesarARCH)
        self.dlg.btnCargar.clicked.connect(self.abrirCarga)
        self.procesar()
        self.cve_cat_len = 16
        self.dlg.lista = {}
        self.cursorRedondo = QCursor(QPixmap(["16 16 3 1",
                                "      c None",
                                ".     c #FF0000",
                                "+     c #FFFFFF",
                                "                ",
                                "       +.+      ",
                                "      ++.++     ",
                                "     +.....+    ",
                                "    +.     .+   ",
                                "   +.   .   .+  ",
                                "  +.    .    .+ ",
                                " ++.    .    .++",
                                " ... ...+... ...",
                                " ++.    .    .++",
                                "  +.    .    .+ ",
                                "   +.   .   .+  ",
                                "   ++.     .+   ",
                                "    ++.....+    ",
                                "      ++.++     ",
                                "       +.+      "]))
        self.dlg.btnBrowse.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo7.png'))
        self.dlg.btnBrowse_2.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo7.png'))
        self.dlg.btnBrowse_3.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo7.png'))
        self.dlg.btnBrowse_4.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo7.png'))
        self.dlg.btnBrowse_5.setIcon(QtGui.QIcon(':/plugins/Master/icons/archivo7.png'))

        self.botones()
        #self.colapsar()    
        #self.colapsar()
       
        self.dlg.mGroupBox_5.collapsedStateChanged.connect(self.colapsar)
        self.dlg.mGroupBox.collapsedStateChanged.connect(self.colapsar1)
        self.dlg.mGroupBox_2.collapsedStateChanged.connect(self.colapsar2)
        self.dlg.mGroupBox_3.collapsedStateChanged.connect(self.colapsar3)
        self.dlg.mGroupBox_4.collapsedStateChanged.connect(self.colapsar4)
        self.dlg.mGroupBox_8.collapsedStateChanged.connect(self.colapsar5)
        self.dlg.mGroupBox_9.collapsedStateChanged.connect(self.colapsar6)
        self.dlg.mGroupBox_10.collapsedStateChanged.connect(self.colapsar7)
        self.dlg.mGroupBox_22.collapsedStateChanged.connect(self.colapsar8)
        self.dlg.mGroupBox_13.collapsedStateChanged.connect(self.colapsar9)
        #self.cambio()
        #self.dlg.mdiArea.addSubWindow(self.dlg.subwindow_2)
        #self.dlg.mdiArea.closeAllSubWindows()
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
     #---------METODO QUE DESABILITA TODAS LAS ACCIONES DE LOS BOTONES
        #------------ DESACTIVAMOS LAS OPERACIONES Y MANDAMOS A VERIFICAR SUS ROLES
        self.headers = {'Content-Type': 'application/json'}
        usuario = self.UTI.decodeRot13(QSettings().value('usuario'))
        #print(usuario)
        var = QSettings()
        token = var.value('token')

        # se decodifica el token (JWT)
        decode = jwt.decode(token, verify=False)
        #print(decode)
        resultado = self.consumeWSGeneral(url_cons = self.CFG.url_MA_getInfoUser + str(decode['user_name']))
        print(resultado)
        #print(resultado)
        if not resultado:
            return
        
        var.setValue("datoUsuario", resultado)
        self.comproveRoles()
        self.asignActionsByRoles(iface)
    def comproveRoles(self):

        # ------------ PRUEBA PARA DESHABILITAR LOS BOTONES -------
        self.dlg.btnConsulta.setEnabled(False)
        self.dlg.btnDibujo.setEnabled(False)
        self.dlg.btnEliminar.setEnabled(False)
        self.dlg.btnTopologia.setEnabled(False)
        self.dlg.btnFusDiv.setEnabled(False)
        self.dlg.btnCargaMasiva.setEnabled(False)
        self.dlg.btnAsigCampo.setEnabled(False)
        self.dlg.btnAsigRev.setEnabled(False)
        self.dlg.btnAsigPad.setEnabled(False)
        self.dlg.btnInterPad.setEnabled(False)
        self.dlg.btnInterRev.setEnabled(False)
        self.dlg.btnAdminUsers.setEnabled(False)

    #--------MEOTOD QUE COMPRUEBA LAS VERIIFCACIONES DE LOS BOTONES
    def asignActionsByRoles(self, iface):
        var = QSettings()
        if var.value('logeado') == 'True':
            response = self.consumeWSGeneral(self.CFG.url_permisos)
            
            for rol in response["roles"]:
                if rol == 'CONSULTA':
                    self.dlg.btnConsulta.setEnabled(True)
                if rol == 'DIBUJO':
                    self.dlg.btnDibujo.setEnabled(True)
                if rol == 'ELIMINAR':
                    self.dlg.btnEliminar.setEnabled(True)
                if rol == 'TOPOLOGIA':
                    self.dlg.btnTopologia.setEnabled(True)
                if rol == 'FUSION_SUBDIVISION':
                    self.dlg.btnFusDiv.setEnabled(True)
                if rol == 'CARGA_MASIVA':
                    self.dlg.btnCargaMasiva.setEnabled(True)
                if rol == 'ASIGNACION_CAMPO':
                    self.dlg.btnAsigCampo.setEnabled(True)
                if rol == 'ASIGNACION_REVISION':
                    self.dlg.btnAsigRev.setEnabled(True)
                if rol == 'ASIGNACION_PADRON':
                    self.dlg.btnAsigPad.setEnabled(True)
                if rol == 'INTERMEDIO_REVISION':
                    self.dlg.btnInterRev.setEnabled(True)
                if rol == 'INTERMEDIO_PADRON':
                    self.dlg.btnInterPad.setEnabled(True)
                if rol == 'ADMIN_USERS':
                    self.dlg.btnAdminUsers.setEnabled(True)
        else:
            self.comproveRoles()
       
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('menu', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Master/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(

                self.tr(u'&menu'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        
        #self.CCC = CertCveCatastral.obtenerXCapas1(self)
        #self.CCV = CertCveValor.obtenerXCapas2(self)
        #self.CA = CertAportes.obtenerXCapas3(self)
        #self.CI = ConstIdentificacion.obtenerXCapas4(self)
        #self.GDCC = gen_doc_calvecat.obtenerXCapas5(self)

        #el error aqui es que estabas asignando la funcion 'obtenerXCapas' a self.ACA
        #y self.ACA contiene la referencia a la clase
        #self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3.obtenerXCapas(self)
        #self.mapTool = AdvancedMapTool(iface.mapCanvas(), iface.cadDockWidget(), self)
        for x in iface.mapNavToolToolBar().actions():
            if x.objectName() == 'mActionPan':
                x.trigger()
        #if not self.mapTool.botonAD.isChecked():
            #self.mapTool.botonAD.trigger()
        self.mem_layer = None
        #esto es lo que debes hacer
        #con la referencia hecha (self.ACA == ActualizacionCatastralV3....) solo mandas a llamar el metodo que ocupas
        self.ACA.obtenerXCapas() #-------- como aqui
        self.ACA.vaciarCapa(self.mem_layer)
        self.llenarOperaciones()
        #y no le pases self como parametro
        #self.ACA.obtenerXCapas(self) ------- esto es incorrecto
        #porque los metodos de self.ACA ya contienen la refrencia a su propia clase
      
        self.cuerpo = {"incluirGeom": "true", "pagina": None, "bbox": "false", "pin": "false", "geomWKT": None, "epsg": None, "properties": None, "epsgGeomWKT": None, "itemsPagina": None, "nombre": "x"}
        self.headers = {'Content-Type': 'application/json'}
        self.payload = json.dumps(self.cuerpo)
        self.dlg.comboSector.clear()
        #self.dlg.comboLocalidad.clear()
        self.dlg.comboManzana.clear()
        self.rubberMarca = QgsRubberBand(iface.mapCanvas(), QgsWkbTypes.PolygonGeometry)
        self.rubberMarca.setFillColor(QColor(255,255,0,12))
        self.rubberMarca.setStrokeColor(QColor(255,150,0,255))
        self.rubberMarca.setWidth(2)
        #Inicializacionde IdManzana
        self.idManzana = ' '
        self.cla = ''

        #Modo desarrollor
        self.modoDesarrollo = False
        self.modoDesarrollo2 = False
        self.cargaRapida = True
        #01001001020004054011
        #01001001020004027003
        #01001001020004063010
        self.obtenerSectoresPorMunicipio()
        self.obtenerSectoresPorMunicipio2()
        self.ELM.agregarFuncionEliminar()
        self.funedicionatributos()                                          
        '''for count in range(self.dlg.comboSector.count()):
            #print (self.dlg.comboSector.itemText(count))
            self.zona.append(self.dlg.comboSector.itemText(count))
        for count in range(self.dlg.comboManzana.count()):
            #print (self.dlg.comboManzana.itemText(count))
            self.manzana.append(self.dlg.comboManzana.itemText(count))
        '''
        xMan = QSettings().value('xManzana')
        xPredG = QSettings().value('xPredGeom')
        xPredN = QSettings().value('xPredNum')
        xCon = QSettings().value('xConst')
        xHoriG = QSettings().value('xHoriGeom')
        xHoriN = QSettings().value('xHoriNum')
        xVe = QSettings().value('xVert')
        xCv = QSettings().value('xCvesVert')

        self.xManzana = QgsProject.instance().mapLayer(xMan)
        self.xPredGeom = QgsProject.instance().mapLayer(xPredG)
        self.xPredNum = QgsProject.instance().mapLayer(xPredN)
        self.xConst = QgsProject.instance().mapLayer(xCon)
        self.xHoriGeom = QgsProject.instance().mapLayer(xHoriG)
        self.xHoriNum = QgsProject.instance().mapLayer(xHoriN)
        self.xVert = QgsProject.instance().mapLayer(xVe)
        self.xCvesVert = QgsProject.instance().mapLayer(xCv)

        self.xManzana.selectionChanged.connect(self.funedicionatributos)
        self.xPredGeom.selectionChanged.connect(self.funedicionatributos)
        self.xPredNum.selectionChanged.connect(self.funedicionatributos)
        self.xConst.selectionChanged.connect(self.funedicionatributos)
        self.xHoriGeom.selectionChanged.connect(self.funedicionatributos)
        self.xHoriNum.selectionChanged.connect(self.funedicionatributos)
        self.xVert.selectionChanged.connect(self.funedicionatributos)
        self.xCvesVert.selectionChanged.connect(self.funedicionatributos)
        #self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface, self.zona, self.manzana)
        self.llenarComboReferencias()
        #self.dlg.btnFusionar.setEnabled(True)
        self.dlg.comboPredios.setEnabled(True)
        self.dlg.btnCargarPredio.setEnabled(True)
        self.dlg.btnDibujarCortes.setEnabled(False)
        self.dlg.btnEditarCortes.setEnabled(False)
        self.dlg.btnEliminarCortes.setEnabled(False)
        #self.dlg.btnApagarHerramientas.setEnabled(False)
        #self.dlg.btnConfirmarCortes.setEnabled(False)
        #self.dlg.btnDeshacerTodo.setEnabled(False)

        self.dlg.btnSubdividir.setEnabled(False)
        self.dlg.RdManual.setEnabled(False)
        self.dlg.RdAuto.setEnabled(False)
        self.dlg.btnCancelarSub.setEnabled(False)
        self.dlg.lineEdit.setEnabled(False)
        self.dlg.lineEdit_2.setEnabled(False)
        self.dlg.btnSend.setEnabled(False)
        self.dlg.btnClave.setEnabled(False)
        self.dlg.btnLlamarCalcular.setEnabled(False)
        #Asignar eventos de cambio de seleccion
        if self.dlg.tabWidget.currentIndex() == 0:
            self.dlg.btnConsulta.setEnabled(False) 
            self.dlg.btnDibujo.setEnabled(True)
            self.dlg.btnEliminar.setEnabled(True)
            self.dlg.btnTopologia.setEnabled(True)
            self.dlg.btnFusDiv.setEnabled(True)
            self.dlg.btnCargaMasiva.setEnabled(True)
            self.dlg.btnAsigCampo.setEnabled(True)
            self.dlg.btnAsigRev.setEnabled(True)
            self.dlg.btnAsigPad.setEnabled(True)
            self.dlg.btnInterRev.setEnabled(True)
            self.dlg.btnInterPad.setEnabled(True)
            self.dlg.btnAdminUsers.setEnabled(True)       #self.selec()
        

        
        self.dlg.botonActualizarRef.setEnabled(False)
        self.dlg.botonCancelarReferencia.setEnabled(False)
        #self.dlg.twOperaciones_6.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        #self.dlg.twOperaciones_6.clicked.connect(self.tablitas)
        self.ADU = AdminUsers.AdminUsers(iface)
        self.ADU.CFG = self.CFG
        self.ADU.UTI = self.UTI
        self.dlg.twUsuarios.setColumnHidden(0, True)
        self.dlg.twUsuarios.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        self.dlg.twUsuarios.setSortingEnabled(True)
        #self.cartablita()
        header = self.dlg.twUsuarios.horizontalHeader()
        self.tablausuario(index = 0)
        # show the dialog
        self.dlg.show()
        iface.mapCanvas().setMapTool(self.eventos)
        #iface.mapCanvas().setMapTool(self.mapTool)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def procesarARCH(self):
        self.CMS.UTI = self.UTI
        self.CMS.ACA = self.ACA
        self.CMS.corregirLineas()
    def procesar(self):
        self.dlg.ComboManza.currentTextChanged.connect(self.procesar1)
        self.dlg.comboBase.currentTextChanged.connect(self.procesar2)
       
    def procesar1(self):
        if self.dlg.ComboManza.currentIndex() == 0:
            self.dlg.label_60.setText('---')
            self.dlg.label_61.setText('---')
            self.dlg.label_62.setText('---')
        else:
            com1 = self.dlg.ComboManza.currentText()
            
            self.dlg.label_60.setText('Total de ' + com1 + ' actualizadas')
            self.dlg.label_61.setText('Nuevas ' + com1)
            self.dlg.label_62.setText(com1 + ' con error')
            
        '''self.dlg.lbEstatusCedula_4.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: black')'''
    def procesar2(self):
        if self.dlg.comboBase.currentIndex() == 0:
            self.dlg.label_60.setText('---')
            self.dlg.label_61.setText('---')
            self.dlg.label_62.setText('---')
        else:
            com2 = self.dlg.comboBase.currentText()

            self.dlg.label_60.setText('Total de ' + com2 + ' actualizadas')
            self.dlg.label_61.setText('Nuevas ' + com2)
            self.dlg.label_62.setText(com2 + ' con error')
    def abrirCarga(self):
        self.CMS.abrirCarga()
        ruta = self.CMS.fileName
        self.dlg.fldArchivo.setText(str(ruta))
    def llamarPredioNoCat(self):
        self.dlg.obj = Predio_No_Cart(self.iface, CFG = self.CFG, UTI = self.UTI, nuevo = True)
        self.dlg.obj.run()
    def tablaref(self, nameCapa):
        idCapa = self.obtenerIdCapa(nameCapa)
        capaAPintar = QgsProject.instance().mapLayer(idCapa)
        if capaAPintar == None:
            mem_layer = QgsVectorLayer(uri, nameCapa, 'memory')
            self.UTI.formatoCapa(nameCapa, mem_layer) 
        else:
            mem_layer = capaAPintar
        mem_layer.selectionChanged.connect(self.cargarTablitaRef)
    def cargarTablitaRef(self):

        self.capaActiva = iface.activeLayer()
        self.vaciarTablitaRef()
        
        if self.capaActiva.id() == self.capaEnEdicion:

            self.comboTipoAs = QtWidgets.QComboBox()
            self.comboTipoVia = QtWidgets.QComboBox()
            self.comboCveVus = QtWidgets.QComboBox()

            self.comboTipoAs.clear()
            self.comboTipoVia.clear()
            self.comboCveVus.clear()

            idCapa = self.capaActiva.id()

            header = self.dlg.tablaEdicionRef.horizontalHeader()
            header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
            header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
            #header.setStretchLastSection(True)
            
            #self.dlg.labelCapaEdicionRef.setText('---')



            if idCapa != self.obtenerIdCapa('Manzanas' )and idCapa != ('Predios'):

                self.seleccion = self.capaActiva.selectedFeatures()
                self.listaEtiquetas = []
                #self.dlg.labelCapaEdicionRef.setText( self.traducirIdCapa( self.capaActiva.id()))
                
                if (len(self.seleccion) == 1):

                    self.cambiarStatusRef("Edicion Activa", "ok")
                    campos = self.capaActiva.fields()   
                    nombres = [campo.name() for campo in campos]
                    self.tipConst = 0

                    if self.capaActiva.id() == self.obtenerIdCapa('Area de Valor'): #Areas de valor
                        self.listaAtributos = ['valor', 'descripcion']
                        self.listaEtiquetas = ['Valor', 'Descripcion']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Zona Uno') or self.capaActiva.id() == self.obtenerIdCapa('Zona Dos'): #Zonas
                        self.listaAtributos = ['descripcion']
                        self.listaEtiquetas = ['Descripcion']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Predios'): #Zonas
                        self.listaAtributos = ['clave']
                        self.listaEtiquetas = ['Clave']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Colonias'): #Codigo Postal
                        self.listaAtributos = ['cve_col', 'id_tipo_asentamiento', 'descripcion']
                        self.listaEtiquetas = ['Clave', 'Tipo de Asentamiento', 'Descripcion']

                        headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}

                        respuesta = requests.get(self.CFG.urlTipoAsentamiento, headers = headers)
                        self.comboTipoAs.addItem('NULL','Ninguno')
                        self.diccionarioTipoAs = {}
                        self.diccionarioTipoAs['NULL'] = 'Ninguno'
                        if respuesta.status_code == 200:
                            for resp in respuesta.json():

                                self.comboTipoAs.addItem(str(resp['descripcion']), str(resp['id']))
                                self.diccionarioTipoAs[str(resp['id'])] = str(resp['descripcion'])
                                
                        
                        else:
                            self.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor asentm", QMessageBox().Critical, "Cargar tipos de asentamiento")


                    elif self.capaActiva.id() == self.obtenerIdCapa('Codigo Postal'): #Colonia
                        self.listaAtributos = ['cve_cp']
                        self.listaEtiquetas = ['CP']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Corredor de Valor'): # Corredor de valor
                        self.listaAtributos = ['clave']
                        self.listaEtiquetas = ['Clave']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Calles'): #Calles
                        self.listaAtributos = ['valor', 'longitud', 'id_cve_vialidad', 'tipo_vector_calle', 'calle']
                        self.listaEtiquetas = ['Valor', 'Longitud', 'Clave vialidad', 'Tipo de Vector', 'Calle']

                        headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}

                        respuesta = requests.get(self.CFG.urlTipoVialidad, headers = headers)
                        self.comboTipoVia.addItem('Ninguno','NULL')
                        self.diccionarioTipoVia = {}
                        self.diccionarioTipoVia['NULL'] = 'Ninguno'
                        if respuesta.status_code == 200:

                            for resp in respuesta.json():
                                self.comboTipoVia.addItem(str(resp['cTipoVialidad']), str(resp['id']))
                                self.diccionarioTipoVia[str(resp['id'])] = str(resp['cTipoVialidad'])

                        else:
                            self.UTI.mostrarAlerta("No se han podido cargar los tipos de asentamiento\nError de servidor tipoasent2", QMessageBox().Critical, "Cargar tipos de vialidad")


                    elif self.capaActiva.id() == self.obtenerIdCapa('Sectores'): #Sector
                        self.listaAtributos = ['clave']
                        self.listaEtiquetas = ['Clave']
                    
                    elif self.capaActiva.id() == self.obtenerIdCapa('Localidades'): #Localidades
                        self.listaAtributos = ['clave', 'nombre']
                        self.listaEtiquetas = ['Clave', 'Nombre']
                    
                    elif self.capaActiva.id() == self.obtenerIdCapa('Secciones'): #Secciones
                        self.listaAtributos = ['clave', 'nombre']
                        self.listaEtiquetas = ['Clave', 'Nombre']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Municipios'): #Municipios
                        self.listaAtributos = ['clave', 'nombre']
                        self.listaEtiquetas = ['Clave', 'Nombre']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Region Catastral'): #Region Catastral
                        self.listaAtributos = ['clave', 'nombre']
                        self.listaEtiquetas = ['Clave', 'Nombre']

                    elif self.capaActiva.id() == self.obtenerIdCapa('Estado'): #Estado
                        self.listaAtributos = ['clave', 'nombre']
                        self.listaEtiquetas = ['Clave', 'Nombre']


                    for x in range(0, len(self.listaAtributos)):
                        self.dlg.tablaEdicionRef.insertRow(x)

                        item = QtWidgets.QTableWidgetItem(self.listaEtiquetas[x])
                        self.dlg.tablaEdicionRef.setItem(x, 0 , item)#self.capaActual.getFeatures().attributes()[x])
                        item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

                        textoItem = str( self.seleccion[0][self.listaAtributos[x]])

                        self.dlg.tablaEdicionRef.setItem(x, 1 , QtWidgets.QTableWidgetItem(textoItem))


                    if self.capaActiva.id() == self.obtenerIdCapa( 'Colonias'):

                        self.dlg.tablaEdicionRef.setCellWidget(1,1,self.comboTipoAs)

                        idCve = str(self.seleccion[0]['id_tipo_asentamiento'])
                        if idCve == None:
                            idCve = 'NULL'


                        textito = self.diccionarioTipoAs[idCve]
                        index = self.comboTipoAs.findText(str(textito), QtCore.Qt.MatchFixedString)
                        if index >= 0:
                            self.comboTipoAs.setCurrentIndex(index)

                    elif self.capaActiva.id() == self.obtenerIdCapa( 'Area de Valor'):
                        pass

                    elif self.capaActiva.id() == self.obtenerIdCapa('Calles'): #Calles

                        self.dlg.tablaEdicionRef.setCellWidget(2,1,self.comboTipoVia)
                        idCve = str(self.seleccion[0]['id_cve_vialidad'])
                        if idCve == None or idCve == '' or idCve == 'CALLE':
                            idCve = 'NULL'
                        textito = self.diccionarioTipoVia[idCve]

                        index = self.comboTipoVia.findText(str(textito), QtCore.Qt.MatchFixedString)
                        if index >= 0:
                            self.comboTipoVia.setCurrentIndex(index)
                        
                        longitud = self.seleccion[0].geometry().length()
                        item = QtWidgets.QTableWidgetItem(str(longitud))
                        item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
                        self.dlg.tablaEdicionRef.setItem(1, 1 , item)
                        idCalle = self.seleccion[0]['id']

                        if not str(idCalle) in self.diccServiciosCalle.keys():
            
                            headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}

                            self.dlg.tablaServiciosCalles.clearContents()
                            self.dlg.tablaServiciosCalles.setRowCount(0)

                            if idCalle == qgis.core.NULL or idCalle is None:
                                idCalle = 0

                            idCalle = str(idCalle)

                            respuesta = requests.get(self.CFG.urlServCalle + idCalle, headers = headers)

                            if respuesta.status_code == 200:
                                datos = respuesta.json()

                                for x in range(0, len(list(datos))):

                                    self.dlg.tablaServiciosCalles.insertRow(x)
                                    check = QTableWidgetItem(datos[x]['descripcion'])
                                    check.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                                    if datos[x]['disponible'] == False:
                                        check.setCheckState(QtCore.Qt.Unchecked)
                                    else:
                                        check.setCheckState(QtCore.Qt.Checked)
                                    self.dlg.tablaServiciosCalles.setItem(x,0,check)

                                    item2 = QTableWidgetItem(datos[x]['servicio'])
                                    self.dlg.tablaServiciosCalles.setItem(x,1,item2)
                        
                        else:
                            listaServicios = self.diccServiciosCalle[str(idCalle)]

                            for x in range(0, len(listaServicios)):
                                self.dlg.tablaServiciosCalles.insertRow(x)

                                estado = listaServicios[x][0]
                                check = QTableWidgetItem(listaServicios[x][1])
                                item2 = QTableWidgetItem(listaServicios[x][2])

                                check.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                                if estado == '0':
                                    check.setCheckState(QtCore.Qt.Unchecked)
                                else:
                                    check.setCheckState(QtCore.Qt.Checked)

                                self.dlg.tablaServiciosCalles.setItem(x,0,check)
                                self.dlg.tablaServiciosCalles.setItem(x,1,item2)



                        header = self.dlg.tablaServiciosCalles.horizontalHeader()
                        
                        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
                        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)


                else:
                    self.cambiarStatusRef("---", "error")

            else:
                self.cambiarStatusRef("---", "error")
    def actualizarFeatureRef(self):

        if  self.dlg.tablaEdicionRef.rowCount() > 0:
            
            if self.validarEdicionRef():
                
                self.UTI.mostrarAlerta('Se actualizó correctamente', QMessageBox().Information, 'Edicion de atributos')
                self.cargarTablitaRef()
            
        else:
            self.UTI.mostrarAlerta("Se requiere seleccionar exactamente un elemento a editar", QMessageBox.Warning, 'Edicion de atributos')

    def rollbackCapa(self):

        self.ACA.CFG = self.CFG
        self.ACA.UTI = self.UTI
        self.ACA.DFS = self.DFS
        self.ACA.DBJ = self.ACA
        self.ACA.ELM = self.ELM
        self.ACA.DFS = self.DFS
        self.ACA.TPG = self.TPG
        self.ACA.CMS = self.CMS
        self.ACA.rollbackCapa()
        self.vaciarTablitaRef()
        self.dlg.labelStatusEdicionRef.setText('---')
        estilo = '''color: rgb(0, 0, 0);'''
        self.dlg.labelStatusEdicionRef.setStyleSheet(estilo)
        self.dlg.comboCapasEdicion.setEnabled(True)
        self.dlg.botonActivarEdicion.setEnabled(True)
        self.dlg.botonActivarEdicion.setText('Activar Edicion de \nReferencia')
        self.dlg.botonActualizarRef.setEnabled(False)
        self.dlg.botonCancelarReferencia.setEnabled(False)
        self.dlg.tablaServiciosCalles.setVisible(False)
        self.dlg.botonActualizarServiciosCalles.setVisible(False)
        self.dlg.tituloServiciosCalles.setVisible(False)
    def menus(self):
        self.dlg.obj = Solicitud(self.iface, CFG = self.CFG, UTI = self.UTI, nuevo = True)
        self.dlg.obj.run()
        self.solicitudes()
    def llenarOperaciones(self):
        self.dlg.twOperaciones.clearContents()
        self.dlg.twOperaciones.setRowCount(0)
        self.usuarios = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllAuthorities)

        if not self.usuarios:
             return

                # mostrar usuarios en tabla
        self.dlg.twOperaciones.setRowCount(len(self.usuarios))
        for x in range(0, len(self.usuarios)):
            
            item2 = QTableWidgetItem(self.usuarios[x])
            self.dlg.twOperaciones.setItem(x, 0, item2)
    def cambiarcontra(self):
        contra1 = self.dlg.leRol_3.text()
        contra2 = self.dlg.leRol_2.text()
        self.CC.event_aceptar(contra1, contra2)
    def usuarioguardar(self):
        self.nuevo = True
        self.UE = usuariosEdicionVer.event_aceptar(self, nuevo = True)
    def llenaRoles(self, roles = []):
        # llena roles
        self.dlg.twRoles.setRowCount(len(roles))

        for i in range(0, len(roles)):
            
            btnRol = QtWidgets.QPushButton('Quitar')
            btnRol.setEnabled(True)
            btnRol.setStyleSheet('''QPushButton{
                               background-color: rgb(104, 185, 181);
                                    color : rgb(255,255,255);
                                    border-radius : 4px;
                                }
                                QPushButton::disabled {
                                background : rgb(187, 129, 13);
                                color : rgb(245,245,245);
                                border: 1px solid #adb2b5;
                                }''')

            self.dlg.twRoles.setItem(i, 0, QtWidgets.QTableWidgetItem(roles[i]['rol']))
            self.dlg.twRoles.setItem(i, 1, QtWidgets.QTableWidgetItem(roles[i]['opreaciones']))
            self.dlg.twRoles.setCellWidget(i, 2, btnRol)
            btnRol.clicked.connect(self.event_currentPositionButtonPressed2)

    def tablausuario(self, index):
        self.ADU.CFG = self.CFG
        self.ADU.UTI = self.UTI
        if index == 0:

            # remover todos
            self.dlg.twUsuarios.clearContents()
            self.dlg.twUsuarios.setRowCount(0)
                
            for row in range(0, self.dlg.twUsuarios.rowCount()):        
                self.dlg.twUsuarios.removeRow(row) 

            # consumir ws para descargar usuarios
            self.usuarios = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllUsers)

            if not self.usuarios or len(self.usuarios) == 0:
                return

            # mostrar usuarios en tabla
            self.dlg.twUsuarios.setRowCount(len(self.usuarios))
            for i in range(0, len(self.usuarios)):

                # auth = ", ".join(self.usuarios[i]['authorities'])
                auth = ''
                if len(self.usuarios[i]['authorities']) > 0:
                    auth = ", ".join(d['rol'] for d in self.usuarios[i]['authorities'])

                btnVer = QtWidgets.QPushButton('Ver')
                btnEdi = QtWidgets.QPushButton('Editar')
                btnElim = QtWidgets.QPushButton('Eliminar')


                btnVer.setStyleSheet('''QPushButton{
                                    background-color: rgb(104, 185, 181);
                                    color : rgb(255,255,255);
                                    border-radius : 4px;
                                    }
                                    QPushButton::disabled {
                                    background : rgb(42, 124, 120);
                                    color : rgb(245,245,245);
                                    border: 1px solid #adb2b5;
                                    }''')

                
                btnEdi.setStyleSheet('''QPushButton{
                                    background-color: rgb(104, 185, 181);
                                    color : rgb(255,255,255);
                                    border-radius : 4px;
                                    }
                                    QPushButton::disabled {
                                    background : rgb(42, 124, 120);
                                    color : rgb(245,245,245);
                                    border: 1px solid #adb2b5;
                                    }''')

                self.dlg.twUsuarios.setItem(i, 0, QtWidgets.QTableWidgetItem(str(self.usuarios[i]['id'])))
                self.dlg.twUsuarios.setItem(i, 1, QtWidgets.QTableWidgetItem((self.usuarios[i]['firstName'] if self.usuarios[i]['firstName'] else '') + ' ' + (self.usuarios[i]['lastName'] if self.usuarios[i]['lastName'] else '')))
                self.dlg.twUsuarios.setItem(i, 2, QtWidgets.QTableWidgetItem(self.usuarios[i]['login']))
                self.dlg.twUsuarios.setItem(i, 3, QtWidgets.QTableWidgetItem(auth))
                self.dlg.twUsuarios.setCellWidget(i, 4, btnVer)
                self.dlg.twUsuarios.setCellWidget(i, 5, btnEdi)
                btnVer.clicked.connect(self.event_currentPositionButtonPressed)
                btnEdi.clicked.connect(self.event_currentPositionButtonPressed)
                btnElim.clicked.connect(self.event_currentPositionButtonPressed)
    def agregarroles(self):
        self.UE = usuariosEdicionVer.event_agregaRoles(self)
    def event_currentPositionButtonPressed(self):
        clickme = QtWidgets.qApp.focusWidget()
        # or button = self.sender()
        index = self.dlg.twUsuarios.indexAt(clickme.pos())
        
        if index.isValid():
            item = self.dlg.twUsuarios.item(index.row(), 0)
            usuario = [x for i, x in enumerate(self.usuarios) if str(x['id']) == item.text()]

            # ver
            if index.column() == 4:

                obj = usuariosEdicionVer(usuario[0] if len(usuario) > 0 else None, False, False, CFG = self.CFG, UTI = self.UTI)
                respuesta = obj.exec()
                pass

            # editar
            if index.column() == 5:
                obj = usuariosEdicionVer(usuario[0] if len(usuario) > 0 else None, False, True, CFG = self.CFG, UTI = self.UTI)
                respuesta = obj.exec()
                pass

            # eliminar
            if index.column() == 6:
                pass

            # regresa un 0 o un 1
            # 0 = RECHAZADO = CANCELAR
            # 1 = ACEPTADO  = ACEPTAR
            if respuesta == 0:
                return

            # limpiar tabla
            self.ADU.limpiaTabla()

            self.ADU.event_cambioPestania(0)
    def event_currentPositionButtonPressed2(self):

        clickme = QtWidgets.qApp.focusWidget()
        # or button = self.sender()
        index = self.dlg.twRoles.indexAt(clickme.pos())

        if index.isValid():
            self.dlg.twRoles.removeRow(index.row())
    def createAlert(self, mensaje, icono = QMessageBox().Critical, titulo = 'Usuarios'):

        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()
    def event_textChangedLbBusqueda(self, texto):
        
        for row in range(0,self.dlg.twUsuarios.rowCount()):
            self.dlg.twUsuarios.showRow(row)

        if texto == '':
            return
        items = self.dlg.twUsuarios.findItems(texto, Qt.MatchContains)

        ocultar = True
        rowCount = self.dlg.twUsuarios.rowCount()
        for row in range(0, rowCount):
            ocultar = True
            for item in items:

                if row == item.row():
                    ocultar = False
                    break

            if ocultar:
                self.dlg.twUsuarios.hideRow(row)    

    #funcionalidad de los grupbox desplegables
           
        #print(self.dlg.mGroupBox_2.isCollapsed())

    #funciones de diferentes clases
    def cartablita(self):
        self.ACA.cargarTablitaRef()
    def Activarcapas(self):
        self.ACA.CFG = self.CFG
        self.ACA.UTI = self.UTI
        self.ACA.DFS = self.DFS
        self.ACA.DBJ = self.ACA
        self.ACA.ELM = self.ELM
        self.ACA.DFS = self.DFS
        self.ACA.TPG = self.TPG
        self.ACA.CMS = self.CMS
        nombreCapa = self.dlg.comboCapasEdicion.currentText()
        self.ACA.activarEdicion(nombreCapa)
        self.capaEnEdicion = self.obtenerIdCapa(nombreCapa)
        self.ACA.quitarDeGrupo(self.obtenerIdCapa(nombreCapa), 'referencia')
        self.tablaref(nombreCapa)
        self.dlg.comboCapasEdicion.setEnabled(False)
        self.dlg.botonActualizarRef.setEnabled(True)
        self.dlg.botonCancelarReferencia.setEnabled(True)
        self.dlg.botonActivarEdicion.setText('Terminar')

    def colapsar8(self):
        #self.dlg.mGroupBox_5.isCollapsed()
        if self.dlg.mGroupBox_22.isCollapsed() == True:
            self.dlg.mGroupBox_23.setGeometry(11,20,481,81)
            #self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
            
        elif self.dlg.mGroupBox_22.isCollapsed() == False:
            self.dlg.mGroupBox_23.setGeometry(11,340,481,81)
    def colapsar9(self):
        #self.dlg.mGroupBox_5.isCollapsed()
        if self.dlg.mGroupBox_13.isCollapsed() == True:
            self.dlg.mGroupBox_28.setGeometry(11,20,481,81)
            #self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
            
        elif self.dlg.mGroupBox_13.isCollapsed() == False:
            self.dlg.mGroupBox_28.setGeometry(11,480,481,81)
    def colapsar5(self):
        #self.dlg.mGroupBox_5.isCollapsed()
        if self.dlg.mGroupBox_8.isCollapsed() == True:
            self.dlg.mGroupBox_9.setGeometry(11,170,481,81)
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,330,481,169)
                self.dlg.mGroupBox_10.setGeometry(11,190,481,141)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,210,481,169)


            else:
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,280,481,169)
                self.dlg.mGroupBox_10.setGeometry(11,260,481,141)
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
            #self.dlg.mGroupBox_8.setFixedSize(481,20)
            #self.dlg.mGroupBox_12.setGeometry(10,555,481,391)
            
        elif self.dlg.mGroupBox_8.isCollapsed() == False:
            if self.dlg.mGroupBox_9.isCollapsed() == False:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,520,481,169)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,460,481,169)
                self.dlg.mGroupBox_10.setGeometry(11,320,481,141)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,340,481,169)
            else:
                self.dlg.mGroupBox_10.setGeometry(11,380,481,141)
            self.dlg.mGroupBox_9.setGeometry(11,300,481,81)
            
            #self.dlg.mGroupBox_12.setGeometry(10,710,481,391)
            #self.dlg.mGroupBox_8.setFixedSize(481,169)

        #print(self.dlg.mGroupBox_8.isCollapsed())
    def colapsar6(self):
        if self.dlg.mGroupBox_8.isCollapsed() == True:
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                self.dlg.mGroupBox_10.setGeometry(11,190,481,141)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,210,481,169)
                elif self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,330,481,169)
            elif self.dlg.mGroupBox_9.isCollapsed() == False:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,280,481,169)
            
                self.dlg.mGroupBox_10.setGeometry(11,260,481,141)
                
        else:
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,460,481,169)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,340,481,169)
                self.dlg.mGroupBox_10.setGeometry(11,320,481,141)
            elif self.dlg.mGroupBox_9.isCollapsed() == False:
                if self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,520,481,169)
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
                self.dlg.mGroupBox_10.setGeometry(11,381,481,141)

        #print(self.dlg.mGroupBox.isCollapsed())
    def colapsar7(self):
        if self.dlg.mGroupBox_8.isCollapsed() == True:
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    self.dlg.mGroupBox_11.setGeometry(11,210,481,169)
                elif self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,330,481,169)
                    #self.dlg.mGroupBox_10.setFixedSize(481,169)
            else:
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    #self.dlg.mGroupBox_10.setFixedSize(481,20)
                    self.dlg.mGroupBox_11.setGeometry(11,280,481,169)
                elif self.dlg.mGroupBox_10.isCollapsed() == False:
                    #self.dlg.mGroupBox_10.setFixedSize(481,169)
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
        else:
            if self.dlg.mGroupBox_9.isCollapsed() == True:
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    #self.dlg.mGroupBox_10.setFixedSize(481,20)
                    self.dlg.mGroupBox_11.setGeometry(11,340,481,169)
                elif self.dlg.mGroupBox_10.isCollapsed() == False:
                    self.dlg.mGroupBox_11.setGeometry(11,460,481,169)
                    #self.dlg.mGroupBox_10.setFixedSize(481,169)
            else:
                
                if self.dlg.mGroupBox_10.isCollapsed() == True:
                    #self.dlg.mGroupBox_10.setFixedSize(481,20)
                    self.dlg.mGroupBox_11.setGeometry(11,400,481,169)
                elif self.dlg.mGroupBox_10.isCollapsed() == False:
                    #self.dlg.mGroupBox_10.setFixedSize(481,169)
                    self.dlg.mGroupBox_11.setGeometry(11,520,481,169)

        #print(self.dlg.mGroupBox_10.isCollapsed())
    def fun7(self):
        self.CCV = CertCveValor.selectDirectory2(self) 
    def fun8(self):
        self.CCV = CertCveValor.generarDoc2(self) 
        self.cancelaSeleccion2()
    def fun9(self):
        self.CCV = CertCveValor.activarSeleccion2(self) 
        
        self.xCvesVert.selectionChanged.connect(self.fun23)
        self.xManzana.selectionChanged.connect(self.fun23)
        self.xPredGeom.selectionChanged.connect(self.fun23)
        self.xPredNum.selectionChanged.connect(self.fun23)
        self.xConst.selectionChanged.connect(self.fun23)
        self.xHoriGeom.selectionChanged.connect(self.fun23)
        self.xHoriNum.selectionChanged.connect(self.fun23)
        self.xVert.selectionChanged.connect(self.fun23)
        self.xCvesVert.selectionChanged.connect(self.fun23)
    def fun10(self):
        self.CCV = CertCveValor.lineEditToUpper2(self) 
    def fun11(self):
        self.CA = CertAportes.selectDirectory3(self) 
    def fun12(self):
        self.CA = CertAportes.generarDoc3(self)
        self.cancelaSeleccion3()
    def fun13(self):
        self.CA = CertAportes.activarSeleccion3(self)
        
        self.xCvesVert.selectionChanged.connect(self.fun24)
        self.xManzana.selectionChanged.connect(self.fun24)
        self.xPredGeom.selectionChanged.connect(self.fun24)
        self.xPredNum.selectionChanged.connect(self.fun24)
        self.xConst.selectionChanged.connect(self.fun24)
        self.xHoriGeom.selectionChanged.connect(self.fun24)
        self.xHoriNum.selectionChanged.connect(self.fun24)
        self.xVert.selectionChanged.connect(self.fun24)
        self.xCvesVert.selectionChanged.connect(self.fun24)
    def fun14(self):
        self.CA = CertAportes.lineEditToUpper3(self) 

    def fun15(self):
        self.GDCC = ConstIdentificacion.selectDirectory4(self) 
    def fun16(self):
        self.GDCC = ConstIdentificacion.generarDoc4(self)
        self.cancelaSeleccion4()
    def fun17(self):
        self.GDCC = ConstIdentificacion.activarSeleccion4(self)
        self.xCvesVert.selectionChanged.connect(self.fun25)
        self.xManzana.selectionChanged.connect(self.fun25)
        self.xPredGeom.selectionChanged.connect(self.fun25)
        self.xPredNum.selectionChanged.connect(self.fun25)
        self.xConst.selectionChanged.connect(self.fun25)
        self.xHoriGeom.selectionChanged.connect(self.fun25)
        self.xHoriNum.selectionChanged.connect(self.fun25)
        self.xVert.selectionChanged.connect(self.fun25)
        self.xCvesVert.selectionChanged.connect(self.fun25)
    def fun18(self):
        self.GDCC = ConstIdentificacion.lineEditToUpper4(self) 
    def fun19(self):
        self.GDCC = gen_doc_calvecat.selectDirectory5(self) 
    def fun20(self):
        self.GDCC = gen_doc_calvecat.generarDoc5(self)
        self.cancelaSeleccion5()
    def fun21(self):
        self.GDCC = gen_doc_calvecat.activarSeleccion5(self)
       
        self.xCvesVert.selectionChanged.connect(self.fun26)
        self.xManzana.selectionChanged.connect(self.fun26)
        self.xPredGeom.selectionChanged.connect(self.fun26)
        self.xPredNum.selectionChanged.connect(self.fun26)
        self.xConst.selectionChanged.connect(self.fun26)
        self.xHoriGeom.selectionChanged.connect(self.fun26)
        self.xHoriNum.selectionChanged.connect(self.fun26)
        self.xVert.selectionChanged.connect(self.fun26)
        self.xCvesVert.selectionChanged.connect(self.fun26)
    def fun22(self):
        self.GDCC = gen_doc_calvecat.lineEditToUpper5(self)       

    def fun(self):
        self.CCC = CertCveCatastral.selectDirectory(self) 
    def fun1(self):
        self.CCC = CertCveCatastral.generarDoc(self)
        self.cancelaSeleccion()
    def cancelaSeleccion(self):
        if self.abrePredio:
            self.dlg.btnSeleccionar.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus("Listo...", "ok")
            self.abrePredio = False

    def fun2(self):
        self.CCC = CertCveCatastral.activarSeleccion(self)
     
        self.xManzana.selectionChanged.connect(self.fun5)
        self.xPredGeom.selectionChanged.connect(self.fun5)
        self.xPredNum.selectionChanged.connect(self.fun5)
        self.xConst.selectionChanged.connect(self.fun5)
        self.xHoriGeom.selectionChanged.connect(self.fun5)
        self.xHoriNum.selectionChanged.connect(self.fun5)
        self.xVert.selectionChanged.connect(self.fun5)


    def fun3(self):
        self.CCC = CertCveCatastral.lineEditToUpper(self)

    def fun4(self):
        self.ACA.abrirCedula()
        self.abrirCedula()
        self.cancelaAperturaCedula()
        
    def abrirCedula(self):
        self.cambiarStatusCedula("Seleccione un predio...", "ok")
        self.iface.actionSelect().trigger()
        self.canvas.setCursor(self.cursorRedondo)
        self.dlg.btnAbrirCedula.setEnabled(False)
        self.abrePredio = True
    def cancelaAperturaCedula(self):
        self.abrePredio = False
        self.dlg.btnAbrirCedula.setEnabled(True)

        '''self.xPredGeom.removeSelection()
        self.xHoriGeom.removeSelection()
        self.xCvesVert.removeSelection()'''
        self.canvas.refresh()
        # regresa herramienta de seleccion normal
        self.iface.actionSelect().trigger()
        self.cambiarStatusCedula("Listo...", "ok")
    def fun5(self):
        self.CCC = CertCveCatastral.seleccionaClave(self)
    def fun23(self):
        self.CCV = CertCveValor.seleccionaClave2(self)
    def fun24(self):
        self.CA = CertAportes.seleccionaClave3(self)
    def fun25(self):
        self.CI = ConstIdentificacion.seleccionaClave4(self)
    def fun26(self):
        self.GDCC = gen_doc_calvecat.seleccionaClave5(self)

    def fun6(self):
        self.ACA.DFS = self.DFS
        self.ACA.pintarCapas()
        self.ACA.UTI = self.UTI
        self.cargacombo()
    def cancelarFusion(self):
        self.dlg.comboBox.clear()
        self.dlg.label_38.setText('-----')
        self.dlg.label_40.setText('-----')
        self.dlg.label_42.setText('-----')
        self.dlg.label_44.setText('-----')
        self.dlg.comboBox.setEnabled(False)
        self.dlg.label_38.setEnabled(False)
        self.dlg.label_40.setEnabled(False)
        self.dlg.label_42.setEnabled(False)
        #self.dlg.btnApagarHerramientas.setEnabled(False)
        #self.dlg.btnConfirmarCortes.setEnabled(False)
        #self.dlg.btnDeshacerTodo.setEnabled(False)

        self.dlg.label_44.setEnabled(False)
        self.dlg.btnConfirmar.setEnabled(False)
        self.dlg.btnCancelar.setEnabled(False)
    def validar(self):
        self.dlg.listWidget.clear()
        self.dlg.listWidget_2.clear()
        self.dlg.listWidget_3.clear()
        self.dlg.listWidget_4.clear()
        self.dlg.listWidget_5.clear()
        self.dlg.listWidget_6.clear()
        self.dlg.listWidget_7.clear()
        self.dlg.listWidget_8.clear()
        self.dlg.mGroupBox_14.setTitle('Manzana    ')
        self.dlg.mGroupBox_15.setTitle('Predio    ')
        self.dlg.mGroupBox_16.setTitle('Predio Num    ')
        self.dlg.mGroupBox_17.setTitle('Construcciones   ')
        self.dlg.mGroupBox_18.setTitle('Horizontales Geom    ')
        self.dlg.mGroupBox_19.setTitle('Horizontales Num    ')
        self.dlg.mGroupBox_20.setTitle('Verticales    ')
        self.dlg.mGroupBox_21.setTitle('Cves Verticales   ')
        self.TPG.DFS = self.DFS
        self.TPG.DBJ = self.DBJ
        self.TPG.ELM = self.ELM
        self.TPG.DFS = self.DFS
        self.TPG.CMS = self.CMS
        self.todoEnOrden = True
        if self.todoEnOrden:
            self.TPG.validarTopologiaManual()
            self.manual()
            print(self.todoEnOrden)
    def validarRef(self):
        self.dlg.listWidget.clear()
        self.dlg.listWidget_2.clear()
        self.dlg.listWidget_3.clear()
        self.dlg.listWidget_4.clear()
        self.dlg.listWidget_5.clear()
        self.dlg.listWidget_6.clear()
        self.dlg.listWidget_7.clear()
        self.dlg.listWidget_8.clear()
        self.dlg.mGroupBox_14.setTitle('Manzana    ')
        self.dlg.mGroupBox_15.setTitle('Predio    ')
        self.dlg.mGroupBox_16.setTitle('Predio Num    ')
        self.dlg.mGroupBox_17.setTitle('Construcciones   ')
        self.dlg.mGroupBox_18.setTitle('Horizontales Geom    ')
        self.dlg.mGroupBox_19.setTitle('Horizontales Num    ')
        self.dlg.mGroupBox_20.setTitle('Verticales    ')
        self.dlg.mGroupBox_21.setTitle('Cves Verticales   ')
        if self.ACA.capaEnEdicion != '':

            self.todoEnOrdenRef = True
            QSettings().setValue("posibleGuardarRef", "False")

            #self.dockwidget.tablaErrores.clearContents()
            #self.dockwidget.tablaErrores.setRowCount(0)
            #for row in range(0, self.dockwidget.tablaErrores.rowCount()):
                #self.dockwidget.tablaErrores.removeRow(row)

            root = QgsProject.instance().layerTreeRoot()

            group = root.findGroup('ERRORES DE TOPOLOGIA')
            if not group is None:
                for child in group.children():
                    dump = child.dump()
                    id = dump.split("=")[-1].strip()
                    QgsProject.instance().removeMapLayer(id)
                root.removeChildNode(group)

            for layer in iface.mapCanvas().layers():
                layer.triggerRepaint()

            root.insertGroup(0, 'ERRORES DE TOPOLOGIA')

            if self.siendoEditada('Municipios'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Municipios')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

            elif self.siendoEditada('Sectores'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Sectores')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

                errorGeomInvalid = self.validarPoligonosInvalidosRef('Municipios')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

            elif self.siendoEditada('Calles'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Calles')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

            elif self.siendoEditada('Colonias'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Colonias')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

            elif self.siendoEditada('Codigo Postal'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Codigo Postal')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)

            elif self.siendoEditada('Area de Valor'):
                errorGeomInvalid = self.validarPoligonosInvalidosRef('Area de Valor')
                if errorGeomInvalid != None:
                    self.erroresRestantes.append(errorGeomInvalid)


            if self.todoEnOrdenRef:
                self.reglasManualesRef()

                if(self.todoEnOrdenRef): #Topologia en orden
                    self.UTI.mostrarAlerta("La topologia es correcta", QMessageBox().Information, "Comprobador de topología")
                    QSettings().setValue("posibleGuardarRef", "True")
                    root = QgsProject.instance().layerTreeRoot()
                    #Si todo esta bien, borramos el grupo de errores
                    group = root.findGroup('ERRORES DE TOPOLOGIA')
                    if not group is None:
                        for child in group.children():
                            dump = child.dump()
                            id = dump.split("=")[-1].strip()
                            QgsProject.instance().removeMapLayer(id)
                        root.removeChildNode(group)

                    # se manda a guardar a los servicios
                    self.preguntarGuardarRef()

                else: #Cuando hay errrpres
                    self.UTI.mostrarAlerta("Se han detectado errores de topologia", QMessageBox().Critical, "Comprobador de topología")
                    self.VET = errores_topologicos.errores_topologicos(iface, self.erroresPredio, self.erroresManzana, self.erroresConstrucciones, self.erroresRestantes)
                    self.VET.run()
                    return
            else:
                self.UTI.mostrarAlerta("El comprobador de topología no puede proceder hasta que se corrijan las geometrias inválidas", QMessageBox().Critical, "Comprobador de topología")

        else:
            self.UTI.mostrarAlerta("Debes tener en edicion una capa de referencia para validar la topologia de referencia", QMessageBox().Critical, "Comprobador de topología")
    def reglasManualesRef(self):

        if self.siendoEditada('Municipios'):
            capa = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('Municipios'))
            errorLongiud = self.validarLongitudCampo(capa, 'Clave', 3)
            if errorLongiud != None:
                self.erroresRestantes.append(errorLongiud)
        
        if self.siendoEditada('Sectores'):

            self.validarClavesNoRepetida('Sectores')

            # que todos los sectores esten dentro de los municipios
            errorInlucsion = self.validarInclusionRef('Sectores', 'Municipios')
            if errorInlucsion != None:
                self.erroresRestantes.append(errorInlucsion)

            # longitud en los campos
            capa = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('Sectores'))
            errorLongiud = self.validarLongitudCampo(capa, 'clave', 2)
            if errorLongiud != None:
                self.erroresRestantes.append(errorLongiud)

            # las claves no sean invalidas
            claveFiltro = QSettings().value("cveMpio")
            tipo = 'SECTOR'

            errorClaves = self.validarClavesInvalidas(capa = capa, claveFiltro = claveFiltro, tipo = tipo)
            if errorClaves != None:
                self.erroresRestantes.append(errorClaves)
        
        capaTraducida = self.ACA.traducirIdCapa(self.ACA.capaEnEdicion)

        errorCampos = self.validarCamposRef(capaTraducida)
        if errorCampos != None:
            self.erroresRestantes.append(errorCampos)
        errorInlucsion = self.validarInterseccionesRef(capaTraducida, capaTraducida)
        if errorInlucsion != None:
            self.erroresRestantes.append(errorInlucsion)
    def siendoEditada(self, nombreCapa):
        return self.ACA.obtenerIdCapa(nombreCapa) == QSettings().value("capaRefEdicion")
    def llenaTablaErrores(self):
        if self.TPG.reglas.cuentaError > 0:
            manzanasTotales = self.xManzana.featureCount()
            prediosTotales = self.xPredGeom.featureCount()
            prediosnumTotales = self.xPredNum.featureCount()
            constTotales = self.xConst.featureCount()
            horizontalesTotales = self.xHoriGeom.featureCount()
            horizontalesnumTotales = self.xHoriNum.featureCount()
            verticalesTotales = self.xVert.featureCount()
            verticalescveTotales = self.xCvesVert.featureCount()
            self.todoEnOrden = False
            self.todoEnOrdenRef = False
            if self.TPG.reglas.stringError.count('manzana') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget.addItem(item)
                if manzanasTotales >=1:
                    self.dlg.mGroupBox_14.setTitle('Manzana    ' + 'Analizados: ' + str(manzanasTotales) + '  Errores  ' + str(self.dlg.listWidget.count()))

                    
            elif self.TPG.reglas.stringError.count('predios.geom') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_2.addItem(item)
                if prediosTotales >=1:
                    self.dlg.mGroupBox_15.setTitle('Predio    ' + 'Analizados: ' + str(prediosTotales) + '  Errores  ' + str(self.dlg.listWidget_2.count()))

            elif self.TPG.reglas.stringError.count('predios.num') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_3.addItem(item)
                if prediosnumTotales >=1:
                    self.dlg.mGroupBox_16.setTitle('Predio num   ' + 'Analizados: ' + str(prediosnumTotales) + '  Errores  ' + str(self.dlg.listWidget_3.count()))

            elif self.TPG.reglas.stringError.count('construcciones') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_4.addItem(item)
                if constTotales >=1:
                    self.dlg.mGroupBox_17.setTitle('Construcciones    ' + 'Analizados: ' + str(constTotales) + '  Errores  ' + str(self.dlg.listWidget_4.count()))

            elif self.TPG.reglas.stringError.count('horizontales.geom') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_5.addItem(item)
                if horizontalesTotales >=1:
                    self.dlg.mGroupBox_18.setTitle('Horizontales Geom    ' + 'Analizados: ' + str(horizontalesTotales) + '  Errores  ' + str(self.dlg.listWidget_5.count()))

            elif self.TPG.reglas.stringError.count('horizontales.num') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_6.addItem(item)
                if horizontalesnumTotales >=1:
                    self.dlg.mGroupBox_19.setTitle('Horizontales Num    ' + 'Analizados: ' + str(horizontalesnumTotales) + '  Errores  ' + str(self.dlg.listWidget_6.count()))

            elif self.TPG.reglas.stringError.count('verticales') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_7.addItem(item)
                if verticalesTotales >=1:
                    self.dlg.mGroupBox_20.setTitle('Verticales    ' + 'Analizados: ' + str(verticalesTotales) + '  Errores  ' + str(self.dlg.listWidget_7.count()))

            elif self.TPG.reglas.stringError.count('cves_verticales') >= 1:
                item = self.TPG.reglas.stringError
                self.dlg.listWidget_8.addItem(item)
                if verticalescveTotales >=1:
                    self.dlg.mGroupBox_21.setTitle('Cves Verticales    ' + 'Analizados: ' + str(verticalescveTotales) + '  Errores  ' + str(self.dlg.listWidget_8.count()))

    def validarClavesNoRepetida(self, nomCapa):
        self.TPG.reglas.validarClaveNoRepetida(nomCapa)
        self.llenaTablaErrores()
#############################################################################################################

    def validarIntersecciones(self, nombreCapa1, nombreCapa2):
        
        self.TPG.reglas.validarIntersecciones(nombreCapa1, nombreCapa2)
        self.llenaTablaErrores()

###############################################################################################################

    def validarCobertura(self, nombreBase, nombreCobertura):
        
        self.TPG.reglas.validarCobertura(nombreBase, nombreCobertura)
        self.llenaTablaErrores()

###############################################################################################################

    def validarInclusion(self, nombreObjetos, nombreContenedor):
        
        self.TPG.reglas.validarInclusion(nombreObjetos, nombreContenedor)
        self.llenaTablaErrores()

###################################################################################################################

    def validarPoligonosInvalidos(self, nombreCapa):
        
        self.TPG.reglas.validarPoligonosInvalidos(nombreCapa)
        self.llenaTablaErrores()

#####################################################################################################################

    def validarAnillos(self, nombreCapa):
        
        self.TPG.reglas.validarAnillos(nombreCapa)
        self.llenaTablaErrores()

######################################################################################################################

    def validarMultipartes(self, nombreCapa):
        
        self.TPG.reglas.validarMultipartes(nombreCapa)
        self.llenaTablaErrores()

#########################################################################################################################

    def validarDuplicados(self, nombreCapa):
        
        self.TPG.reglas.validarDuplicados(nombreCapa)
        self.llenaTablaErrores()

###########################################################################################################################

    def validarOverlapLineas(self, nombreCapa):
        
        self.TPG.reglas.validarOverlapLineas(nombreCapa)
        self.llenaTablaErrores()

############################################################################################################################

    def validarCompartido(self, nombreObj, nombreBase):
        
        self.TPG.reglas.validarCompartido(nombreObj, nombreBase)
        self.llenaTablaErrores()
##############################################################################################################################

    def validarTocar(self, nombreObj, nombreBase):
        
        self.TPG.reglas.validarTocar(nombreObj, nombreBase)
        self.llenaTablaErrores()
###############################################################################################################################

    def validarPuntoEnPoligono(self, nombrePunto, nombrePoligono):
        self.TPG.reglas.validarPuntoEnPoligono(nombrePunto, nombrePoligono)
        self.llenaTablaErrores()

###############################################################################################################################

    def validarToqueCompartido(self, nombreObj, nombreBase):
            self.TPG.reglas.validarToqueCompartido(nombreObj, nombreBase)
            self.llenaTablaErrores()
###############################################################################################################################

    def validarPoligonosDuplicados(self, nombreCapa):
        
        self.TPG.reglas.validarPoligonosDuplicados(nombreCapa)
        self.llenaTablaErrores()

#############################################################################################################################

    def validarSoloUnPunto(self, nombrePunto, nombrePoligono):
        self.TPG.reglas.validarSoloUnPunto(nombrePunto, nombrePoligono)
        self.llenaTablaErrores()

    def validarCampoNoNulo(self, capa, campo):
        
        self.TPG.reglas.validarCampoNoNulo(capa, campo)
        self.llenaTablaErrores()

###################################################################################

    def validarCampoNoNuloDoble(self, capa, campo1, campo2):
        
        self.TPG.reglas.validarCampoNoNuloDoble(capa, campo1, campo2)
        self.llenaTablaErrores()

##########################################################################################

    def validarCamposDuplicados(self, capaContenedor, capaObjeto, campo):
        
        self.TPG.reglas.validarCamposDuplicados(capaContenedor, capaObjeto, campo)
        self.llenaTablaErrores()
################################################################################################################################

    def validarAlMenosUnPunto(self, nombrePunto, nombrePoligono):
        self.TPG.reglas.validarAlMenosUnPunto(nombrePunto, nombrePoligono)
        self.llenaTablaErrores()
    def validarLongitudCampo(self, capa, campo, longitud):
        self.TPG.reglas.validarLongitudCampo(capa, campo, longitud)
        self.llenaTablaErrores()
    def validarInscritasEnPrediosIrregulares(self):
        
        self.TPG.reglas.validarInscritasEnPrediosIrregulares()
        self.llenaTablaErrores()

##############################################################################################


    def validarAreasInscritasCuadraditas(self):
        
        self.TPG.reglas.validarAreasInscritasCuadraditas()
        self.llenaTablaErrores()

##############################################################################################

    def validarCantidadAreasInscritas(self):
        
        self.TPG.reglas.validarCantidadAreasInscritas()
        self.llenaTablaErrores()
    def validarInclusionRef(self, nombreObjetos, nombreContenedor):
        errorInclusion = self.TPG.reglas.validarInclusionRef(nombreObjetos, nombreContenedor)
        self.llenaTablaErrores2()
        return errorInclusion

##########################################################################

    def validarPoligonosInvalidosRef(self, nombreCapa):
        
        error = self.TPG.reglas.validarPoligonosInvalidosRef(nombreCapa)
        self.llenaTablaErrores2()
        return error

####################################################################################

    def validarCamposRef(self, nombreCapa):
        error = self.TPG.reglas.validarCamposRef(nombreCapa)
        self.llenaTablaErrores2()
        return error

####################################################################################

    def validarInterseccionesRef(self, nombreCapa1, nombreCapa2):
        error = self.TPG.reglas.validarInterseccionesRef(nombreCapa1, nombreCapa2)
        self.llenaTablaErrores2()
        return error
    def preguntarGuardarRef(self):
        mensaje = "La topologia es correcta, ¿deseas guardar los cambios de la capa de referencia?"
        respuesta = QMessageBox.question(iface.mainWindow(), "Guardar Cambios", mensaje, QMessageBox.Yes, QMessageBox.No)

        if respuesta == QMessageBox.Yes:
            self.ACA.guardarCapaReferencia()
            self.dlg.comboCapasEdicion.setEnabled(True)
            self.dlg.botonActivarEdicion.setEnabled(True)
            self.dlg.botonActivarEdicion.setText('Activar Edicion de \nReferencia')
            self.dlg.botonActualizarRef.setEnabled(False)
            self.dlg.botonCancelarReferencia.setEnabled(False)
            self.vaciarTablitaRef()
    def manual(self):
        self.ACA.obtenerXCapas()
        self.validarClavesNoRepetida('manzana')
        self.validarClavesNoRepetida('predios.geom')
        self.validarClavesNoRepetida('horizontales.geom')
        self.validarClavesNoRepetida('verticales')

        self.TPG.validaClavesInvalidasManzanasPredios()
        
        self.validarIntersecciones(self.xPredGeom, self.xPredGeom)
        self.validarIntersecciones(self.xManzana, self.xManzana)
        self.validarIntersecciones(self.xHoriGeom, self.xHoriGeom)
        self.validarIntersecciones(self.xHoriGeom, self.xVert)
        
        self.validarCobertura(self.xManzana, self.xPredGeom)
        
        self.validarInclusion(self.xPredGeom, self.xManzana)
        
        self.validarAnillos(self.xPredGeom)
        self.validarAnillos(self.xManzana)
        self.validarAnillos(self.xVert)
        self.validarAnillos(self.xHoriGeom)
    
        self.validarMultipartes(self.xManzana)
        self.validarMultipartes(self.xPredGeom)
        self.validarMultipartes(self.xConst)
        self.validarMultipartes(self.xHoriGeom)
        self.validarMultipartes(self.xVert)
        
        self.validarDuplicados(self.xCvesVert)
        self.validarDuplicados(self.xPredNum)
        self.validarDuplicados(self.xVert)
        
        self.validarToqueCompartido(self.xConst, self.xPredGeom)
        
        self.validarPuntoEnPoligono(self.xCvesVert, self.xVert)
        self.validarPuntoEnPoligono(self.xPredNum, self.xPredGeom)
        self.validarPuntoEnPoligono(self.xHoriNum, self.xHoriGeom)

        self.validarSoloUnPunto(self.xPredNum, self.xPredGeom)
        self.validarSoloUnPunto(self.xHoriNum, self.xHoriGeom)

        self.validarAlMenosUnPunto(self.xCvesVert, self.xVert)

        self.validarPoligonosDuplicados(self.xConst)

        self.validarInscritasEnPrediosIrregulares()
        self.validarAreasInscritasCuadraditas()
        self.validarCantidadAreasInscritas()
        
        self.validarLongitudCampo(self.xManzana, 'clave', 3)
        self.validarLongitudCampo(self.xPredGeom, 'clave', 2)
        self.validarLongitudCampo(self.xHoriGeom, 'clave', 6)
        self.validarLongitudCampo(self.xVert, 'clave', 2)
        self.validarLongitudCampo(self.xCvesVert, 'clave', 4)

        self.validarCampoNoNulo(self.xManzana, 'clave')
        self.validarCampoNoNulo(self.xPredGeom, 'clave')
        self.validarCampoNoNulo(self.xPredNum, 'numExt')
        self.validarCampoNoNulo(self.xConst, 'nom_volumen')
        self.validarCampoNoNuloDoble(self.xConst, 'num_niveles', 'cve_const_esp')
        self.validarCampoNoNulo(self.xHoriGeom, 'clave')
        self.validarCampoNoNulo(self.xHoriNum, 'num_ofi')
        self.validarCampoNoNulo(self.xVert, 'clave')
        self.validarCampoNoNulo(self.xCvesVert, 'clave')
        
        
        #self.validarCamposDuplicados(self.xManzana, self.xPredGeom, 'clave')
        self.TPG.validarCamposDuplicados(self.xPredGeom, self.xConst, 'nom_volumen')
    def llenaTablaErrores2(self):
        header = self.dlg.tablaErrores.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        if self.TPG.reglas.cuentaError > 0:
            self.todoEnOrden = False
            self.todoEnOrdenRef = False
            self.dlg.tablaErrores.insertRow(self.dlg.tablaErrores.rowCount())
            item = QTableWidgetItem(self.reglas.stringError)
            self.dlg.tablaErrores.setItem(self.dlg.tablaErrores.rowCount()-1, 0 , item)
    def fusion(self):
        self.dlg.comboBox.clear()
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.DFS.preguntarFusion()
        if iface.activeLayer() != None:
            seleccion = self.iface.activeLayer().selectedFeatures()
            if len(seleccion) == 2:
                for i in seleccion:
                    self.dlg.comboBox.addItem(str(i['clave']))
        else:
            self.UTI.mostrarAlerta('La fusion requiere la seleccion de exactamente 2 predios contiguos', QMessageBox().Critical, 'Error de fusion')
        self.dlg.comboBox.setEnabled(True)
        self.dlg.label_38.setEnabled(True)
        self.dlg.label_40.setEnabled(True)
        self.dlg.label_42.setEnabled(True)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.label_44.setEnabled(True)
        self.dlg.btnConfirmar.setEnabled(True)
        self.dlg.btnCancelar.setEnabled(True)
    def confusion(self):
        self.current = self.dlg.comboBox.currentIndex()
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.DFS.fusionarPredios(self.current)
    def indexcombo(self):
        listaPredio =[]
        #self.consumirPredios()
        self.cla = self.dlg.comboBox.currentText()
        if iface.activeLayer() != None:
            listaPredio.clear()
            seleccion = self.iface.activeLayer().selectedFeatures()
            self.VentanaFusion.dlg.close()
            if self.DFS.validarCuentaSeleccion(): #Si la seleccion es valida
                for i in seleccion:
                    self.id = self.DFS.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllfactures + str(i['id']) )
                    if not self.id:
                        return
                    listaPredio.append(self.id)
                #print(listaPredio)
                if self.dlg.comboBox.currentIndex() == 0:      
                    self.dlg.label_38.setText(str(listaPredio[0]['numExt']))
                    self.dlg.label_40.setText(str(listaPredio[0]['fondo']))
                    self.dlg.label_42.setText(str(listaPredio[0]['frente']))
                    self.dlg.label_44.setText(str(listaPredio[0]['supTerr']))
                if self.dlg.comboBox.currentIndex() == 1:
                    self.dlg.label_38.setText(str(listaPredio[1]['numExt']))
                    self.dlg.label_40.setText(str(listaPredio[1]['fondo']))
                    self.dlg.label_42.setText(str(listaPredio[1]['frente']))
                    self.dlg.label_44.setText(str(listaPredio[1]['supTerr'])) 
        
            
    def seleccionar(self):
        self.capaPredio = None
        self.capaPredio = QgsProject.instance().mapLayer(self.DFS.ACA.obtenerIdCapa('predios.geom'))

        if self.capaPredio:
            self.capaPredio.selectionChanged.connect(self.VentanaClaves.cargarAsignacionManual)
        self.seleccion = self.capaPredio.selectedFeatures()
        self.VentanaClaves.seleccion = self.seleccion
        if self.capaPredio == None:
            return
        else:
            if len(self.seleccion) == 1:
                if self.dlg.RdAuto.isChecked() == True:
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.lineEdit.setText(textoItem)
                if self.dlg.RdManual.isChecked() == True:
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.lineEdit_2.setText(textoItem)
    def AsignarClave(self):
        if self.dlg.RdAuto.isChecked() == True:
            self.dlg.RdManual.setChecked(False)
            self.VentanaClaves.predioOriginal = self.predioEnDivision
            self.VentanaClaves.obtieneCapaPredios()
            self.VentanaClaves.asignacionAutomatica()
        if self.dlg.RdManual.isChecked() == True:
            self.capaPredio = None
            self.capaPredio = QgsProject.instance().mapLayer(self.DFS.ACA.obtenerIdCapa('predios.geom'))

            if self.capaPredio:
                self.capaPredio.selectionChanged.connect(self.VentanaClaves.cargarAsignacionManual)
            self.seleccion = self.capaPredio.selectedFeatures()
            self.VentanaClaves.seleccion = self.seleccion
            if self.capaPredio == None:
                return
            else:
                if len(self.seleccion) == 1:
                    self.VentanaClaves.predioOriginal = self.predioEnDivision
                    self.VentanaClaves.obtieneCapaPredios()
                    tex = self.dlg.lineEdit_2.text()
                    self.VentanaClaves.asignacionDesManual(tex)  
                    self.dlg.RdAuto.setChecked(False)

    def cargarsub(self):
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.predio = self.dlg.comboPredios.currentText()
        if self.predio == '':
            self.UTI.mostrarAlerta("carge una manzana", QMessageBox().Critical, "Edicion cartografica")
            return
        self.DFS.pasarAModoDivision(self.predio)
        self.dlg.comboPredios.setEnabled(False)
        self.dlg.btnDibujarCortes.setEnabled(False)
        self.dlg.btnEditarCortes.setEnabled(True)
        self.dlg.btnEliminarCortes.setEnabled(True)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.btnSubdividir.setEnabled(True)
        self.dlg.btnCancelarSub.setEnabled(True)
        self.dlg.btnLlamarCalcular.setEnabled(True)
        self.dibujarcorte()
    def cancelarSub(self):
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.DFS.cancelarSubdivision()
        self.eventos.modoDividir = False
        self.eventos.modoEliminar = False
        self.eventos.modoEditar = False
        self.dlg.comboPredios.setEnabled(True)
        self.dlg.btnDibujarCortes.setEnabled(False)
        self.dlg.btnEditarCortes.setEnabled(False)
        self.dlg.btnEliminarCortes.setEnabled(False)
        #self.dlg.btnApagarHerramientas.setEnabled(False)
        #self.dlg.btnConfirmarCortes.setEnabled(False)
        #self.dlg.btnDeshacerTodo.setEnabled(False)

        self.dlg.btnSubdividir.setEnabled(False)
        self.dlg.btnCancelarSub.setEnabled(False)
        self.dlg.btnLlamarCalcular.setEnabled(False)
    def sub(self):
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.predio = self.dlg.comboPredios.currentText()
        #self.geomEnDivision = QgsGeometry()
        #self.predioEnDivision = None
        capaPredios = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('predios.geom'))
        for predio in capaPredios.getFeatures(): #Obtenemos el feature a dividr con base en la clave elegida
            if predio.attributes()[0] == self.predio:
                self.predioEnDivision = predio
                break
        self.geomEnDivision = self.predioEnDivision.geometry()
        geo = QgsGeometry.fromWkt(self.geomEnDivision.asWkt())
        #self.gem = QgsGeometry.fromWkt(self.geomEnDivision.asWkt())
        corte = len(self.eventos.relaciones) - 1
        
        self.confirmarCortes(corte, geo)
        

    def areas(self):
        self.DFS.CFG = self.CFG
        self.DFS.UTI = self.UTI
        self.DFS.DFS = self.DFS
        self.DFS.DBJ = self.DBJ
        self.DFS.ELM = self.ELM
        self.DFS.ACA = self.ACA
        self.DFS.TPG = self.TPG
        self.DFS.irAreas()
        self.dlg.comboPredios.setEnabled(True)
        self.dlg.btnDibujarCortes.setEnabled(True)
        self.dlg.btnEditarCortes.setEnabled(True)
        self.dlg.btnEliminarCortes.setEnabled(True)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.btnSubdividir.setEnabled(True)
        self.dlg.btnCancelarSub.setEnabled(True)
        self.dlg.btnLlamarCalcular.setEnabled(True)
    def eliminarcortes(self):
        self.eventos.modoDividir = False
        self.eventos.modoEliminar = True
        self.eventos.modoEditar = False
        self.dlg.comboPredios.setEnabled(False)
        self.dlg.btnDibujarCortes.setEnabled(True)
        self.dlg.btnEditarCortes.setEnabled(True)
        self.dlg.btnEliminarCortes.setEnabled(False)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.btnSubdividir.setEnabled(True)
        self.dlg.btnCancelarSub.setEnabled(True)
        self.dlg.btnLlamarCalcular.setEnabled(True)
        #iface.mapCanvas().setCursor(self.DBJ.evento.cursorCuadro)
        iface.mapCanvas().setCursor(self.UTI.cursorCuadro)
        if self.eventos.botonAD.isChecked():
            self.eventos.botonAD.trigger()
    def editarcorte(self):
        #self.evento = EventoDivision(iface.mapCanvas(), self, iface.cadDockWidget())
        #iface.mapCanvas().setMapTool(self.evento)
        self.eventos.modoDividir = False
        self.eventos.modoEliminar = False
        self.eventos.modoEditar = True
        self.dlg.comboPredios.setEnabled(False)
        self.dlg.btnDibujarCortes.setEnabled(True)
        self.dlg.btnEditarCortes.setEnabled(False)
        self.dlg.btnEliminarCortes.setEnabled(True)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.btnSubdividir.setEnabled(True)
        self.dlg.btnCancelarSub.setEnabled(True)
        self.dlg.btnLlamarCalcular.setEnabled(True)
        #iface.mapCanvas().setCursor(self.DBJ.eventoss.cursorRedondo)
        iface.mapCanvas().setCursor(self.UTI.cursorRedondo)
        if not self.eventos.botonAD.isChecked():
            self.eventos.botonAD.trigger()
    def dibujarcorte(self):
        self.DFS.encenderModoDividir()
        #self.evento = EventoDivision(iface.mapCanvas(), self, iface.cadDockWidget())
        #iface.mapCanvas().setMapTool(self.evento)
        self.eventos.modoDividir = True
        self.eventos.modoEliminar = False
        self.eventos.modoEditar = False
        self.dlg.comboPredios.setEnabled(False)
        self.dlg.btnDibujarCortes.setEnabled(False)
        self.dlg.btnEditarCortes.setEnabled(True)
        self.dlg.btnEliminarCortes.setEnabled(True)
        #self.dlg.btnApagarHerramientas.setEnabled(True)
        #self.dlg.btnConfirmarCortes.setEnabled(True)
        #self.dlg.btnDeshacerTodo.setEnabled(True)

        self.dlg.btnSubdividir.setEnabled(True)
        self.dlg.btnCancelarSub.setEnabled(True)
        self.dlg.btnLlamarCalcular.setEnabled(True)
        iface.mapCanvas().setCursor(self.UTI.cursorRedondo)
        if not self.eventos.botonAD.isChecked():
            self.eventos.botonAD.trigger()
    def cargacombo(self):
        self.dlg.comboPredios.clear()
        lista = []

        capaPredios = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('predios.geom'))

        if capaPredios is None:
            return

        # lista de features
        for predio in capaPredios.getFeatures():
            lista.append(str(predio['clave']))

        lista.sort()
        for elemento in lista:
            self.dlg.comboPredios.addItem(elemento)
    def funlimpiar(self):
        self.ACA.limpiaArea()
    def funmarcadores(self):
        self.ACA.CFG = self.CFG
        self.ACA.UTI = self.UTI
        self.ACA.DFS = self.DFS
        self.ACA.DBJ = self.ACA
        self.ACA.ELM = self.ELM
        self.ACA.TPG = self.TPG
        self.ceck = self.dlg.checkVertManzana_2.isChecked()
        self.ceck1 = self.dlg.checkVertPredio_2.isChecked()
        self.ceck2 = self.dlg.checkVertConst_2.isChecked()
        #print(self.ceck)
        self.ACA.actualizarMarcadores(self.ceck, self.ceck1, self.ceck2)
    def funcarga(self):
        self.combo = self.dlg.comboCapaReferencia_2.currentText()
        self.check = self.dlg.checkTodasGeom_2.isChecked()
        self.ACA.intermediarioReferencia(self.combo, self.check)
    def funlimpiars(self):
        self.ACA.limpiarReferencias()
        #print(self.combo)
    def llenarComboReferencias(self):
        self.dlg.comboCapaReferencia_2.clear()
        #self.dlg.comboCapaReferencia_2.addItem('Estado', 'e_estado')
        #self.dlg.comboCapaReferencia_2.addItem('Region Catastral', 'e_region_carto')
        self.dlg.comboCapaReferencia_2.addItem('Municipios', 'e_municipio')
        #self.dlg.comboCapaReferencia_2.addItem('Secciones', 'e_seccion')
        #self.dlg.comboCapaReferencia_2.addItem('Localidades', 'e_localidad')
        self.dlg.comboCapaReferencia_2.addItem('Sectores', 'e_sector')
        self.dlg.comboCapaReferencia_2.addItem('Manzanas', 'e_manzana')
        self.dlg.comboCapaReferencia_2.addItem('Predios', 'e_predio')
        self.dlg.comboCapaReferencia_2.addItem('Calles', 'vw_calle')
        self.dlg.comboCapaReferencia_2.addItem('Colonias', 'e_colonia')
        self.dlg.comboCapaReferencia_2.addItem('Codigo Postal', 'e_cp')
        #self.dlg.comboCapaReferencia_2.addItem('Zona Uno', 'e_zona_uno')
        #self.dlg.comboCapaReferencia_2.addItem('Zona Dos', 'e_zona_dos')
        self.dlg.comboCapaReferencia_2.addItem('Area de Valor', 'e_area_valor')
        self.dlg.comboCapaReferencia_2.addItem('Corredor de Valor', 'e_corredor_valor')
    def fundibujo(self):
        self.DBJ.CFG = self.CFG
        self.DBJ.UTI = self.UTI
        self.DBJ.DFS = self.DFS
        self.DBJ.ACA = self.ACA
        self.DBJ.ELM = self.ELM
        self.DBJ.DFS = self.DFS
        self.DBJ.TPG = self.TPG
        self.capaActiva = iface.activeLayer()
        self.DBJ.actualizarCapaActiva()
        self.DBJ.alternarModoDibujo()
        self.ventana = DibujoV3.VentanaDibujoV3(iface, self)
        #idCapa = self.capaActiva.id()
        #self.posibleMostar = True
        if self.capaActiva is not None: #Cuando la capa es seleccionada habilitamos

            if self.esCapaValida():
                if self.mododibujo:
                    
                    self.mododibujo = False
                    self.dlg.label_21.setText("DESACTIVADO")
                    estilo = """color: rgb(255, 0, 0);
        """ 
                    self.dlg.label_21.setStyleSheet(estilo)

                else:
                    self.mododibujo = True
                    self.dlg.label_21.setText("ACTIVADO")
                    estilo = """color: rgb(1, 239, 1);
    """               
                    self.dlg.label_21.setStyleSheet(estilo)
                    #self.desactivar() 
                    '''if self.click == True:
                        self.tool = AdvancedMapTool(iface.mapCanvas(), iface.cadDockWidget(), self)
                        iface.mapCanvas().setMapTool(self.tool)'''
                    #self.mapTool.canvas.setCursor(self.cursorRedondo)
                    
        
        else:
            self.UTI.mostrarAlerta("Seleccione una capa", QMessageBox().Critical, "Dibujo")       #if self.ventana.posibleMostar:
                  #self.desactivar()

        


            #print("actualizarCapaActiva : False")

    def esCapaValida(self):
        
        if self.capaActiva.id() == self.ACA.obtenerIdCapa('manzana'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('predios.geom'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('predios.num'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('construcciones'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('horizontales.geom'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('horizontales.num'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('verticales'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('cves_verticales'):
            return True
        
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Area de Valor'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Zona Uno'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Zona Dos'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Codigo Postal'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Colonias'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Calles'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Sectores'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Localidades'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Secciones'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Municipios'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Region Catastral'):
            return True
        elif self.capaActiva.id() == self.ACA.obtenerIdCapa('Estado'):
            return True


        else:
            return False

    def funeliminar(self):
        self.ELM.CFG = self.CFG
        self.ELM.UTI = self.UTI
        self.ELM.DFS = self.DFS
        self.ELM.DBJ = self.DBJ
        self.ELM.ACA = self.ACA
        self.ELM.DFS = self.DFS
        self.ELM.TPG = self.TPG
        self.ELM.alternarEliminar()
        self.alternarEliminar()
        self.ELM.agregarFuncionEliminar()
    def alternarEliminar(self):

        if self.modoEliminar:
            
            self.modoEliminar = False
            self.dlg.label_22.setText("DESACTIVADO")
            estilo = """color: rgb(255, 0, 0);
"""
            self.dlg.label_22.setStyleSheet(estilo)


        else:

            iface.actionSelect().trigger()
            self.modoEliminar = True
            self.dlg.label_22.setText("ACTIVADO")
            estilo = """color: rgb(1, 239, 1);
"""
            self.dlg.label_22.setStyleSheet(estilo)
    def funguardar(self, nombreCapa):
        self.ACA.DFS = self.DFS
        #self.ACA.validarEdicion()
        #self.ACA.actualizarFeature()
        self.ACA.UTI = self.UTI
        self.clave = self.dlg.fldPredio.text()
        self.clave2 = self.dlg.fldConst.text()
        self.ACA.validarEdicion(cla = str(self.clave), cla2 = str(self.clave2))
        #print(self.clave)
        #print(self.clave2)
        
    def funedicionatributos(self):
        self.capaActiva = iface.activeLayer()
       
        if self.capaActiva == None:
            return
            #self.cambiarStatus("---", "error")
        else:
            self.seleccion = self.capaActiva.selectedFeatures()
            self.listaEtiquetas = []
            if(len(self.seleccion) == 1):
                if self.capaActiva.id() == self.obtenerIdCapa('manzana'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.label_26.setText('     Clave')
                    self.dlg.label_27.setText('      ----')
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('predios.geom'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('     Clave')
                    self.dlg.label_27.setText('      ----')

                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('predios.num'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('   No Exterior')
                    self.dlg.label_27.setText('      ----')
                    
                    textoItem = str(self.seleccion[0]['numExt'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)  
                elif self.capaActiva.id() == self.obtenerIdCapa('horizontales.geom'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('     Clave')
                    self.dlg.label_27.setText('      ----')
                    
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('horizontales.num'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText(' Numero Oficial')
                    self.dlg.label_27.setText('      ----')
                    
                    textoItem = str(self.seleccion[0]['num_ofi'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('verticales'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('     Clave')
                    self.dlg.label_27.setText('      ----')
                    
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('cves_verticales'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('     Clave')
                    self.dlg.label_27.setText('      ----')
                    textoItem = str(self.seleccion[0]['clave'])
                    self.dlg.fldPredio.setText(textoItem)
                    self.dlg.fldConst.setEnabled(False)
                elif self.capaActiva.id() == self.obtenerIdCapa('construcciones'):
                    self.listaAtributos = ['clave']
                    self.listaEtiquetas = ['Clave']
                    self.dlg.label_26.setText('     Volumen')
                    self.dlg.label_27.setText('     Niveles')
                    
                    textoItem = str(self.seleccion[0]['nom_volumen'])
                    self.dlg.fldPredio.setText(textoItem)
                    textoItem2 = str(self.seleccion[0]['num_niveles'])
                    self.dlg.fldConst.setText(textoItem2)
                    self.dlg.fldConst.setEnabled(True)
    def obtenerIdCapa(self, nombreCapa):

        if nombreCapa == "manzana":
            return QSettings().value('xManzana')
        elif nombreCapa == "predios.geom":
            return QSettings().value('xPredGeom')
        elif nombreCapa == "predios.num":
            return QSettings().value('xPredNum')
        elif nombreCapa == "construcciones":
            return QSettings().value('xConst')
        elif nombreCapa == "horizontales.geom":
            return QSettings().value('xHoriGeom')
        elif nombreCapa == "horizontales.num":
            return QSettings().value('xHoriNum')
        elif nombreCapa == "verticales":
            return QSettings().value('xVert')
        elif nombreCapa == "cves_verticales":
            return QSettings().value('xCvesVert')
        elif nombreCapa == "Area de Valor":
            return QSettings().value('xAreaValor')
        elif nombreCapa == "Zona Uno":
            return QSettings().value('xZonaUno')
        elif nombreCapa == "Zona Dos":
            return QSettings().value('xZonaDos')
        elif nombreCapa == "Codigo Postal":
            return QSettings().value('xCP')
        elif nombreCapa == "Corredor de Valor":
            return QSettings().value('xCorrValor')
        elif nombreCapa == "Colonias":
            return QSettings().value('xColonia')
        elif nombreCapa == "Calles":
            return QSettings().value('xCalle')
        elif nombreCapa == "Sectores":
            return QSettings().value('xSector')
        elif nombreCapa == "Localidades":
            return QSettings().value('xLocal')
        elif nombreCapa == "Secciones":
            return QSettings().value('xSeccion')
        elif nombreCapa == "Municipios":
            return QSettings().value('xMunicipio')
        elif nombreCapa == "Region Catastral":
            return QSettings().value('xRegion')
        elif nombreCapa == "Estado":
            return QSettings().value('xEstado')
        elif nombreCapa == "Manzanas":
            return QSettings().value('xManzanasRef')
        elif nombreCapa == "Predios":
            return QSettings().value('xPredRef')
        elif nombreCapa == "Construcciones":
            return QSettings().value('xConstRef')
        
        return 'None'
    '''def selec(self):
        self.xManzana.selectionChanged.connect(self.fun5)
        self.xPredGeom.selectionChanged.connect(self.fun5)
        self.xPredNum.selectionChanged.connect(self.fun5)
        self.xConst.selectionChanged.connect(self.fun5)
        self.xHoriGeom.selectionChanged.connect(self.fun5)
        self.xHoriNum.selectionChanged.connect(self.fun5)
        self.xVert.selectionChanged.connect(self.fun5)
        self.xCvesVert.selectionChanged.connect(self.fun5)'''
        


    def validarCombox(self):
        #return (self.dlg.combos.count() > 0 and self.dlg.comboSector.count() > 0 and self.dlg.comboManzana.count()) or self.modoDesarrollo
        return (self.dlg.comboSector.count() > 0 and self.dlg.comboManzana.count()) or self.modoDesarrollo

    def obtenerIdManzana(self):
        
        
        #Obtener el identificador de la manzana
        if self.modoDesarrollo:
           
            #self.idManzana = '01 001 001 02 0004 016 031' #Esta es la chida
            #self.idManzana = '01 001 001 02 0004 026 039' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 026 040' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 060 004' 
                             #01001001020  4026040
            #self.idManzana = '01001001020004060004'  #La larga
            #self.idManzana = '01001001020004020001'
            #self.idManzana = '01001001020004020001'
            self.idManzana = '01001001020004015001'
            
            #01001001020004026039
            #01001001020  4026039

            #self.idManzana = '01001001020004017005' #esta es la mala krnal
            #self.idManzana =  '010010010204050001' #Esta calamos guardado
            #self.idManzana = '01001001020004026040'
            #self.idManzana = '01001001020004021016'
            

        else:
            index = self.dlg.comboManzana.currentIndex()
            self.idManzana = self.dlg.comboManzana.itemData(index)
            #print(str(self.idManzana))
            self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface, str(self.idManzana))

    
    def obtenerSectoresPorLocalidad(self):

        if self.dlg.comboLocalidad.count() > 0:

            index = self.dlg.comboLocalidad.currentIndex()
            idSector = self.dlg.comboLocalidad.itemData(index)
            
            self.dlg.comboSector.clear()

            #Si es una clave de 16, buscaremos sectores por municipio, de lo contrario sera por localidad
            url = self.CFG.urlSectoresMuni if self.cve_cat_len == 16 else self.CFG.urlSectores

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(url + idSector + '/sector/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor sec1", QMessageBox().Critical, "Cargar Sectores")
                print('ERROR: SEC000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:

                for sector in respuesta.json():

                    self.dlg.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label
            #else:
            #    self.UTI.mostrarAlerta("No existen sectores en la localidad", QMessageBox().Information, "Cargar Sectores")
            

    # cambio a clave de 16
    def obtenerSectoresPorMunicipio(self):

        id = '1' # hardcodeado el identificador del municipio
        self.dlg.comboSector.clear()

        url = self.CFG.urlSectoresMuni

        try:
            headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
            respuesta = requests.get(url + id + '/sector/', headers = headers)
        except requests.exceptions.RequestException:
            self.UTI.mostrarAlerta("Error de servidor sec1", QMessageBox().Critical, "Cargar Sectores")
            print('ERROR: SEC000')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            for sector in respuesta.json():
                self.dlg.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label

    def obtenerManzanasPorSector(self):
    
        if self.dlg.comboSector.count() > 0:

            index = self.dlg.comboSector.currentIndex()
            idSector = self.dlg.comboSector.itemData(index)

            self.dlg.comboManzana.clear()

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(self.CFG.urlManzanas + idSector + '/manzana/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor man1sec", QMessageBox().Critical, "Cargar Manzanas")
                print('ERROR: MAN000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                for manzana in respuesta.json():
                    self.dlg.comboManzana.addItem(manzana['label'], manzana['other'])#Cambiar other por label
            #else:
            #    self.UTI.mostrarAlerta("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")
    def obtenerIdManzana2(self):
        
        
        #Obtener el identificador de la manzana
        if self.modoDesarrollo2:
           
            #self.idManzana = '01 001 001 02 0004 016 031' #Esta es la chida
            #self.idManzana = '01 001 001 02 0004 026 039' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 026 040' #Cortita y chiquita
            #self.idManzana = '01 001 001 02 0004 060 004' 
                             #01001001020  4026040
            #self.idManzana = '01001001020004060004'  #La larga
            #self.idManzana = '01001001020004020001'
            #self.idManzana = '01001001020004020001'
            self.idManzana = '01001001020004015001'
            
            #01001001020004026039
            #01001001020  4026039

            #self.idManzana = '01001001020004017005' #esta es la mala krnal
            #self.idManzana =  '010010010204050001' #Esta calamos guardado
            #self.idManzana = '01001001020004026040'
            #self.idManzana = '01001001020004021016'
            

        else:
            index = self.dlg.comboManzana_3.currentIndex()
            self.idManzana = self.dlg.comboManzana_3.itemData(index)
            #print(str(self.idManzana))
            self.ACA = ActualizacionCatastralV3.ActualizacionCatastralV3(iface, str(self.idManzana))

    def obtenerSectoresPorMunicipio2(self):

        id = '1' # hardcodeado el identificador del municipio
        self.dlg.comboSector_3.clear()

        url = self.CFG.urlSectoresMuni

        try:
            headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
            respuesta = requests.get(url + id + '/sector/', headers = headers)
        except requests.exceptions.RequestException:
            self.UTI.mostrarAlerta("Error de servidor sec1", QMessageBox().Critical, "Cargar Sectores")
            print('ERROR: SEC000')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            for sector in respuesta.json():
                self.dlg.comboSector_3.addItem(sector['label'], sector['value']) #Cambiar value por label

    def obtenerManzanasPorSector2(self):
    
        if self.dlg.comboSector_3.count() > 0:

            index = self.dlg.comboSector_3.currentIndex()
            idSector = self.dlg.comboSector_3.itemData(index)

            self.dlg.comboManzana_3.clear()

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(self.CFG.urlManzanas + idSector + '/manzana/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor man1sec", QMessageBox().Critical, "Cargar Manzanas")
                print('ERROR: MAN000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                for manzana in respuesta.json():
                    self.dlg.comboManzana_3.addItem(manzana['label'], manzana['other'])#Cambiar other por label
            #else:
            #    self.UTI.mostrarAlerta("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")

   

    def cambiarStatusCedula(self, texto, estado):

        self.dlg.lbEstatusCedula.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula.setStyleSheet('color: black')

    
        
    
        
    def botones(self):
        self.dlg.btnConsulta.clicked.connect(self.ira1)
        self.dlg.btnDibujo.clicked.connect(self.ira2)
        self.dlg.btnEliminar.clicked.connect(self.ira3)
        self.dlg.btnTopologia.clicked.connect(self.ira4)
        self.dlg.btnFusDiv.clicked.connect(self.ira5)
        self.dlg.btnCargaMasiva.clicked.connect(self.ira6)
        self.dlg.btnAsigCampo.clicked.connect(self.ira7)
        self.dlg.btnAsigRev.clicked.connect(self.ira8)
        self.dlg.btnAsigPad.clicked.connect(self.ira9)
        self.dlg.btnInterRev.clicked.connect(self.ira10)
        self.dlg.btnInterPad.clicked.connect(self.ira11)
        self.dlg.btnAdminUsers.clicked.connect(self.ira12)
        self.dlg.despliega.clicked.connect(self.despliega)
    #def cambio(self):
        #self.dlg.tabWidget.setCurrentIndex(self.dlg.toolBox.currentIndex())
        #print(self.dlg.toolBox.currentIndex())
        '''if self.dlg.toolBox.currentIndex() == 0:
            #self.dlg.setFixedSize(600,751)
            self.dlg.toolBox.setFixedSize(600,751)
        elif self.dlg.toolBox.currentIndex() == 1:
            #self.dlg.setFixedSize(700,779)
            self.dlg.toolBox.setFixedSize(700,751)
        elif self.dlg.toolBox.currentIndex() == 2:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 3:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 4:
            #self.dlg.setFixedSize(720,779)
            self.dlg.toolBox.setFixedSize(720,751)
        elif self.dlg.toolBox.currentIndex() ==80:
            #self.dlg.setFixedSize(680,779)
            self.dlg.toolBox.setFixedSize(680,751)
        elif self.dlg.toolBox.currentIndex() == 6:
            #self.dlg.setFixedSize(700,779)
            self.dlg.toolBox.setFixedSize(700,751)
        elif self.dlg.toolBox.currentIndex() == 7:
            #self.dlg.setFixedSize(710,779)
            self.dlg.toolBox.setFixedSize(710,751)
        elif self.dlg.toolBox.currentIndex() == 8:
            #self.dlg.setFixedSize(670,779)
            self.dlg.toolBox.setFixedSize(670,751)
        elif self.dlg.toolBox.currentIndex() == 9:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 10:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)
        elif self.dlg.toolBox.currentIndex() == 11:
            #self.dlg.setFixedSize(800,779)
            self.dlg.toolBox.setFixedSize(800,751)'''

    
    def texto(self):
        self.CCC = CertCveCatastral.cambiarStatus(self, texto, estado)

    def cambiarStatus(self, texto, estado):

        self.dlg.lbEstatusCedula_4.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_4.setStyleSheet('color: black')


    '''def lineEditToUpper(self):
        self.dlg.fldCveCat.setText(self.dlg.fldCveCat.text().upper())'''


    

    def cancelaSeleccion2(self):
        if self.abrePredio3:
            self.dlg.btnSeleccionar_2.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus2("Listo...", "ok")
            self.abrePredio3 = False

    

    def cambiarStatus2(self, texto, estado):

        self.dlg.lbEstatusCedula_2.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_2.setStyleSheet('color: black')




    def cancelaSeleccion3(self):
        if self.abrePredio4:
            self.dlg.btnSeleccionar_3.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus("Listo...", "ok")
            self.abrePredio4 = False

    

    def cambiarStatus3(self, texto, estado):

        self.dlg.lbEstatusCedula_3.setText(texto)

        if estado == "ok": # abriendo
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_3.setStyleSheet('color: black')


    def cancelaSeleccion4(self):
        if self.abrePredio5:
            self.dlg.btnSeleccionar_4.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus4("Listo...", "ok")
            self.abrePredio5 = False
    def cambiarStatus4(self, texto, estado):

        self.dlg.lbEstatusCedula_5.setText(texto)

        if estado == "ok":  # abriendo
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: green')
        elif estado == "error":  # Seleccione un solo predio
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_5.setStyleSheet('color: black')

    def cancelaSeleccion5(self):
        if self.abrePredio6:
            self.dlg.btnSeleccionar_5.setEnabled(True)
            # regresa herramienta de seleccion normal
            self.iface.actionPan().trigger()
            self.cambiarStatus5("Listo...", "ok")
            self.abrePredio6 = False
    def cambiarStatus5(self, texto, estado):

        self.dlg.lbEstatusCedula_6.setText(texto)

        if estado == "ok":  # abriendo
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: green')
        elif estado == "error":  # Seleccione un solo predio
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: red')
        else:
            self.dlg.lbEstatusCedula_6.setStyleSheet('color: black')
    
    def vaciarTablitaRef(self):
        
        self.dlg.tablaEdicionRef.clearContents()
        self.dlg.tablaEdicionRef.setRowCount(0)
            
        self.dlg.tablaServiciosCalles.clearContents()
        self.dlg.tablaServiciosCalles.setRowCount(0)
    def cambiarStatusRef(self, texto, estado):

        self.dlg.labelStatusEdicionRef.setText(texto)

        #self.dockwidget.labelStatusEdicionRef.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
        
        if estado == "ok":
            estilo = """color: rgb(1, 230, 1);
"""
        elif estado == "error":
            estilo = """color: rgb(255, 0, 0);
"""
        elif estado == "warning":
            estilo = """color: rgb(255, 255, 0);
"""

        self.dlg.labelStatusEdicionRef.setStyleSheet(estilo)
    def despliega(self):
        if self.i == 0:
            self.i = self.i +1
            self.dlg.setFixedSize(682,844)
            #self.dlg.despliega.setFixedSize(121,51)
            self.dlg.despliega.setIcon(QtGui.QIcon(':/plugins/Master/icons/menu2.png'))
        elif self.i == 1:
            self.dlg.setFixedSize(140,844)
            #self.dlg.despliega.setFixedSize(110,51)
            self.dlg.despliega.setIcon(QtGui.QIcon(':/plugins/Master/icons/menu1.png'))
            self.i = 0
    def ira1(self):
        self.dlg.tabWidget.setCurrentIndex(0)
        #self.dlg.setFixedSize(600,806)
        self.dlg.setWindowTitle('menu                                                                                             ' + 'Documentos')
        #self.dlg.tabWidget.setFixedSize(600,806)
        self.dlg.btnConsulta.setEnabled(False)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)

    def ira2(self):
        self.dlg.tabWidget.setCurrentIndex(1)
        self.dlg.setWindowTitle('menu                                                                                ' + 'Edicion Cartográfica')
        #self.dlg.setFixedSize(700,806)
        #self.dlg.tabWidget.setFixedSize(700,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(False)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira3(self):
        self.dlg.tabWidget.setCurrentIndex(2)
        #self.dlg.setFixedSize(750,806)
        #self.dlg.tabWidget.setFixedSize(750,806)
        self.dlg.setWindowTitle('menu                                                                                ' + 'Admin Users')
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(False)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira4(self):
        self.dlg.tabWidget.setCurrentIndex(3)
        #self.dlg.setFixedSize(650,806)
        #self.dlg.tabWidget.setFixedSize(650,806)
        self.dlg.setWindowTitle('menu                                                                                             ' + 'Topologia')
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(False)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira5(self):
        self.dlg.tabWidget.setCurrentIndex(4)
        #self.dlg.setFixedSize(720,806)
        #self.dlg.tabWidget.setFixedSize(720,806)
        self.dlg.setWindowTitle('menu                                                                                             ' + 'Fusión División')
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(False)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira6(self):
        self.dlg.tabWidget.setCurrentIndex(5)
        #self.dlg.setFixedSize(680,806)
        #self.dlg.tabWidget.setFixedSize(680,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(False)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira7(self):
        self.dlg.tabWidget.setCurrentIndex(6)
        #self.dlg.setFixedSize(700,806)
        #self.dlg.tabWidget.setFixedSize(700,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(False)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira8(self):
        self.dlg.tabWidget.setCurrentIndex(7)
        #self.dlg.setFixedSize(710,806)
        #self.dlg.tabWidget.setFixedSize(710,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(False)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira9(self):
        self.dlg.tabWidget.setCurrentIndex(8)
        #self.dlg.setFixedSize(670,806)
        #self.dlg.tabWidget.setFixedSize(670,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(False)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira10(self):
        self.dlg.tabWidget.setCurrentIndex(9)
        #self.dlg.setFixedSize(650,806)
        #self.dlg.tabWidget.setFixedSize(650,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(False)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira11(self):
        self.dlg.tabWidget.setCurrentIndex(10)
        #self.dlg.setFixedSize(800,806)
        #self.dlg.tabWidget.setFixedSize(800,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(False)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(True)
    def ira12(self):
        self.dlg.tabWidget.setCurrentIndex(11)
        #self.dlg.setFixedSize(780,806)
        #self.dlg.tabWidget.setFixedSize(780,806)
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(False)
        self.dlg.btnSolicitud.setEnabled(True)
    def solicitudes(self):
        self.dlg.btnConsulta.setEnabled(True)
        self.dlg.btnDibujo.setEnabled(True)
        self.dlg.btnEliminar.setEnabled(True)
        self.dlg.btnTopologia.setEnabled(True)
        self.dlg.btnFusDiv.setEnabled(True)
        self.dlg.btnCargaMasiva.setEnabled(True)
        self.dlg.btnAsigCampo.setEnabled(True)
        self.dlg.btnAsigRev.setEnabled(True)
        self.dlg.btnAsigPad.setEnabled(True)
        self.dlg.btnInterRev.setEnabled(True)
        self.dlg.btnInterPad.setEnabled(True)
        self.dlg.btnAdminUsers.setEnabled(True)
        self.dlg.btnSolicitud.setEnabled(False)
    def confirmarCortes(self, corte, geo): #Aqui cehcamos que los cortes esten en orden
        
        
        #cuentaCortes = 0
        rango = corte
        #rango = len(self.eventos.relaciones) - 1

        geoTemp = geo
        #geoTemp = QgsGeometry.fromWkt(self.geomEnDivision.asWkt())
        print('------------------------------')
        print(geoTemp)
        print('------------------------------')
        cuentaSalida = self.subdividirPredio(geoTemp, True) - 1 #Aqui enviamos una geomtria temporal, para ven en cuantos cortes quedara
        print(cuentaSalida)
        if cuentaSalida >= 2:

            listaNoTocar = []
            capaPredios = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('predios.geom'))
            capaCondH = QgsProject.instance().mapLayersByName('horizontales.geom')[0]
            capaCondV = QgsProject.instance().mapLayersByName('verticales')[0]
            capaConstru = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('construcciones'))
            
            #Obtenemos los features que no deben tocarse
            for feat in capaConstru.getFeatures():
                geom = feat.geometry().buffer(-0.0000002, 1)
                if geom.intersects(self.geomEnDivision):
                    listaNoTocar.append(geom)

            for feat in capaCondH.getFeatures():
                geom = feat.geometry().buffer(-0.0000002, 1)
                if geom.intersects(self.geomEnDivision):
                    listaNoTocar.append(geom)

            for feat in capaCondV.getFeatures():
                geom = feat.geometry().buffer(-0.0000002, 1)
                if geom.intersects(self.geomEnDivision):
                    listaNoTocar.append(geom)
            
            bandera = True
            
            #Aqui checamos que cada linea no toque lo no tocable
            for i in range(0, rango):
                for comp in listaNoTocar:
                    geom = self.eventos.relaciones[i].geom
                    if geom != None:
                        if geom.buffer(0.0000001,1).intersects(comp):
                            bandera = False
                            self.eventos.relaciones[i].rubber.setStrokeColor(QColor(255,0,0,255))
                        else:
                            self.eventos.relaciones[i].rubber.setStrokeColor(QColor(0,61,240,255))
            
            iface.mapCanvas().refresh()
            if bandera: #Si todo esta en orden
                self.eventos.rubberPunto.reset(QgsWkbTypes.PointGeometry)
                self.apagarHerramientas()
                #mostramos mensaje de confirmacion
                mensaje = "La cantidad de predios que quedaran como resultado, es de: " + str(cuentaSalida) + "\nDeseas continua?"
                respuesta = QMessageBox.question(iface.mainWindow(), "Nota de subdivision de predio", mensaje, QMessageBox.Yes, QMessageBox.No)

                #Si el usuario acepta....
                if respuesta == QMessageBox.Yes:
                    self.subdividirPredio(self.geomEnDivision, False)
                    self.rubberMarca.reset(QgsWkbTypes.PolygonGeometry) #Quitamos lo amarillito

                    for i in range(0, rango):
                        self.eventos.relaciones[i].rubber.reset(QgsWkbTypes.LineGeometry)
                        self.eventos.relaciones[i].vaciarMarcadores()
                    self.eventos.recargarRelaciones()

                    capaPredios.startEditing()
                    capaPredios.dataProvider().deleteFeatures([self.predioEnDivision.id()])
                    capaPredios.triggerRepaint()
                    capaPredios.commitChanges()

                    #self.VentanaAreas.close()
                    self.DFS.limpiarAreas()
                    self.DFS.vaciarRubbers()

                    self.UTI.mostrarAlerta("La division ha sido realizada con exito\nLos cambios se guardaran hasta que asignes las claves.", QMessageBox().Information, "Subdivision completa, Parte 1 de 2")
                    #self.DFS.irAClaves() #Mostramos la ventana que llena las claves
                    iface.actionSelect().trigger()
                    self.dlg.RdManual.setEnabled(True)
                    self.dlg.RdAuto.setEnabled(True)
                    #self.dlg.btnCancelarSub.setEnabled(True)
                    self.dlg.lineEdit.setEnabled(True)
                    self.dlg.lineEdit_2.setEnabled(True)
                    self.dlg.btnSend.setEnabled(True)
                    self.dlg.btnClave.setEnabled(True)
            else:
                self.UTI.mostrarAlerta("Las lineas de division no deben atravesar construcciones ni condominios\nLas lineas rojas presentan un corte invalido", QMessageBox().Critical, "Error en subdivision")
        
        else:
            self.UTI.mostrarAlerta("Primero debes dibujar las lineas de corte\nAsegurate que las lineas atraviesen por completo el predio", QMessageBox().Critical, "Error en subdivision")
            #print(cuentaSalida)
##################################################################################


#-------------------------------------------------------------------------------------

    def subdividirPredio(self, geometria, modoPre): #Subdividir
        capaHori = QgsProject.instance().mapLayersByName('horizontales.geom')[0]
        capaPredio = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('predios.geom'))
        capaVert = QgsProject.instance().mapLayersByName('verticales')[0]

        self.listaNuevosPredios = []
        self.geomsAreas = []
        listaParam = [] #La lista que llega al fileteo
        #rango = corte 
        rango = len(self.eventos.relaciones) - 1
        #print('**********************************************')
        #print(self.eventos.relaciones)
        #print(rango)
        #print('**********************************************')
        for i in range(0, rango):

            geom = self.eventos.relaciones[i].geom
            #print('-----------------*****------------------------')
            #print(self.eventos.relaciones[i])
            #print(geom)
            #print('-----------------*****------------------------')
            if geom != None:
                listaParam.append(geom.asPolyline()) #Generamos los polyline van a partir

        #print('aaaaaaaaaaa', listaParam)
        salida= self.filetear(geometria, listaParam) #Mandamos filetear el poligono con las lineas

        if modoPre: #Si es modoPre, es solo para visaulizar cuantos poligonos quedarian...
            
            for cadaUno in salida:
                self.geomsAreas.append(cadaUno)
            return len(salida)
        else: #Si no, efectuamos realmente el corte
            for cadaUno in salida:

                if cadaUno.isEmpty():
                    continue

                nuevoFeat = QgsFeature()
                nuevoFeat.setGeometry(cadaUno)
                #Agregamos cada predio a la capa y le ponemos sus atributos
                
                self.DFS.asignarAtributos(nuevoFeat)

                capaPredio.startEditing()
                capaPredio.dataProvider().addFeatures([nuevoFeat])
                capaPredio.triggerRepaint()
                capaPredio.commitChanges()

                self.listaNuevosPredios.append(nuevoFeat.geometry().asWkt())
        
        self.apagarHerramientas()
        self.dlg.btnCargarPredio.setEnabled(True)

##################################################################################

    #Metodo para filetear los predios con lineas
    def filetear(self, poligono, lineas):
        listaActuales = [] #Lista de las geometrias en espera de ser cortadas
        listaActuales.append(poligono) #Agregamos el poligono a cortar en la lista de espera
        listaSiguiente = [poligono]  #Agregamos le poligono a cortar en la lista de la siguiente interacion

        for linea in lineas: #Iteramos cada linea de corte

            listaActuales = listaSiguiente #Igualamos la lista de corte a la iteracion anterior
            listaSiguiente =  [] #Vaciamos la lista que dara lugar a la siguiente iteracion de corte
            
            for actual in listaActuales: #Checamos cada geometria en espera
                
                partida = actual.splitGeometry(linea, True) #Aplicamos el split geometry de qgis, vamos partiendo el poligono
                if len(partida[1]) == 0: #Esto ocurre cuando el corte no hizo nada
                    listaSiguiente.append(actual) #Asi que nos quedamos con la geometria tal cual esta
                else: #Cuando si hubo corte
                    parte1 = partida[1][0] #obtenemos la geometria resultante del corte, VER DOCUMENTACION DE SPLITGEOMETRY PARA ENTENDER
                    parte2 = actual.difference(parte1) #Al poligono que se corto, le quitamos la parte previa al corte anterior
                    #De esta forma nos quedamos con la geometria partida en 2

                    if parte1.area() > 0.0: #Checamos que el area de esta parte sea mayor que 0, por motivos de los decimales
                        listaSiguiente.append(parte1) #Si es asi, significa un fragmento que puede ser cortado por otra linea
                    
                    if parte2.area() > 0.0: #Lo mismo
                        listaSiguiente.append(parte2)

        temporal = poligono #Obtenemos una geometria igualita al poligono entrannte

        for geomSal in listaSiguiente: #Obtenemos las diferencia respeto a los poligonos obtenidos y el entrante, lo que resulte, tambien es parte del corte
            temporal = temporal.difference(geomSal.buffer(0.0000001,1))

        listaSiguiente.append(temporal) #Aqui ponemos todas las geometrias
        return listaSiguiente #Retornamos la lista
    def apagarHerramientas(self): #Apagamos las herramientas
        self.eventos.modoDividir = False
        self.eventos.modoEliminar = False
        self.eventos.modoEditar = False

        self.dlg.comboPredios.setEnabled(False)
        self.dlg.btnDibujarCortes.setEnabled(False)
        self.dlg.btnEditarCortes.setEnabled(False)
        self.dlg.btnEliminarCortes.setEnabled(False)
        #self.dlg.btnApagarHerramientas.setEnabled(False)
        #self.dlg.btnConfirmarCortes.setEnabled(False)
        #self.dlg.btnDeshacerTodo.setEnabled(False)

        self.dlg.btnSubdividir.setEnabled(False)
        self.dlg.btnCancelarSub.setEnabled(False)
        self.dlg.btnLlamarCalcular.setEnabled(False)
        #iface.mapCanvas().setCursor(self.DBJ.eventos.cursorCruz)
        iface.mapCanvas().setCursor(self.UTI.cursorCruz)
        if self.eventos.botonAD.isChecked():
            self.eventos.botonAD.trigger()


#-------------------------------------------------------------------------

#----------------------------------------------------------------------------

    def encenderModoEditar(self): #Activamos el modo de dividir
        
        self.eventos.modoDividir = False
        self.eventos.modoEliminar = False
        self.eventos.modoEditar = True
        self.dlg.btnDibujarCortes.setEnabled(True)
        self.dlg.btnEditarCortes.setEnabled(False)
        self.dlg.btnEliminarCortes.setEnabled(True)
        self.dlg.btnApagarHerramientas.setEnabled(True)
        self.dlg.btnConfirmarCortes.setEnabled(True)
        self.dlg.btnDeshacerTodo.setEnabled(True)
        self.dlg.btnCargarPredio.setEnabled(False)
        #iface.mapCanvas().setCursor(self.DBJ.eventos.cursorRedondo)
        iface.mapCanvas().setCursor(self.UTI.cursorRedondo)
        if not self.eventos.botonAD.isChecked():
            self.eventos.botonAD.trigger()
    def desactivar(self):
        if self.mapTool.lastMouseButtonClicked == "RIGHT":
            self.click = True
            self.mododibujo = False
            self.dlg.label_21.setText("DESACTIVADO")
            estilo = """color: rgb(255, 0, 0);
"""
            self.dlg.label_21.setStyleSheet(estilo)
    def colapsar(self):
        #self.dlg.mGroupBox_8.isCollapsed()
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            self.dlg.mGroupBox.setGeometry(11,30,481,169)
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,50,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,346,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)


            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
            self.dlg.mGroupBox_5.setFixedSize(481,20)
            #self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
            
        elif self.dlg.mGroupBox_5.isCollapsed() == False:
            if self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,730,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,535,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)

                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            else:
                self.dlg.mGroupBox_2.setGeometry(11,361,481,169)
            self.dlg.mGroupBox.setGeometry(11,186,481,169)
            
            #self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
            self.dlg.mGroupBox_5.setFixedSize(481,169)

        #print(self.dlg.mGroupBox_5.isCollapsed())
    def colapsar1(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                self.dlg.mGroupBox_2.setGeometry(11,50,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,346,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_2.isCollapsed() == True:
                        self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            elif self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
            
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
                
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,206,481,169)
            elif self.dlg.mGroupBox.isCollapsed() == False:
                if self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,730,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,535,481,169)
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                            self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                            if self.dlg.mGroupBox_4.isCollapsed() == False:
                                self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                self.dlg.mGroupBox_2.setGeometry(11,361,481,169)

        #print(self.dlg.mGroupBox.isCollapsed())
    def colapsar2(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,346,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,70,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,226,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
            else:
                
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,20)
                    self.dlg.mGroupBox_3.setGeometry(11,381,481,169)
                elif self.dlg.mGroupBox_2.isCollapsed() == False:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,251)
                    if self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,730,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,251)
                    self.dlg.mGroupBox_2.setFixedSize(481,169)
                    self.dlg.mGroupBox_3.setGeometry(11,535,481,169)

        #print(self.dlg.mGroupBox_2.isCollapsed())
    def colapsar3(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,340,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,90,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,246,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,573,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,401,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,555,481,169)
                    elif self.dlg.mGroupBox_3.isCollapsed() == False:
                        if self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,730,481,169)
                        self.dlg.mGroupBox_4.setGeometry(11,710,481,169)

        #print(self.dlg.mGroupBox_2.isCollapsed())

    def colapsar4(self):
        if self.dlg.mGroupBox_5.isCollapsed() == True:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,110,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,346,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
        else:
            if self.dlg.mGroupBox.isCollapsed() == True:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,266,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,500,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                    
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
            else:
                if self.dlg.mGroupBox_2.isCollapsed() == True:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,421,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,660,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                else:
                    if self.dlg.mGroupBox_3.isCollapsed() == True:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,575,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,810,481,169)
                    else:
                        if self.dlg.mGroupBox_4.isCollapsed() == True:
                            self.dlg.mGroupBox_6.setGeometry(11,730,481,169)
                        elif self.dlg.mGroupBox_4.isCollapsed() == False:
                            self.dlg.mGroupBox_6.setGeometry(11,967,481,169)
    def validarEdicionRef(self):

        nombreCapa = self.traducirIdCapa( self.capaActiva.id())
        feat = self.capaActiva.selectedFeatures()[0]
        banderaCompleta = True
        claveAnterior = ''

        self.capaActiva.setReadOnly(False)
        self.capaActiva.startEditing()

        #----------------------Area de valor------------------#
        if nombreCapa == 'Area de Valor':

            texto = "Nada"

            banderaValor = True

            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False
            if self.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    feat['valor'] = float(texto)
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False
            
            banderaDesc = True

            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 256: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False


            if not banderaValor:
                self.UTI.mostrarAlerta('El valor debe ser un numero decimal cuya longitud de texto no exceda 12 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.UTI.mostrarAlerta('La descripcion no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaDesc

            if banderaCompleta:
                indexCveVus = self.comboCveVus.currentIndex()
                # feat['clave'] = self.comboCveVus.itemData(indexCveVus)

        #----------------------Zona Uno------------------#
        elif nombreCapa == 'Zona Uno':

            texto = "Nada"

            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Zona Dos------------------#
        elif nombreCapa == 'Zona Dos':

            texto = "Nada"

            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if len(texto) <= 50: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaCompleta = False

            
            if not banderaCompleta:
                self.UTI.mostrarAlerta('La descripcion no debe exceder 50 caracteres', QMessageBox().Critical, 'Error de entrada')

        #----------------------Codigo Postal------------------#
        elif nombreCapa == 'Codigo Postal':

            texto = "Nada"

            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaCompleta = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 5: #Validacion de longitud
                    feat['cve_cp'] = texto
                else:
                    banderaCompleta = False
            else: #Cuando no es numerico
                banderaCompleta = False
            
            if not banderaCompleta:
                self.UTI.mostrarAlerta('El codigo postal debe estar compuesto por 5 números', QMessageBox().Critical, 'Error de entrada')

        #----------------------Colonias------------------#
        elif nombreCapa == 'Colonias':

            texto = "Nada"

            banderaClave = True
            banderaDesc = True

            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if len(texto) == 4: #Validacion de longitud
                feat['cve_col'] = texto
            else:
                banderaClave = False

            
            try:
                texto = self.dlg.tablaEdicionRef.item(2, 1).text()
            except: #Error al obtenre texto
                banderaDesc = False
            if len(texto) <= 64: #Validacion de longitud
                feat['descripcion'] = texto
            else:
                banderaDesc = False

            if not banderaClave:
                self.UTI.mostrarAlerta('La longitud de la clave debe ser de 4 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaDesc:
                self.UTI.mostrarAlerta('La longitud de la descripcion no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaDesc

            if banderaCompleta:
                indexComboAs = self.comboTipoAs.currentIndex()
                feat['id_tipo_asentamiento'] = self.comboTipoAs.itemData(indexComboAs)
                
        #-------------------------Calles------------------------#
        elif nombreCapa == 'Calles':

            texto = "Nada"

            banderaTipo = True
            banderaCalle = True
            banderaValor = True

            # V A L O R 
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaValor = False

            if self.UTI.esFloat(texto): #Cuando es entero
                if len(texto) < 12: #Validacion de longitud
                    
                    feat['valor'] = float(texto)
                    
                else:
                    banderaValor = False
            else: #Cuando no es numerico
                banderaValor = False

            # Nombre de la calle
            try:
                texto = self.dlg.tablaEdicionRef.item(4, 1).text()
            except: #Error al obtenre texto
                banderaCalle = False
            if len(texto) <= 256: #Validacion de longitud
                feat['calle'] = texto
            else:
                banderaCalle = False

            # Tipo de vector
            try:
                texto = self.dlg.tablaEdicionRef.item(3, 1).text()
            except: #Error al obtenre texto
                banderaTipo = False
            if len(texto) <= 64: #Validacion de longitud
                feat['tipo_vector_calle'] = texto
            else:
                banderaTipo = False

            if not banderaValor:
                self.UTI.mostrarAlerta('El valor debe ser decimal y no exceder los 12 caracteres de longitud', QMessageBox().Critical, 'Error de entrada')

            if not banderaCalle:
                self.UTI.mostrarAlerta('La longitud de la calle no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            if not banderaTipo:
                self.UTI.mostrarAlerta('La longitud del tipo de vector no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaValor and banderaTipo and banderaTipo

            if banderaCompleta:
                indexComboVia = self.comboTipoVia.currentIndex()
                feat['id_cve_vialidad'] = self.comboTipoVia.itemData(indexComboVia)
                feat['c_tipo_vialidad'] = self.comboTipoVia.currentText()
                feat['longitud'] = float(self.dlg.tablaEdicionRef.item(1, 1).text())

        #----------------------Sectores------------------#
        elif nombreCapa == 'Sectores':

            texto = ""

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False

            # validacion de longitud de la cadena
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    claveAnterior = feat['clave']
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False

            if banderaClave and claveAnterior == texto:
                self.capaActiva.commitChanges()
                self.UTI.mostrarAlerta("Sin cambios por realizar", QMessageBox().Information, 'Actualización de datos')
                return False

            if banderaClave:
                # consulta para verificacion de clave SECTOR
                mpio = QSettings().value("cveMpio")

                payload = {}
                payload['clave'] = texto
                payload['claveFiltro'] = mpio
                payload['tipo'] = 'SECTOR'
                respuesta = self.consumeWSGeneral1(self.CFG.url_validaClaves, payload)
                if not respuesta:
                    self.capaActiva.commitChanges()
                    return

                if not respuesta['uso']:
                    self.capaActiva.commitChanges()
                    self.UTI.mostrarAlerta("La clave '" + texto+ "' se encuentra inactiva, no se puede usar", QMessageBox().Critical, 'Error de entrada')
                    return False

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 2 números', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave

        #----------------------Localidades------------------#
        elif nombreCapa == 'Localidades':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 4: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 4 números', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Secciones------------------#
        elif nombreCapa == 'Secciones':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 2 números', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Municipios------------------#
        elif nombreCapa == 'Municipios':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 256: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 3 números', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud del nombre no debe exceder 256 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Regions Catastral------------------#
        elif nombreCapa == 'Region Catastral':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 3: #Validacion de longitud
                    feat['clave'] = texto
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 3 números', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaClave and banderaNom

        #----------------------Estado------------------#
        elif nombreCapa == 'Estado':

            texto = "Nada"

            banderaClave = True
            banderaNom = True

            #Comparar la clave
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaClave = False
            if self.UTI.esEntero(texto): #Cuando es entero
                if len(texto) == 2: #Validacion de longitud
                    feat['clave'] = int(texto)
                else:
                    banderaClave = False
            else: #Cuando no es numerico
                banderaClave = False
            
            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(1, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 64: #Validacion de longitud
                feat['nombre'] = texto
            else:
                banderaNom = False


            banderaCompleta = banderaClave and banderaNom

            #Banderas
            if not banderaClave:
                self.UTI.mostrarAlerta('La clave debe estar compuesta por 2 números', QMessageBox().Critical, 'Error de entrada')

            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud del nombre no debe exceder 64 caracteres', QMessageBox().Critical, 'Error de entrada')
        
        #----------------------Corredor de Valor------------------#
        elif nombreCapa == 'Corredor de Valor':

            texto = "Nada"

            banderaNom = True

            #Comparar el nombre
            try:
                texto = self.dlg.tablaEdicionRef.item(0, 1).text()
            except: #Error al obtenre texto
                banderaNom = False
            if len(texto) <= 10: #Validacion de longitud
                feat['clave'] = texto
            else:
                banderaNom = False

            #Banderas
            if not banderaNom:
                self.UTI.mostrarAlerta('La longitud de la clave no debe exceder 10 caracteres', QMessageBox().Critical, 'Error de entrada')

            banderaCompleta = banderaNom

        if banderaCompleta and nombreCapa == 'Sectores':
            claveFiltro = QSettings().value("cveMpio")
            claves = EstatusClaves_dialog.EstatusClavesDialog(pluginV = self, claveActual = claveAnterior, claveFiltro = claveFiltro, tipo = 'SECTOR', referencia = True)

            # regresa un 0 o un 1
            # 0 = RECHAZADO = CANCELAR
            # 1 = ACEPTADO = ACEPTAR
            respuesta = claves.exec()
            
            if respuesta == 0:
                self.capaActiva.commitChanges()
                return

            print(QSettings().value('clavesEstatusRef'))

        self.capaActiva.updateFeature(feat)
        self.capaActiva.triggerRepaint()
        self.capaActiva.commitChanges()
        self.capaActiva.setReadOnly(False)
        return banderaCompleta
    def traducirIdCapa(self, idCapa):

        if QSettings().value('xManzana') == idCapa:
            return 'manzana'
        elif QSettings().value('xPredGeom') == idCapa:
            return 'predios.geom'
        elif QSettings().value('xPredNum') == idCapa:
            return 'predios.num'
        elif QSettings().value('xConst') == idCapa:
            return 'construcciones'
        elif QSettings().value('xHoriGeom') == idCapa:
            return 'horizontales.geom'
        elif QSettings().value('xHoriNum') == idCapa:
            return 'horizontales.num'
        elif QSettings().value('xVert') == idCapa:
            return 'verticales'
        elif QSettings().value('xCvesVert') == idCapa:
            return 'cves_verticales'

        elif QSettings().value('xAreaValor') == idCapa:
            return 'Area de Valor'
        elif QSettings().value('xZonaUno') == idCapa:
            return 'Zona Uno'
        elif QSettings().value('xZonaDos') == idCapa:
            return 'Zona Dos'
        elif QSettings().value('xCP') == idCapa:
            return 'Codigo Postal'
        elif QSettings().value('xColonia') == idCapa:
            return 'Colonias'
        elif QSettings().value('xCorrValor') == idCapa:
            return 'Corredor de Valor'
        elif QSettings().value('xCalle') == idCapa:
            return 'Calles'
        elif QSettings().value('xSector') == idCapa:
            return 'Sectores'
        elif QSettings().value('xLocal') == idCapa:
            return 'Localidades'
        elif QSettings().value('xSeccion') == idCapa:
            return 'Secciones'
        elif QSettings().value('xMunicipio') == idCapa:
            return 'Municipios'
        elif QSettings().value('xRegion') == idCapa:
            return 'Region Catastral'
        elif QSettings().value('xEstado') == idCapa:
            return 'Estado'
        elif QSettings().value('xManzanasRef') == idCapa:
            return 'Manzanas'
        elif QSettings().value('xPredRef') == idCapa:
            return 'Predios'
        elif QSettings().value('xConstRef') == idCapa:
            return 'Construcciones'

        return None
    def traerOperaciones(self):
        #self.createAlert("Si conecto", QMessageBox().Information, "Si se hizo")
        self.dlg.twOperaciones_2.clearContents()
        self.dlg.twOperaciones_2.setRowCount(0)



        row = self.dlg.twOperaciones.currentRow()
        rol = self.dlg.twOperaciones.item(row,0)

        #print('---------------')
        #print(rol.text())
        #print(self.CFG.url_AU_getAllRole + rol.text())
        #print('---------------')


        self.roles = self.consumeWSGeneral(url_cons = self.CFG.url_AU_getAllRole + rol.text())
        #print(self.roles)
        if not self.roles:
             return

                # mostrar usuarios en tabla
        self.dlg.twOperaciones_2.setRowCount(len(self.roles))
        for x in range(0, len(self.roles)):
            

           
            check = QTableWidgetItem(self.roles[x]['nombre'])

            #check = QTableWidgetItem(self.roles[x]['asignado'])
            check.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            if self.roles[x]['asignado'] == False:
                check.setCheckState(QtCore.Qt.Unchecked)
            else:
                check.setCheckState(QtCore.Qt.Checked)

            #self.dlg.twOperaciones_2.setItem(x,0,check)
            
            self.dlg.twOperaciones_2.setItem(x, 0, check)
            self.dlg.twOperaciones_2.setItem(x, 1, QtWidgets.QTableWidgetItem(str(self.roles[x]['id'])))


    def editarOperaciones(self):

        if self.dlg.twOperaciones_2.rowCount() > 0:


            row_2 = self.dlg.twOperaciones.currentRow()
            rol = self.dlg.twOperaciones.item(row_2,0)
            # obtenemos el numero total de registros en el qtablewidget
            allRows = self.dlg.twOperaciones_2.rowCount()

            # inicializamos variable (lista) donde se agregan el texto de los registros activos por check
            self._seleccionados = []

            # se itera los registros del qtablewidget
            for row in range(0, allRows):

                # se obtiene el item segun la iteracion
                # el registro (row) en la posicion 0 (columna 0) 
                # en este ejmplo solo se cuenta con una columna por eso la posicion 0
                item = self.dlg.twOperaciones_2.item(row, 0)
                item3 = self.dlg.twOperaciones_2.item(row, 1)

                # se verifica que el checkbox este seleccionado
                if item.checkState() == 2: # True
                    self._seleccionados.append(item3.text())

            
            envio = {}
            envio['permisos'] = self._seleccionados
            envio['rol'] = rol.text()
            resp = self.guardarOperacion(nuevo = self.nuevo, url = (self.CFG.url_AU_actualizarOperaciones), envio = envio)
                
            if resp == 'OK':
                self.createAlert('Operaciones Asignadas Correctamente', QMessageBox().Information)
            else:
                return
            
            #self.dlg.accept()       
            print(envio)  

    def consumeWSGeneral1(self, url_cons = "", payload = {}):

        url = url_cons
        data = ""

        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(payload)

        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()

            # ejemplo con post, url, header y body o datos a enviar
            response = requests.post(url, headers = self.headers, data = jsonEnv)

        except requests.exceptions.RequestException as e:
            self.UTI.mostrarAlerta("Error de servidor, 'consumeWSGeneral()", QMessageBox().Critical, "Error de servidor")
            print("consumeWSGeneral() '" + str(e) + "'")
            return None

        if response.status_code == 200 or response.status_code == 201:
            data = response.content

        elif response.status_code == 403:
            self.UTI.mostrarAlerta('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Usuarios")
            return None
           
        else:
            self.UTI.mostrarAlerta('Error en peticion "consumeWSGeneral()"', QMessageBox().Critical, "Error de servidor")
            print(response.text)
            return None

        return json.loads(data)
    def consumeWSGeneral(self, url_cons = ""):

        url = url_cons
        data = ""

        try:
            self.headers['Authorization'] = self.UTI.obtenerToken()
            #jwt.decode(self.UTI.obtenerToken(), "JWT", algorithms=['RS256'])
            #print(self.UTI.obtenerToken().encode().decode("RS256"))
            #var = QSettings()
            #token = var.value('token')

        # se decodifica el token (JWT)
            #decode = jwt.decode(token, verify=False)
            #print(decode)
            response = requests.get(url, headers = self.headers)
        except requests.exceptions.RequestException as e:
            self.UTI.mostrarAlerta("Error de servidor, 'consumeWSGeneral(Master)' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return

        if response.status_code == 200:
            data = response.content
            
        elif response.status_code == 403:
            self.UTI.mostrarAlerta('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Sistema Cartográfico")
            return None
           
        else:
            self.UTI.mostrarAlerta('Error en peticion "consumeWSGeneral(Master)":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return
        #print(json.loads(data.decode("utf-8")))
        return json.loads(data.decode("utf-8"))

    def guardaUsuario(self, nuevo = False, url = '', envio = {}):
        data = ""
        
        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(envio)
        
        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()

            if nuevo:
                response = requests.post(url, headers = self.headers, data = jsonEnv)
                print(response)
            else:

                # ejemplo con put, url, header y body o datos a enviar
                response = requests.put(url, headers = self.headers, data = jsonEnv)

        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'guardaUsuario()' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return str(e)

        if response.status_code == 403:
            self.createAlert('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Usuarios")
            return None
 
           
        elif response.status_code >= 300:
            #self.createAlert('Error en peticion "guardaUsuario()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            if response.text[170:188] == '"error.userexists"':
                self.createAlert('El usuario ya existe', QMessageBox().Critical, "Usuarios")
            if response.text[179:198] == '"error.emailexists"':
                self.createAlert('El correo electrónico ya existe', QMessageBox().Critical, "Usuarios")
            return response.text

        return 'OK'   
    def guardarOperacion(self, nuevo = False, url = '', envio = {}):
        data = ""
        
        # envio - el objeto de tipo dict, es el json que se va a guardar
        # se debe hacer la conversion para que sea aceptado por el servicio web
        jsonEnv = json.dumps(envio)
        
        try:
            # header para obtener el token
            self.headers['Authorization'] = self.UTI.obtenerToken()

            if nuevo:
                response = requests.put(url, headers = self.headers, data = jsonEnv)
           

                # ejemplo con put, url, header y body o datos a enviar
               

        except requests.exceptions.RequestException as e:
            self.createAlert("Error de servidor, 'guardarOperacion()' '" + str(e) + "'", QMessageBox().Critical, "Error de servidor")
            return str(e)

        if response.status_code == 403:
            self.createAlert('Sin Permisos para ejecutar la accion', QMessageBox().Critical, "Operaciones")
            return None
           
        elif response.status_code >= 300:
            self.createAlert('Error en peticion "guardarOperacion()":\n' + response.text, QMessageBox().Critical, "Error de servidor")
            return response.text

        return 'OK'

            #print("actualizarCapaActiva : False")
'''class AdvancedMapTool(QgsMapToolAdvancedDigitizing):
    def __init__(self, canvas, caddlg, pluginM):
        QgsMapToolAdvancedDigitizing.__init__(self, canvas, cadDockWidget)

        #print('entrar')
        self.canvas = canvas
        self.pluginM = pluginM
        for x in iface.advancedDigitizeToolBar().actions():
            if x.objectName() == 'mEnableAction':
                self.botonAD = x
        self.lastMouseButtonClicked = None
    def cadCanvasPressEvent(self, evt):
        if evt.buttons() == Qt.RightButton:
            self.lastMouseButtonClicked = "RIGHT"
            self.pluginM.desactivar()
            #print('derecha')'''         
